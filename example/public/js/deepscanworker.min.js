(()=>{var t={349:(t,e,n)=>{var r,s=(r=(r="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){function e(){return E.buffer!=U&&Y(E.buffer),G}function s(){return E.buffer!=U&&Y(E.buffer),j}function i(){return E.buffer!=U&&Y(E.buffer),H}function o(){return E.buffer!=U&&Y(E.buffer),q}function a(){return E.buffer!=U&&Y(E.buffer),X}var u,c=void 0!==(t=t||{})?t:{},l={};for(u in c)c.hasOwnProperty(u)&&(l[u]=c[u]);var h=[],d=!1,f=!1,p=!1,m=!1;d="object"==typeof window,f="function"==typeof importScripts,p="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,m=!d&&!p&&!f;var b=c.ENVIRONMENT_IS_PTHREAD||!1;b&&(U=c.buffer,Z=c.DYNAMIC_BASE,Q=c.DYNAMICTOP_PTR);var y,g,x,w,v="";function k(t){return c.locateFile?c.locateFile(t,v):v+t}if(p){var $;v=f?n(386).dirname(v)+"/":"//",y=function(t,e){return x||(x=n(993)),w||(w=n(386)),t=w.normalize(t),x.readFileSync(t,e?null:"utf8")},g=function(t){var e=y(t,!0);return e.buffer||(e=new Uint8Array(e)),I(e.buffer),e},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),h=process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof hn))throw t})),process.on("unhandledRejection",wt),c.inspect=function(){return"[Emscripten Module object]"};try{$=n(614)}catch(t){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),t}Worker=$.Worker}else m?("undefined"!=typeof read&&(y=function(t){return read(t)}),g=function(t){var e;return"function"==typeof readbuffer?new Uint8Array(readbuffer(t)):(I("object"==typeof(e=read(t,"binary"))),e)},"undefined"!=typeof scriptArgs?h=scriptArgs:void 0!==arguments&&(h=arguments),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(d||f)&&(f?v=self.location.href:document.currentScript&&(v=document.currentScript.src),void 0!==r&&r&&(v=r),v=0!==v.indexOf("blob:")?v.substr(0,v.lastIndexOf("/")+1):"",p?(y=function(t,e){return x||(x=n(993)),w||(w=n(386)),t=w.normalize(t),x.readFileSync(t,e?null:"utf8")},g=function(t){var e=y(t,!0);return e.buffer||(e=new Uint8Array(e)),I(e.buffer),e}):(y=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},f&&(g=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)})));p&&"undefined"==typeof performance&&(performance=n(513).performance);var N,C,E,S=c.print||console.log.bind(console),A=c.printErr||console.warn.bind(console);for(u in l)l.hasOwnProperty(u)&&(c[u]=l[u]);l=null,c.arguments&&(h=c.arguments),c.thisProgram&&c.thisProgram,c.quit&&c.quit,Atomics.load,Atomics.store,Atomics.compareExchange,c.wasmBinary&&(N=c.wasmBinary),c.noExitRuntime&&(C=c.noExitRuntime),"object"!=typeof WebAssembly&&A("no native wasm support detected");var R,T=new WebAssembly.Table({initial:169,maximum:169,element:"anyfunc"}),O=0,F=!1;function I(t,e){t||wt("Assertion failed: "+e)}function _(t){var e=c["_"+t];return I(e,"Cannot call unknown function "+t+", make sure it is exported"),e}function M(t,e,n,r,s){var i={string:function(t){var e=0;if(null!=t&&0!==t){var n=1+(t.length<<2);V(t,e=un(n),n)}return e},array:function(t){var e=un(t.length);return W(t,e),e}},o=_(t),a=[],u=0;if(r)for(var c=0;c<r.length;c++){var l=i[n[c]];l?(0===u&&(u=an()),a[c]=l(r[c])):a[c]=r[c]}var h=o.apply(null,a);return h=function(t){return"string"===e?P(t):"boolean"===e?Boolean(t):t}(h),0!==u&&cn(u),h}function D(t,e,n,r){var s=(n=n||[]).every((function(t){return"number"===t}));return"string"!==e&&s&&!r?_(t):function(){return M(t,e,n,arguments)}}function L(t,e,n){for(var r=e+n,s="";!(e>=r);){var i=t[e++];if(!i)return s;if(128&i){var o=63&t[e++];if(192!=(224&i)){var a=63&t[e++];if((i=224==(240&i)?(15&i)<<12|o<<6|a:(7&i)<<18|o<<12|a<<6|63&t[e++])<65536)s+=String.fromCharCode(i);else{var u=i-65536;s+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else s+=String.fromCharCode((31&i)<<6|o)}else s+=String.fromCharCode(i)}return s}function P(t,e){return t?L(s(),t,e):""}function z(t,e,n,r){if(!(r>0))return 0;for(var s=n,i=n+r-1,o=0;o<t.length;++o){var a=t.charCodeAt(o);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),a<=127){if(n>=i)break;e[n++]=a}else if(a<=2047){if(n+1>=i)break;e[n++]=192|a>>6,e[n++]=128|63&a}else if(a<=65535){if(n+2>=i)break;e[n++]=224|a>>12,e[n++]=128|a>>6&63,e[n++]=128|63&a}else{if(n+3>=i)break;e[n++]=240|a>>18,e[n++]=128|a>>12&63,e[n++]=128|a>>6&63,e[n++]=128|63&a}}return e[n]=0,n-s}function V(t,e,n){return z(t,s(),e,n)}function B(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);r>=55296&&r<=57343&&(r=65536+((1023&r)<<10)|1023&t.charCodeAt(++n)),r<=127?++e:e+=r<=2047?2:r<=65535?3:4}return e}function W(t,n){e().set(t,n)}var U,G,j,H,q,X,K=65536;function J(t,e){return t%e>0&&(t+=e-t%e),t}function Y(t){U=t,c.HEAP8=G=new Int8Array(t),c.HEAP16=new Int16Array(t),c.HEAP32=H=new Int32Array(t),c.HEAPU8=j=new Uint8Array(t),c.HEAPU16=new Uint16Array(t),c.HEAPU32=q=new Uint32Array(t),c.HEAPF32=new Float32Array(t),c.HEAPF64=X=new Float64Array(t)}var Z=5256464,Q=12656,tt=c.INITIAL_MEMORY||16777216;if(b)E=c.wasmMemory,U=c.buffer;else if(c.wasmMemory)E=c.wasmMemory;else if(!((E=new WebAssembly.Memory({initial:tt/K,maximum:2147483648/K,shared:!0})).buffer instanceof SharedArrayBuffer))throw A("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),p&&console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"),Error("bad memory");function et(t){for(;t.length>0;){var e=t.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?c.dynCall_v(n):c.dynCall_vi(n,e.arg):n(void 0===e.arg?null:e.arg)}else e(c)}}E&&(U=E.buffer),tt=U.byteLength,Y(U),b||(i()[Q>>2]=Z);var nt=[],rt=[],st=[],it=[],ot=[];function at(){if(!b){if(c.preRun)for("function"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)ht(c.preRun.shift());et(nt)}}function ut(){et(rt)}function ct(){b||et(st)}function lt(){if(!b){if(c.postRun)for("function"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;)dt(c.postRun.shift());et(ot)}}function ht(t){nt.unshift(t)}function dt(t){ot.unshift(t)}var ft=Math.ceil,pt=Math.floor,mt=0,bt=null,yt=null;function gt(t){I(!b,"addRunDependency cannot be used in a pthread worker"),mt++,c.monitorRunDependencies&&c.monitorRunDependencies(mt)}function xt(t){if(mt--,c.monitorRunDependencies&&c.monitorRunDependencies(mt),0==mt&&(null!==bt&&(clearInterval(bt),bt=null),yt)){var e=yt;yt=null,e()}}function wt(t){throw c.onAbort&&c.onAbort(t),b&&console.error("Pthread aborting at "+(new Error).stack),S(t+=""),A(t),F=!0,t="abort("+t+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(t)}function vt(t,e){return String.prototype.startsWith?t.startsWith(e):0===t.indexOf(e)}c.preloadedImages={},c.preloadedAudios={};var kt="data:application/octet-stream;base64,";function $t(t){return vt(t,kt)}var Nt="file://";function Ct(t){return vt(t,Nt)}var Et="tfjs-backend-wasm-threaded-simd.wasm";function St(){try{if(N)return new Uint8Array(N);if(g)return g(Et);throw"both async and sync fetching of the wasm failed"}catch(t){wt(t)}}function At(){return N||!d&&!f||"function"!=typeof fetch||Ct(Et)?new Promise((function(t,e){t(St())})):fetch(Et,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at '"+Et+"'";return t.arrayBuffer()})).catch((function(){return St()}))}function Rt(){var t={a:je};function e(t,e){var n=t.exports;if(c.asm=n,R=e,!b){var r=Ut.unusedWorkers.length;Ut.unusedWorkers.forEach((function(t){Ut.loadWasmModuleToWorker(t,(function(){--r||xt()}))}))}}function n(t){e(t.instance,t.module)}function r(e){return At().then((function(e){return WebAssembly.instantiate(e,t)})).then(e,(function(t){A("failed to asynchronously prepare wasm: "+t),wt(t)}))}if(b||gt(),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(t){return A("Module.instantiateWasm callback failed with error: "+t),!1}return function(){if(N||"function"!=typeof WebAssembly.instantiateStreaming||$t(Et)||Ct(Et)||"function"!=typeof fetch)return r(n);fetch(Et,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,t).then(n,(function(t){A("wasm streaming compile failed: "+t),A("falling back to ArrayBuffer instantiation"),r(n)}))}))}(),{}}$t(Et)||(Et=k(Et));var Tt={};function Ot(){Ut.initRuntime()}b||rt.push({func:function(){Xe()}});var Ft=0,It=0,_t=0;function Mt(t,e,n){Ft=t|=0,_t=e|=0,It=n|=0}c.__register_pthread_ptr=Mt;var Dt={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135},Lt=13568;function Pt(t,n){if(t<=0||t>e().length||!0&t||n<0)return-28;if(0==n)return 0;n>=2147483647&&(n=1/0);var r=Atomics.load(i(),Lt>>2),s=0;if(r==t&&Atomics.compareExchange(i(),Lt>>2,r,0)==r&&(s=1,--n<=0))return 1;var o=Atomics.notify(i(),t>>2,n);if(o>=0)return o+s;throw"Atomics.notify returned an unexpected value "+o}function zt(t){if(b)throw"Internal Error! _kill_thread() can only ever be called from main application thread!";if(!t)throw"Internal Error! Null pthread_ptr in _kill_thread!";i()[t+12>>2]=0;var e=Ut.pthreads[t];e.worker.terminate(),Ut.freeThreadData(e),Ut.runningWorkers.splice(Ut.runningWorkers.indexOf(e.worker),1),e.worker.pthread=void 0}function Vt(t){if(b)throw"Internal Error! _cancel_thread() can only ever be called from main application thread!";if(!t)throw"Internal Error! Null pthread_ptr in _cancel_thread!";Ut.pthreads[t].worker.postMessage({cmd:"cancel"})}function Bt(t){if(b)throw"Internal Error! _cleanup_thread() can only ever be called from main application thread!";if(!t)throw"Internal Error! Null pthread_ptr in _cleanup_thread!";i()[t+12>>2]=0;var e=Ut.pthreads[t];if(e){var n=e.worker;Ut.returnWorkerToPool(n)}}c._emscripten_futex_wake=Pt;var Wt,Ut={MAIN_THREAD_ID:1,mainThreadInfo:{schedPolicy:0,schedPrio:0},unusedWorkers:[],runningWorkers:[],initRuntime:function(){Mt(Ut.mainThreadBlock,!f,1),nn(Ut.mainThreadBlock)},initMainThreadBlock:function(){for(var t=0;t<8;++t)Ut.allocateUnusedWorker();for(Ut.mainThreadBlock=12816,t=0;t<58;++t)o()[Ut.mainThreadBlock/4+t]=0;i()[Ut.mainThreadBlock+12>>2]=Ut.mainThreadBlock;var e=Ut.mainThreadBlock+156;for(i()[e>>2]=e,t=0;t<128;++t)o()[3264+t]=0;Atomics.store(o(),Ut.mainThreadBlock+104>>2,13056),Atomics.store(o(),Ut.mainThreadBlock+40>>2,Ut.mainThreadBlock),Atomics.store(o(),Ut.mainThreadBlock+44>>2,42)},initWorker:function(){},pthreads:{},exitHandlers:null,setThreadStatus:function(){},runExitHandlers:function(){if(null!==Ut.exitHandlers){for(;Ut.exitHandlers.length>0;)Ut.exitHandlers.pop()();Ut.exitHandlers=null}b&&O&&tn()},threadExit:function(t){var e=Ve();e&&(Atomics.store(o(),e+4>>2,t),Atomics.store(o(),e+0>>2,1),Atomics.store(o(),e+60>>2,1),Atomics.store(o(),e+64>>2,0),Ut.runExitHandlers(),Pt(e+0,2147483647),Mt(0,0,0),O=0,b&&postMessage({cmd:"exit"}))},threadCancel:function(){Ut.runExitHandlers(),Atomics.store(o(),O+4>>2,-1),Atomics.store(o(),O+0>>2,1),Pt(O+0,2147483647),O=0,Mt(0,0,0),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var t in Ut.pthreads)(r=Ut.pthreads[t])&&r.worker&&Ut.returnWorkerToPool(r.worker);Ut.pthreads={};for(var e=0;e<Ut.unusedWorkers.length;++e)(n=Ut.unusedWorkers[e]).terminate();for(Ut.unusedWorkers=[],e=0;e<Ut.runningWorkers.length;++e){var n,r=(n=Ut.runningWorkers[e]).pthread;Ut.freeThreadData(r),n.terminate()}Ut.runningWorkers=[]},freeThreadData:function(t){if(t){if(t.threadInfoStruct){var e=i()[t.threadInfoStruct+104>>2];i()[t.threadInfoStruct+104>>2]=0,Je(e),Je(t.threadInfoStruct)}t.threadInfoStruct=0,t.allocatedOwnStack&&t.stackBase&&Je(t.stackBase),t.stackBase=0,t.worker&&(t.worker.pthread=null)}},returnWorkerToPool:function(t){delete Ut.pthreads[t.pthread.thread],Ut.unusedWorkers.push(t),Ut.runningWorkers.splice(Ut.runningWorkers.indexOf(t),1),Ut.freeThreadData(t.pthread),t.pthread=void 0},receiveObjectTransfer:function(t){},loadWasmModuleToWorker:function(t,e){t.onmessage=function(n){var r=n.data,s=r.cmd;if(t.pthread&&(Ut.currentProxiedOperationCallerThread=t.pthread.threadInfoStruct),r.targetThread&&r.targetThread!=Ve()){var i=Ut.pthreads[r.targetThread];return i?i.worker.postMessage(n.data,r.transferList):console.error('Internal error! Worker sent a message "'+s+'" to target pthread '+r.targetThread+", but that thread no longer exists!"),void(Ut.currentProxiedOperationCallerThread=void 0)}"processQueuedMainThreadWork"===s?en():"spawnThread"===s?Pe(n.data):"cleanupThread"===s?Bt(r.thread):"killThread"===s?zt(r.thread):"cancelThread"===s?Vt(r.thread):"loaded"===s?(t.loaded=!0,e&&e(t),t.runPthread&&(t.runPthread(),delete t.runPthread)):"print"===s?S("Thread "+r.threadId+": "+r.text):"printErr"===s?A("Thread "+r.threadId+": "+r.text):"alert"===s?alert("Thread "+r.threadId+": "+r.text):"exit"===s?t.pthread&&Atomics.load(o(),t.pthread.thread+68>>2)&&Ut.returnWorkerToPool(t):"cancelDone"===s?Ut.returnWorkerToPool(t):"objectTransfer"===s?Ut.receiveObjectTransfer(n.data):"setimmediate"===n.data.target?t.postMessage(n.data):A("worker sent an unknown command "+s),Ut.currentProxiedOperationCallerThread=void 0},t.onerror=function(t){A("pthread sent an error! "+t.filename+":"+t.lineno+": "+t.message)},p&&(t.on("message",(function(e){t.onmessage({data:e})})),t.on("error",(function(e){t.onerror(e)})),t.on("exit",(function(t){console.log("worker exited - TODO: update the worker queue?")}))),t.postMessage({cmd:"load",urlOrBlob:c.mainScriptUrlOrBlob||r,wasmMemory:E,wasmModule:R,DYNAMIC_BASE:Z,DYNAMICTOP_PTR:Q})},allocateUnusedWorker:function(){var t=k("tfjs-backend-wasm-threaded-simd.worker.js");Ut.unusedWorkers.push(new Worker(t))},getNewWorker:function(){return 0==Ut.unusedWorkers.length&&(Ut.allocateUnusedWorker(),Ut.loadWasmModuleToWorker(Ut.unusedWorkers[0])),Ut.unusedWorkers.length>0?Ut.unusedWorkers.pop():null},busySpinWait:function(t){for(var e=performance.now()+t;performance.now()<e;);}};function Gt(t,e){cn(t)}function jt(){return C}function Ht(t,e,n,r){wt("Assertion failed: "+P(t)+", at: "+[e?P(e):"unknown filename",n,r?P(r):"unknown function"])}function qt(t,e){_main(t,e)}function Xt(t){return i()[Ye()>>2]=t,t}function Kt(t,e){if(b)return se(1,1,t,e);it.unshift({func:t,arg:e})}function Jt(t,e){if(t==e)postMessage({cmd:"processQueuedMainThreadWork"});else if(b)postMessage({targetThread:t,cmd:"processThreadQueue"});else{var n=Ut.pthreads[t],r=n&&n.worker;if(!r)return;r.postMessage({cmd:"processThreadQueue"})}return 1}function Yt(){wt()}function Zt(t,e){}function Qt(t,n,r){if(t<=0||t>e().length||!0&t)return-28;if(f){var s=Atomics.wait(i(),t>>2,n,r);if("timed-out"===s)return-73;if("not-equal"===s)return-6;if("ok"===s)return 0;throw"Atomics.wait returned an unexpected value "+s}if(n!=Atomics.load(i(),t>>2))return-6;var o=performance.now(),a=o+r;Atomics.store(i(),Lt>>2,t);for(var u=t;t==u;){if((o=performance.now())>a)return-73;en(),t=Atomics.load(i(),Lt>>2)}return 0}function te(){return 0|_t}function ee(){return 0|It}function ne(t,e,n){s().copyWithin(t,e,e+n)}function re(){return navigator.hardwareConcurrency}function se(t,e){for(var n=arguments.length-2,r=an(),s=un(8*n),i=s>>3,o=0;o<n;o++)a()[i+o]=arguments[2+o];var u=sn(t,n,s,e);return cn(r),u}c.establishStackSpace=Gt,c.getNoExitRuntime=jt,Wt=p?function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:b?function(){return performance.now()-c.__performance_now_clock_drift}:"undefined"!=typeof dateNow?dateNow:function(){return performance.now()};var ie=[];function oe(t,e){oe.array||(oe.array=[]);var n,r=oe.array;for(r.length=0;n=s()[t++];)100===n||102===n?(e=e+7&-8,r.push(a()[e>>3]),e+=8):(e=e+3&-4,r.push(i()[e>>2]),e+=4);return r}function ae(t,e,n){ie.length=e;for(var r=n>>3,s=0;s<e;s++)ie[s]=a()[r+s];var i=t<0,o=i?Tt[-t-1]:Ge[t];if(i){var u=oe(ie[1],ie[2]);return o.apply(null,u)}return o.apply(null,ie)}function ue(){return s().length}function ce(t){try{return E.grow(t-U.byteLength+65535>>>16),Y(E.buffer),1}catch(t){}}function le(t){t>>>=0;var e=ue();if(t<=e)return!1;var n=2147483648;if(t>n)return!1;for(var r=1;r<=4;r*=2){var s=e*(1+.2/r);if(s=Math.min(s,t+100663296),ce(Math.min(n,J(Math.max(16777216,t,s),65536))))return!0}return!1}var he={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:!1,removeAllEventListeners:function(){for(var t=he.eventHandlers.length-1;t>=0;--t)he._removeHandler(t);he.eventHandlers=[],he.deferredCalls=[]},registerRemoveEventListeners:function(){he.removeEventListenersRegistered||(it.push(he.removeAllEventListeners),he.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(t,e,n){function r(t,e){if(t.length!=e.length)return!1;for(var n in t)if(t[n]!=e[n])return!1;return!0}for(var s in he.deferredCalls){var i=he.deferredCalls[s];if(i.targetFunction==t&&r(i.argsList,n))return}he.deferredCalls.push({targetFunction:t,precedence:e,argsList:n}),he.deferredCalls.sort((function(t,e){return t.precedence<e.precedence}))},removeDeferredCalls:function(t){for(var e=0;e<he.deferredCalls.length;++e)he.deferredCalls[e].targetFunction==t&&(he.deferredCalls.splice(e,1),--e)},canPerformEventHandlerRequests:function(){return he.inEventHandler&&he.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(he.canPerformEventHandlerRequests())for(var t=0;t<he.deferredCalls.length;++t){var e=he.deferredCalls[t];he.deferredCalls.splice(t,1),--t,e.targetFunction.apply(null,e.argsList)}},inEventHandler:0,currentEventHandler:null,eventHandlers:[],removeAllHandlersOnTarget:function(t,e){for(var n=0;n<he.eventHandlers.length;++n)he.eventHandlers[n].target!=t||e&&e!=he.eventHandlers[n].eventTypeString||he._removeHandler(n--)},_removeHandler:function(t){var e=he.eventHandlers[t];e.target.removeEventListener(e.eventTypeString,e.eventListenerFunc,e.useCapture),he.eventHandlers.splice(t,1)},registerOrRemoveHandler:function(t){var e=function(e){++he.inEventHandler,he.currentEventHandler=t,he.runDeferredCalls(),t.handlerFunc(e),he.runDeferredCalls(),--he.inEventHandler};if(t.callbackfunc)t.eventListenerFunc=e,t.target.addEventListener(t.eventTypeString,e,t.useCapture),he.eventHandlers.push(t),he.registerRemoveEventListeners();else for(var n=0;n<he.eventHandlers.length;++n)he.eventHandlers[n].target==t.target&&he.eventHandlers[n].eventTypeString==t.eventTypeString&&he._removeHandler(n--)},queueEventHandlerOnThread_iiii:function(t,e,n,r,s){var o=an(),a=un(12);i()[a>>2]=n,i()[a+4>>2]=r,i()[a+8>>2]=s,on(t,637534208,e,r,a),cn(o)},getTargetThreadForEventCallback:function(t){switch(t){case 1:return 0;case 2:return Ut.currentProxiedOperationCallerThread;default:return t}},getNodeNameForTarget:function(t){return t?t==window?"#window":t==screen?"#screen":t&&t.nodeName?t.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};function de(t){var e=B(t)+1,n=Ke(e);return V(t,n,e),n}function fe(t,e,n,r){var s=an(),o=un(12),a=0;e&&(a=de(e)),i()[o>>2]=a,i()[o+4>>2]=n,i()[o+8>>2]=r,on(t,657457152,0,a,o),cn(s)}function pe(t,e,n,r){fe(t,e=e?P(e):"",n,r)}function me(t){return t>2?P(t):t}var be=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function ye(t){return t=me(t),be[t]||("undefined"!=typeof document?document.querySelector(t):void 0)}function ge(t){return ye(t)}function xe(t,e,n){var r=ge(t);if(!r)return-4;if(r.canvasSharedPtr&&(i()[r.canvasSharedPtr>>2]=e,i()[r.canvasSharedPtr+4>>2]=n),!r.offscreenCanvas&&r.controlTransferredOffscreen)return r.canvasSharedPtr?(pe(i()[r.canvasSharedPtr+8>>2],t,e,n),1):-4;r.offscreenCanvas&&(r=r.offscreenCanvas);var s=!1;if(r.GLctxObject&&r.GLctxObject.GLctx){var o=r.GLctxObject.GLctx.getParameter(2978);s=0===o[0]&&0===o[1]&&o[2]===r.width&&o[3]===r.height}return r.width=e,r.height=n,s&&r.GLctxObject.GLctx.viewport(0,0,e,n),0}function we(t,e,n){return b?se(2,1,t,e,n):xe(t,e,n)}function ve(t,e,n){return ge(t)?xe(t,e,n):we(t,e,n)}function ke(t){}function $e(t,e){}function Ne(t){var e=t.getExtension("ANGLE_instanced_arrays");if(e)return t.vertexAttribDivisor=function(t,n){e.vertexAttribDivisorANGLE(t,n)},t.drawArraysInstanced=function(t,n,r,s){e.drawArraysInstancedANGLE(t,n,r,s)},t.drawElementsInstanced=function(t,n,r,s,i){e.drawElementsInstancedANGLE(t,n,r,s,i)},1}function Ce(t){var e=t.getExtension("OES_vertex_array_object");if(e)return t.createVertexArray=function(){return e.createVertexArrayOES()},t.deleteVertexArray=function(t){e.deleteVertexArrayOES(t)},t.bindVertexArray=function(t){e.bindVertexArrayOES(t)},t.isVertexArray=function(t){return e.isVertexArrayOES(t)},1}function Ee(t){var e=t.getExtension("WEBGL_draw_buffers");if(e)return t.drawBuffers=function(t,n){e.drawBuffersWEBGL(t,n)},1}var Se={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function(){for(var t=new Float32Array(Se.MINI_TEMP_BUFFER_SIZE),e=0;e<Se.MINI_TEMP_BUFFER_SIZE;e++)Se.miniTempBufferFloatViews[e]=t.subarray(0,e+1);var n=new Int32Array(Se.MINI_TEMP_BUFFER_SIZE);for(e=0;e<Se.MINI_TEMP_BUFFER_SIZE;e++)Se.miniTempBufferIntViews[e]=n.subarray(0,e+1)},recordError:function(t){Se.lastError||(Se.lastError=t)},getNewId:function(t){for(var e=Se.counter++,n=t.length;n<e;n++)t[n]=null;return e},MINI_TEMP_BUFFER_SIZE:256,miniTempBufferFloatViews:[0],miniTempBufferIntViews:[0],getSource:function(t,e,n,r){for(var s="",o=0;o<e;++o){var a=r?i()[r+4*o>>2]:-1;s+=P(i()[n+4*o>>2],a<0?void 0:a)}return s},createContext:function(t,e){var n=t.getContext("webgl",e);return n?Se.registerContext(n,e):0},registerContext:function(t,e){var n=Ke(8);i()[n+4>>2]=Ve();var r={handle:n,attributes:e,version:e.majorVersion,GLctx:t};return t.canvas&&(t.canvas.GLctxObject=r),Se.contexts[n]=r,(void 0===e.enableExtensionsByDefault||e.enableExtensionsByDefault)&&Se.initExtensions(r),n},makeContextCurrent:function(t){return Se.currentContext=Se.contexts[t],c.ctx=Oe=Se.currentContext&&Se.currentContext.GLctx,!(t&&!Oe)},getContext:function(t){return Se.contexts[t]},deleteContext:function(t){Se.currentContext===Se.contexts[t]&&(Se.currentContext=null),"object"==typeof he&&he.removeAllHandlersOnTarget(Se.contexts[t].GLctx.canvas),Se.contexts[t]&&Se.contexts[t].GLctx.canvas&&(Se.contexts[t].GLctx.canvas.GLctxObject=void 0),Je(Se.contexts[t].handle),Se.contexts[t]=null},initExtensions:function(t){if(t||(t=Se.currentContext),!t.initExtensionsDone){t.initExtensionsDone=!0;var e=t.GLctx;Ne(e),Ce(e),Ee(e),e.disjointTimerQueryExt=e.getExtension("EXT_disjoint_timer_query");var n=["OES_texture_float","OES_texture_half_float","OES_standard_derivatives","OES_vertex_array_object","WEBGL_compressed_texture_s3tc","WEBGL_depth_texture","OES_element_index_uint","EXT_texture_filter_anisotropic","EXT_frag_depth","WEBGL_draw_buffers","ANGLE_instanced_arrays","OES_texture_float_linear","OES_texture_half_float_linear","EXT_blend_minmax","EXT_shader_texture_lod","EXT_texture_norm16","WEBGL_compressed_texture_pvrtc","EXT_color_buffer_half_float","WEBGL_color_buffer_float","EXT_sRGB","WEBGL_compressed_texture_etc1","EXT_disjoint_timer_query","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_astc","EXT_color_buffer_float","WEBGL_compressed_texture_s3tc_srgb","EXT_disjoint_timer_query_webgl2","WEBKIT_WEBGL_compressed_texture_pvrtc"];(e.getSupportedExtensions()||[]).forEach((function(t){-1!=n.indexOf(t)&&e.getExtension(t)}))}},populateUniformTable:function(t){for(var e=Se.programs[t],n=Se.programInfos[t]={uniforms:{},maxUniformLength:0,maxAttributeLength:-1,maxUniformBlockNameLength:-1},r=n.uniforms,s=Oe.getProgramParameter(e,35718),i=0;i<s;++i){var o=Oe.getActiveUniform(e,i),a=o.name;n.maxUniformLength=Math.max(n.maxUniformLength,a.length+1),"]"==a.slice(-1)&&(a=a.slice(0,a.lastIndexOf("[")));var u=Oe.getUniformLocation(e,a);if(u){var c=Se.getNewId(Se.uniforms);r[a]=[o.size,c],Se.uniforms[c]=u;for(var l=1;l<o.size;++l){var h=a+"["+l+"]";u=Oe.getUniformLocation(e,h),c=Se.getNewId(Se.uniforms),Se.uniforms[c]=u}}}}},Ae=["default","low-power","high-performance"];function Re(t,e){var n={},r=e>>2;n.alpha=!!i()[r+0],n.depth=!!i()[r+1],n.stencil=!!i()[r+2],n.antialias=!!i()[r+3],n.premultipliedAlpha=!!i()[r+4],n.preserveDrawingBuffer=!!i()[r+5];var s=i()[r+6];n.powerPreference=Ae[s],n.failIfMajorPerformanceCaveat=!!i()[r+7],n.majorVersion=i()[r+8],n.minorVersion=i()[r+9],n.enableExtensionsByDefault=i()[r+10],n.explicitSwapControl=i()[r+11],n.proxyContextToMainThread=i()[r+12],n.renderViaOffscreenBackBuffer=i()[r+13];var o=ge(t);return o?n.explicitSwapControl?-1:Se.createContext(o,n):-4}function Te(t,e){return Re(t,e)}var Oe,Fe={mappings:{},buffers:[null,[],[]],printChar:function(t,e){var n=Fe.buffers[t];0===e||10===e?((1===t?S:A)(L(n,0)),n.length=0):n.push(e)},varargs:void 0,get:function(){return Fe.varargs+=4,i()[Fe.varargs-4>>2]},getStr:function(t){return P(t)},get64:function(t,e){return t}};function Ie(t){return b?se(3,1,t):0}function _e(t,e,n,r,s){if(b)return se(4,1,t,e,n,r,s)}function Me(t,e,n,r){if(b)return se(5,1,t,e,n,r);for(var o=0,a=0;a<n;a++){for(var u=i()[e+8*a>>2],c=i()[e+(8*a+4)>>2],l=0;l<c;l++)Fe.printChar(t,s()[u+l]);o+=c}return i()[r>>2]=o,0}function De(t){var e=Ut.exitHandlers.pop();t&&e()}function Le(t,e){null===Ut.exitHandlers&&(Ut.exitHandlers=[]),Ut.exitHandlers.push((function(){ln(t,e)}))}function Pe(t){if(b)throw"Internal Error! _spawn_thread() can only ever be called from main application thread!";var e=Ut.getNewWorker();if(void 0!==e.pthread)throw"Internal error!";if(!t.pthread_ptr)throw"Internal error, no pthread ptr!";Ut.runningWorkers.push(e);for(var n=Ke(512),r=0;r<128;++r)i()[n+4*r>>2]=0;var s=t.stackBase+t.stackSize,a=Ut.pthreads[t.pthread_ptr]={worker:e,stackBase:t.stackBase,stackSize:t.stackSize,allocatedOwnStack:t.allocatedOwnStack,thread:t.pthread_ptr,threadInfoStruct:t.pthread_ptr},u=a.threadInfoStruct>>2;Atomics.store(o(),u+0,0),Atomics.store(o(),u+1,0),Atomics.store(o(),u+2,0),Atomics.store(o(),u+17,t.detached),Atomics.store(o(),u+26,n),Atomics.store(o(),u+12,0),Atomics.store(o(),u+10,a.threadInfoStruct),Atomics.store(o(),u+11,42),Atomics.store(o(),u+27,t.stackSize),Atomics.store(o(),u+21,t.stackSize),Atomics.store(o(),u+20,s),Atomics.store(o(),u+29,s),Atomics.store(o(),u+30,t.detached),Atomics.store(o(),u+32,t.schedPolicy),Atomics.store(o(),u+33,t.schedPrio);var c=Ze()+40;Atomics.store(o(),u+44,c),e.pthread=a;var l={cmd:"run",start_routine:t.startRoutine,arg:t.arg,threadInfoStruct:t.pthread_ptr,selfThreadId:t.pthread_ptr,parentThreadId:t.parent_pthread_ptr,stackBase:t.stackBase,stackSize:t.stackSize};e.runPthread=function(){l.time=performance.now(),e.postMessage(l,t.transferList)},e.loaded&&(e.runPthread(),delete e.runPthread)}function ze(t,e,n){if(!e&&!n)return Dt.EINVAL;if(!t)return A("pthread_getschedparam called with a null thread pointer!"),Dt.ESRCH;if(i()[t+12>>2]!==t)return A("pthread_getschedparam attempted on thread "+t+", which does not point to a valid thread, or does not exist anymore!"),Dt.ESRCH;var r=Atomics.load(o(),t+108+20>>2),s=Atomics.load(o(),t+108+24>>2);return e&&(i()[e>>2]=r),n&&(i()[n>>2]=s),0}function Ve(){return 0|Ft}function Be(t,e,n,r){if("undefined"==typeof SharedArrayBuffer)return A("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!t)return A("pthread_create called with a null thread pointer!"),28;var s=[];if(b&&0===s.length)return rn(687865856,t,e,n,r);var a=0,u=0,c=0,l=0,h=0;if(e)if(a=i()[e>>2],a+=81920,u=i()[e+8>>2],c=0!==i()[e+12>>2],0===i()[e+16>>2]){var d=i()[e+20>>2],f=i()[e+24>>2];ze(Ut.currentProxiedOperationCallerThread?Ut.currentProxiedOperationCallerThread:Ve(),e+20,e+24),l=i()[e+20>>2],h=i()[e+24>>2],i()[e+20>>2]=d,i()[e+24>>2]=f}else l=i()[e+20>>2],h=i()[e+24>>2];else a=2097152;var p=0==u;p?u=Qe(16,a):I((u-=a)>0);for(var m=Ke(232),y=0;y<58;++y)o()[(m>>2)+y]=0;i()[t>>2]=m,i()[m+12>>2]=m;var g=m+156;i()[g>>2]=g;var x={stackBase:u,stackSize:a,allocatedOwnStack:p,schedPolicy:l,schedPrio:h,detached:c,startRoutine:n,pthread_ptr:m,parent_pthread_ptr:Ve(),arg:r,transferList:s};return b?(x.cmd="spawnThread",postMessage(x,s)):Pe(x),0}function We(t){return(t=+t)>=0?+pt(t+.5):+ft(t-.5)}function Ue(t){if(b)return se(6,1,t);switch(t){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:case 79:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"==typeof navigator&&navigator.hardwareConcurrency||1}return Xt(28),-1}c._pthread_self=Ve,b?Ut.initWorker():Ut.initMainThreadBlock(),Se.init();var Ge=[null,Kt,we,Ie,_e,Me,Ue],je={e:Ht,r:qt,w:Jt,a:Yt,l:Zt,d:Qt,c:Pt,h:Wt,g:te,x:ee,q:ne,B:re,t:ae,A:le,u:ve,k:ke,s:$e,v:Te,m:Ie,o:_e,i:Me,p:Ot,memory:E||c.wasmMemory,y:De,z:Le,j:Be,b:Ve,f:We,n:Ue,table:T},He=Rt();c.asm=He;var qe,Xe=c.___wasm_call_ctors=function(){return(Xe=c.___wasm_call_ctors=c.asm.C).apply(null,arguments)},Ke=(c._init=function(){return(c._init=c.asm.D).apply(null,arguments)},c._register_tensor=function(){return(c._register_tensor=c.asm.E).apply(null,arguments)},c._dispose_data=function(){return(c._dispose_data=c.asm.F).apply(null,arguments)},c._dispose=function(){return(c._dispose=c.asm.G).apply(null,arguments)},c._Abs=function(){return(c._Abs=c.asm.H).apply(null,arguments)},c._Add=function(){return(c._Add=c.asm.I).apply(null,arguments)},c._AddN=function(){return(c._AddN=c.asm.J).apply(null,arguments)},c._ArgMax=function(){return(c._ArgMax=c.asm.K).apply(null,arguments)},c._AvgPool=function(){return(c._AvgPool=c.asm.L).apply(null,arguments)},c._BatchMatMul=function(){return(c._BatchMatMul=c.asm.M).apply(null,arguments)},c._ClipByValue=function(){return(c._ClipByValue=c.asm.N).apply(null,arguments)},c._Conv2D=function(){return(c._Conv2D=c.asm.O).apply(null,arguments)},c._Conv2DBackpropInput=function(){return(c._Conv2DBackpropInput=c.asm.P).apply(null,arguments)},c._Cos=function(){return(c._Cos=c.asm.Q).apply(null,arguments)},c._CropAndResize=function(){return(c._CropAndResize=c.asm.R).apply(null,arguments)},c._Cumsum=function(){return(c._Cumsum=c.asm.S).apply(null,arguments)},c._DepthToSpace=function(){return(c._DepthToSpace=c.asm.T).apply(null,arguments)},c._DepthwiseConv2dNative=function(){return(c._DepthwiseConv2dNative=c.asm.U).apply(null,arguments)},c._Equal=function(){return(c._Equal=c.asm.V).apply(null,arguments)},c._Exp=function(){return(c._Exp=c.asm.W).apply(null,arguments)},c._FlipLeftRight=function(){return(c._FlipLeftRight=c.asm.X).apply(null,arguments)},c._Floor=function(){return(c._Floor=c.asm.Y).apply(null,arguments)},c._FloorDiv=function(){return(c._FloorDiv=c.asm.Z).apply(null,arguments)},c._FusedBatchNorm=function(){return(c._FusedBatchNorm=c.asm._).apply(null,arguments)},c._FusedConv2D=function(){return(c._FusedConv2D=c.asm.$).apply(null,arguments)},c._FusedDepthwiseConv2D=function(){return(c._FusedDepthwiseConv2D=c.asm.aa).apply(null,arguments)},c._Gather=function(){return(c._Gather=c.asm.ba).apply(null,arguments)},c._GatherNd=function(){return(c._GatherNd=c.asm.ca).apply(null,arguments)},c._Greater=function(){return(c._Greater=c.asm.da).apply(null,arguments)},c._GreaterEqual=function(){return(c._GreaterEqual=c.asm.ea).apply(null,arguments)},c._LeakyRelu=function(){return(c._LeakyRelu=c.asm.fa).apply(null,arguments)},c._Less=function(){return(c._Less=c.asm.ga).apply(null,arguments)},c._LessEqual=function(){return(c._LessEqual=c.asm.ha).apply(null,arguments)},c._Log=function(){return(c._Log=c.asm.ia).apply(null,arguments)},c._LogicalAnd=function(){return(c._LogicalAnd=c.asm.ja).apply(null,arguments)},c._Max=function(){return(c._Max=c.asm.ka).apply(null,arguments)},c._MaxPool=function(){return(c._MaxPool=c.asm.la).apply(null,arguments)},c._Maximum=function(){return(c._Maximum=c.asm.ma).apply(null,arguments)},c._Mean=function(){return(c._Mean=c.asm.na).apply(null,arguments)},c._Min=function(){return(c._Min=c.asm.oa).apply(null,arguments)},c._Minimum=function(){return(c._Minimum=c.asm.pa).apply(null,arguments)},c._Multiply=function(){return(c._Multiply=c.asm.qa).apply(null,arguments)},c._Neg=function(){return(c._Neg=c.asm.ra).apply(null,arguments)},c._NonMaxSuppressionV3=function(){return(c._NonMaxSuppressionV3=c.asm.sa).apply(null,arguments)},c._NonMaxSuppressionV4=function(){return(c._NonMaxSuppressionV4=c.asm.ta).apply(null,arguments)},c._NonMaxSuppressionV5=function(){return(c._NonMaxSuppressionV5=c.asm.ua).apply(null,arguments)},c._NotEqual=function(){return(c._NotEqual=c.asm.va).apply(null,arguments)},c._OneHot=function(){return(c._OneHot=c.asm.wa).apply(null,arguments)},c._PadV2=function(){return(c._PadV2=c.asm.xa).apply(null,arguments)},c._Pow=function(){return(c._Pow=c.asm.ya).apply(null,arguments)},c._Prelu=function(){return(c._Prelu=c.asm.za).apply(null,arguments)},c._Prod=function(){return(c._Prod=c.asm.Aa).apply(null,arguments)},c._RealDiv=function(){return(c._RealDiv=c.asm.Ba).apply(null,arguments)},c._Relu=function(){return(c._Relu=c.asm.Ca).apply(null,arguments)},c._Relu6=function(){return(c._Relu6=c.asm.Da).apply(null,arguments)},c._ResizeBilinear=function(){return(c._ResizeBilinear=c.asm.Ea).apply(null,arguments)},c._Reverse=function(){return(c._Reverse=c.asm.Fa).apply(null,arguments)},c._RotateWithOffset=function(){return(c._RotateWithOffset=c.asm.Ga).apply(null,arguments)},c._Round=function(){return(c._Round=c.asm.Ha).apply(null,arguments)},c._Rsqrt=function(){return(c._Rsqrt=c.asm.Ia).apply(null,arguments)},c._ScatterNd=function(){return(c._ScatterNd=c.asm.Ja).apply(null,arguments)},c._SelectV2=function(){return(c._SelectV2=c.asm.Ka).apply(null,arguments)},c._Sigmoid=function(){return(c._Sigmoid=c.asm.La).apply(null,arguments)},c._Sin=function(){return(c._Sin=c.asm.Ma).apply(null,arguments)},c._Softmax=function(){return(c._Softmax=c.asm.Na).apply(null,arguments)},c._Sqrt=function(){return(c._Sqrt=c.asm.Oa).apply(null,arguments)},c._Square=function(){return(c._Square=c.asm.Pa).apply(null,arguments)},c._SquaredDifference=function(){return(c._SquaredDifference=c.asm.Qa).apply(null,arguments)},c._Step=function(){return(c._Step=c.asm.Ra).apply(null,arguments)},c._StridedSlice=function(){return(c._StridedSlice=c.asm.Sa).apply(null,arguments)},c._Sub=function(){return(c._Sub=c.asm.Ta).apply(null,arguments)},c._Sum=function(){return(c._Sum=c.asm.Ua).apply(null,arguments)},c._Tanh=function(){return(c._Tanh=c.asm.Va).apply(null,arguments)},c._Tile=function(){return(c._Tile=c.asm.Wa).apply(null,arguments)},c._TopK=function(){return(c._TopK=c.asm.Xa).apply(null,arguments)},c._Transpose=function(){return(c._Transpose=c.asm.Ya).apply(null,arguments)},c.__FusedMatMul=function(){return(c.__FusedMatMul=c.asm.Za).apply(null,arguments)},c._malloc=function(){return(Ke=c._malloc=c.asm._a).apply(null,arguments)}),Je=c._free=function(){return(Je=c._free=c.asm.$a).apply(null,arguments)},Ye=c.___errno_location=function(){return(Ye=c.___errno_location=c.asm.ab).apply(null,arguments)},Ze=c._emscripten_get_global_libc=function(){return(Ze=c._emscripten_get_global_libc=c.asm.bb).apply(null,arguments)},Qe=(c.___em_js__initPthreadsJS=function(){return(c.___em_js__initPthreadsJS=c.asm.cb).apply(null,arguments)},c._memalign=function(){return(Qe=c._memalign=c.asm.db).apply(null,arguments)}),tn=c.___pthread_tsd_run_dtors=function(){return(tn=c.___pthread_tsd_run_dtors=c.asm.eb).apply(null,arguments)},en=c._emscripten_main_thread_process_queued_calls=function(){return(en=c._emscripten_main_thread_process_queued_calls=c.asm.fb).apply(null,arguments)},nn=(c._emscripten_current_thread_process_queued_calls=function(){return(c._emscripten_current_thread_process_queued_calls=c.asm.gb).apply(null,arguments)},c._emscripten_register_main_browser_thread_id=function(){return(nn=c._emscripten_register_main_browser_thread_id=c.asm.hb).apply(null,arguments)}),rn=(c._emscripten_main_browser_thread_id=function(){return(c._emscripten_main_browser_thread_id=c.asm.ib).apply(null,arguments)},c._emscripten_async_run_in_main_thread=function(){return(c._emscripten_async_run_in_main_thread=c.asm.jb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread=function(){return(c._emscripten_sync_run_in_main_thread=c.asm.kb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_0=function(){return(c._emscripten_sync_run_in_main_thread_0=c.asm.lb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_1=function(){return(c._emscripten_sync_run_in_main_thread_1=c.asm.mb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_2=function(){return(c._emscripten_sync_run_in_main_thread_2=c.asm.nb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_xprintf_varargs=function(){return(c._emscripten_sync_run_in_main_thread_xprintf_varargs=c.asm.ob).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_3=function(){return(c._emscripten_sync_run_in_main_thread_3=c.asm.pb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_4=function(){return(rn=c._emscripten_sync_run_in_main_thread_4=c.asm.qb).apply(null,arguments)}),sn=(c._emscripten_sync_run_in_main_thread_5=function(){return(c._emscripten_sync_run_in_main_thread_5=c.asm.rb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_6=function(){return(c._emscripten_sync_run_in_main_thread_6=c.asm.sb).apply(null,arguments)},c._emscripten_sync_run_in_main_thread_7=function(){return(c._emscripten_sync_run_in_main_thread_7=c.asm.tb).apply(null,arguments)},c._emscripten_run_in_main_runtime_thread_js=function(){return(sn=c._emscripten_run_in_main_runtime_thread_js=c.asm.ub).apply(null,arguments)}),on=c._emscripten_async_queue_on_thread_=function(){return(on=c._emscripten_async_queue_on_thread_=c.asm.vb).apply(null,arguments)},an=(c._emscripten_tls_init=function(){return(c._emscripten_tls_init=c.asm.wb).apply(null,arguments)},c.stackSave=function(){return(an=c.stackSave=c.asm.xb).apply(null,arguments)}),un=c.stackAlloc=function(){return(un=c.stackAlloc=c.asm.yb).apply(null,arguments)},cn=c.stackRestore=function(){return(cn=c.stackRestore=c.asm.zb).apply(null,arguments)},ln=c.dynCall_vi=function(){return(ln=c.dynCall_vi=c.asm.Ab).apply(null,arguments)};function hn(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function dn(t){function e(){qe||(qe=!0,c.calledRun=!0,F||(ut(),ct(),c.onRuntimeInitialized&&c.onRuntimeInitialized(),lt()))}t=t||h,mt>0||(at(),mt>0||(c.setStatus?(c.setStatus("Running..."),setTimeout((function(){setTimeout((function(){c.setStatus("")}),1),e()}),1)):e()))}if(c.dynCall_v=function(){return(c.dynCall_v=c.asm.Bb).apply(null,arguments)},c.dynCall_ii=function(){return(c.dynCall_ii=c.asm.Cb).apply(null,arguments)},c.asm=He,c.cwrap=D,c.PThread=Ut,c.PThread=Ut,c._pthread_self=Ve,c.wasmMemory=E,c.ExitStatus=hn,c.then=function(t){if(qe)t(c);else{var e=c.onRuntimeInitialized;c.onRuntimeInitialized=function(){e&&e(),t(c)}}return c},yt=function t(){qe||dn(),qe||(yt=t)},c.run=dn,c.preInit)for("function"==typeof c.preInit&&(c.preInit=[c.preInit]);c.preInit.length>0;)c.preInit.pop()();return b||(C=!0),b||dn(),t});t.exports=s},234:(t,e,n)=>{var r,s=(r=(r="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,s=void 0!==(t=t||{})?t:{},i={};for(e in s)s.hasOwnProperty(e)&&(i[e]=s[e]);var o=[],a=function(t,e){throw e},u=!1,c=!1,l=!1,h=!1;u="object"==typeof window,c="function"==typeof importScripts,l="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,h=!u&&!l&&!c;var d,f,p,m,b="";function y(t){return s.locateFile?s.locateFile(t,b):b+t}l?(b=c?n(386).dirname(b)+"/":"//",d=function(t,e){return p||(p=n(993)),m||(m=n(386)),t=m.normalize(t),p.readFileSync(t,e?null:"utf8")},f=function(t){var e=d(t,!0);return e.buffer||(e=new Uint8Array(e)),N(e.buffer),e},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),o=process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof St))throw t})),process.on("unhandledRejection",rt),a=function(t){process.exit(t)},s.inspect=function(){return"[Emscripten Module object]"}):h?("undefined"!=typeof read&&(d=function(t){return read(t)}),f=function(t){var e;return"function"==typeof readbuffer?new Uint8Array(readbuffer(t)):(N("object"==typeof(e=read(t,"binary"))),e)},"undefined"!=typeof scriptArgs?o=scriptArgs:void 0!==arguments&&(o=arguments),"function"==typeof quit&&(a=function(t){quit(t)}),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(u||c)&&(c?b=self.location.href:document.currentScript&&(b=document.currentScript.src),r&&(b=r),b=0!==b.indexOf("blob:")?b.substr(0,b.lastIndexOf("/")+1):"",d=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},c&&(f=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}));var g,x,w,v=s.print||console.log.bind(console),k=s.printErr||console.warn.bind(console);for(e in i)i.hasOwnProperty(e)&&(s[e]=i[e]);i=null,s.arguments&&(o=s.arguments),s.thisProgram&&s.thisProgram,s.quit&&(a=s.quit),s.wasmBinary&&(g=s.wasmBinary),s.noExitRuntime&&(x=s.noExitRuntime),"object"!=typeof WebAssembly&&k("no native wasm support detected"),new WebAssembly.Table({initial:151,maximum:151,element:"anyfunc"});var $=!1;function N(t,e){t||rt("Assertion failed: "+e)}function C(t){var e=s["_"+t];return N(e,"Cannot call unknown function "+t+", make sure it is exported"),e}function E(t,e,n,r,s){var i={string:function(t){var e=0;if(null!=t&&0!==t){var n=1+(t.length<<2);M(t,e=Ct(n),n)}return e},array:function(t){var e=Ct(t.length);return D(t,e),e}},o=C(t),a=[],u=0;if(r)for(var c=0;c<r.length;c++){var l=i[n[c]];l?(0===u&&(u=Nt()),a[c]=l(r[c])):a[c]=r[c]}var h=o.apply(null,a);return h=function(t){return"string"===e?I(t):"boolean"===e?Boolean(t):t}(h),0!==u&&Et(u),h}function S(t,e,n,r){var s=(n=n||[]).every((function(t){return"number"===t}));return"string"!==e&&s&&!r?C(t):function(){return E(t,e,n,arguments)}}var A,R,T,O="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function F(t,e,n){for(var r=e+n,s=e;t[s]&&!(s>=r);)++s;if(s-e>16&&t.subarray&&O)return O.decode(t.subarray(e,s));for(var i="";e<s;){var o=t[e++];if(128&o){var a=63&t[e++];if(192!=(224&o)){var u=63&t[e++];if((o=224==(240&o)?(15&o)<<12|a<<6|u:(7&o)<<18|a<<12|u<<6|63&t[e++])<65536)i+=String.fromCharCode(o);else{var c=o-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&o)<<6|a)}else i+=String.fromCharCode(o)}return i}function I(t,e){return t?F(R,t,e):""}function _(t,e,n,r){if(!(r>0))return 0;for(var s=n,i=n+r-1,o=0;o<t.length;++o){var a=t.charCodeAt(o);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),a<=127){if(n>=i)break;e[n++]=a}else if(a<=2047){if(n+1>=i)break;e[n++]=192|a>>6,e[n++]=128|63&a}else if(a<=65535){if(n+2>=i)break;e[n++]=224|a>>12,e[n++]=128|a>>6&63,e[n++]=128|63&a}else{if(n+3>=i)break;e[n++]=240|a>>18,e[n++]=128|a>>12&63,e[n++]=128|a>>6&63,e[n++]=128|63&a}}return e[n]=0,n-s}function M(t,e,n){return _(t,R,e,n)}function D(t,e){A.set(t,e)}function L(t){s.HEAP8=A=new Int8Array(t),s.HEAP16=new Int16Array(t),s.HEAP32=T=new Int32Array(t),s.HEAPU8=R=new Uint8Array(t),s.HEAPU16=new Uint16Array(t),s.HEAPU32=new Uint32Array(t),s.HEAPF32=new Float32Array(t),s.HEAPF64=new Float64Array(t)}function P(t){for(;t.length>0;){var e=t.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?s.dynCall_v(n):s.dynCall_vi(n,e.arg):n(void 0===e.arg?null:e.arg)}else e(s)}}s.INITIAL_MEMORY;var z=[],V=[],B=[],W=[];function U(){if(s.preRun)for("function"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)X(s.preRun.shift());P(z)}function G(){P(V)}function j(){P(B)}function H(){}function q(){if(s.postRun)for("function"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;)K(s.postRun.shift());P(W)}function X(t){z.unshift(t)}function K(t){W.unshift(t)}var J=Math.ceil,Y=Math.floor,Z=0,Q=null,tt=null;function et(t){Z++,s.monitorRunDependencies&&s.monitorRunDependencies(Z)}function nt(t){if(Z--,s.monitorRunDependencies&&s.monitorRunDependencies(Z),0==Z&&(null!==Q&&(clearInterval(Q),Q=null),tt)){var e=tt;tt=null,e()}}function rt(t){throw s.onAbort&&s.onAbort(t),v(t+=""),k(t),$=!0,t="abort("+t+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(t)}function st(t,e){return String.prototype.startsWith?t.startsWith(e):0===t.indexOf(e)}s.preloadedImages={},s.preloadedAudios={};var it="data:application/octet-stream;base64,";function ot(t){return st(t,it)}var at="file://";function ut(t){return st(t,at)}var ct="tfjs-backend-wasm.wasm";function lt(){try{if(g)return new Uint8Array(g);if(f)return f(ct);throw"both async and sync fetching of the wasm failed"}catch(t){rt(t)}}function ht(){return g||!u&&!c||"function"!=typeof fetch||ut(ct)?new Promise((function(t,e){t(lt())})):fetch(ct,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at '"+ct+"'";return t.arrayBuffer()})).catch((function(){return lt()}))}function dt(){var t={env:vt,wasi_snapshot_preview1:vt};function e(t,e){var n=t.exports;s.asm=n,L((w=n.memory).buffer),nt()}function n(t){e(t.instance)}function r(e){return ht().then((function(e){return WebAssembly.instantiate(e,t)})).then(e,(function(t){k("failed to asynchronously prepare wasm: "+t),rt(t)}))}if(et(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(t){return k("Module.instantiateWasm callback failed with error: "+t),!1}return function(){if(g||"function"!=typeof WebAssembly.instantiateStreaming||ot(ct)||ut(ct)||"function"!=typeof fetch)return r(n);fetch(ct,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,t).then(n,(function(t){k("wasm streaming compile failed: "+t),k("falling back to ArrayBuffer instantiation"),r(n)}))}))}(),{}}function ft(t){L(w.buffer)}ot(ct)||(ct=y(ct)),V.push();var pt={mappings:{},buffers:[null,[],[]],printChar:function(t,e){var n=pt.buffers[t];0===e||10===e?((1===t?v:k)(F(n,0)),n.length=0):n.push(e)},varargs:void 0,get:function(){return pt.varargs+=4,T[pt.varargs-4>>2]},getStr:function(t){return I(t)},get64:function(t,e){return t}};function mt(t){return 0}function bt(t,e,n,r,s){}function yt(t,e,n,r){for(var s=0,i=0;i<n;i++){for(var o=T[e+8*i>>2],a=T[e+(8*i+4)>>2],u=0;u<a;u++)pt.printChar(t,R[o+u]);s+=a}return T[r>>2]=s,0}function gt(t){Tt(t)}function xt(t){gt(t)}function wt(t){return(t=+t)>=0?+Y(t+.5):+J(t-.5)}var vt={emscripten_notify_memory_growth:ft,fd_close:mt,fd_seek:bt,fd_write:yt,proc_exit:xt,roundf:wt},kt=dt();s.asm=kt,s._init=function(){return(s._init=s.asm.init).apply(null,arguments)},s._register_tensor=function(){return(s._register_tensor=s.asm.register_tensor).apply(null,arguments)},s._dispose_data=function(){return(s._dispose_data=s.asm.dispose_data).apply(null,arguments)},s._dispose=function(){return(s._dispose=s.asm.dispose).apply(null,arguments)},s._Abs=function(){return(s._Abs=s.asm.Abs).apply(null,arguments)},s._Add=function(){return(s._Add=s.asm.Add).apply(null,arguments)},s._AddN=function(){return(s._AddN=s.asm.AddN).apply(null,arguments)},s._ArgMax=function(){return(s._ArgMax=s.asm.ArgMax).apply(null,arguments)},s._AvgPool=function(){return(s._AvgPool=s.asm.AvgPool).apply(null,arguments)},s._BatchMatMul=function(){return(s._BatchMatMul=s.asm.BatchMatMul).apply(null,arguments)},s._ClipByValue=function(){return(s._ClipByValue=s.asm.ClipByValue).apply(null,arguments)},s._Conv2D=function(){return(s._Conv2D=s.asm.Conv2D).apply(null,arguments)},s._Conv2DBackpropInput=function(){return(s._Conv2DBackpropInput=s.asm.Conv2DBackpropInput).apply(null,arguments)},s._Cos=function(){return(s._Cos=s.asm.Cos).apply(null,arguments)},s._CropAndResize=function(){return(s._CropAndResize=s.asm.CropAndResize).apply(null,arguments)},s._Cumsum=function(){return(s._Cumsum=s.asm.Cumsum).apply(null,arguments)},s._DepthToSpace=function(){return(s._DepthToSpace=s.asm.DepthToSpace).apply(null,arguments)},s._DepthwiseConv2dNative=function(){return(s._DepthwiseConv2dNative=s.asm.DepthwiseConv2dNative).apply(null,arguments)},s._Equal=function(){return(s._Equal=s.asm.Equal).apply(null,arguments)},s._Exp=function(){return(s._Exp=s.asm.Exp).apply(null,arguments)},s._FlipLeftRight=function(){return(s._FlipLeftRight=s.asm.FlipLeftRight).apply(null,arguments)},s._Floor=function(){return(s._Floor=s.asm.Floor).apply(null,arguments)},s._FloorDiv=function(){return(s._FloorDiv=s.asm.FloorDiv).apply(null,arguments)},s._FusedBatchNorm=function(){return(s._FusedBatchNorm=s.asm.FusedBatchNorm).apply(null,arguments)},s._FusedConv2D=function(){return(s._FusedConv2D=s.asm.FusedConv2D).apply(null,arguments)},s._FusedDepthwiseConv2D=function(){return(s._FusedDepthwiseConv2D=s.asm.FusedDepthwiseConv2D).apply(null,arguments)},s._Gather=function(){return(s._Gather=s.asm.Gather).apply(null,arguments)},s._GatherNd=function(){return(s._GatherNd=s.asm.GatherNd).apply(null,arguments)},s._Greater=function(){return(s._Greater=s.asm.Greater).apply(null,arguments)},s._GreaterEqual=function(){return(s._GreaterEqual=s.asm.GreaterEqual).apply(null,arguments)},s._LeakyRelu=function(){return(s._LeakyRelu=s.asm.LeakyRelu).apply(null,arguments)},s._Less=function(){return(s._Less=s.asm.Less).apply(null,arguments)},s._LessEqual=function(){return(s._LessEqual=s.asm.LessEqual).apply(null,arguments)},s._Log=function(){return(s._Log=s.asm.Log).apply(null,arguments)},s._LogicalAnd=function(){return(s._LogicalAnd=s.asm.LogicalAnd).apply(null,arguments)},s._Max=function(){return(s._Max=s.asm.Max).apply(null,arguments)},s._MaxPool=function(){return(s._MaxPool=s.asm.MaxPool).apply(null,arguments)},s._Maximum=function(){return(s._Maximum=s.asm.Maximum).apply(null,arguments)},s._Mean=function(){return(s._Mean=s.asm.Mean).apply(null,arguments)},s._Min=function(){return(s._Min=s.asm.Min).apply(null,arguments)},s._Minimum=function(){return(s._Minimum=s.asm.Minimum).apply(null,arguments)},s._Multiply=function(){return(s._Multiply=s.asm.Multiply).apply(null,arguments)},s._Neg=function(){return(s._Neg=s.asm.Neg).apply(null,arguments)},s._NonMaxSuppressionV3=function(){return(s._NonMaxSuppressionV3=s.asm.NonMaxSuppressionV3).apply(null,arguments)},s._NonMaxSuppressionV4=function(){return(s._NonMaxSuppressionV4=s.asm.NonMaxSuppressionV4).apply(null,arguments)},s._NonMaxSuppressionV5=function(){return(s._NonMaxSuppressionV5=s.asm.NonMaxSuppressionV5).apply(null,arguments)},s._NotEqual=function(){return(s._NotEqual=s.asm.NotEqual).apply(null,arguments)},s._OneHot=function(){return(s._OneHot=s.asm.OneHot).apply(null,arguments)},s._PadV2=function(){return(s._PadV2=s.asm.PadV2).apply(null,arguments)},s._Pow=function(){return(s._Pow=s.asm.Pow).apply(null,arguments)},s._Prelu=function(){return(s._Prelu=s.asm.Prelu).apply(null,arguments)},s._Prod=function(){return(s._Prod=s.asm.Prod).apply(null,arguments)},s._RealDiv=function(){return(s._RealDiv=s.asm.RealDiv).apply(null,arguments)},s._Relu=function(){return(s._Relu=s.asm.Relu).apply(null,arguments)},s._Relu6=function(){return(s._Relu6=s.asm.Relu6).apply(null,arguments)},s._ResizeBilinear=function(){return(s._ResizeBilinear=s.asm.ResizeBilinear).apply(null,arguments)},s._Reverse=function(){return(s._Reverse=s.asm.Reverse).apply(null,arguments)},s._RotateWithOffset=function(){return(s._RotateWithOffset=s.asm.RotateWithOffset).apply(null,arguments)},s._Round=function(){return(s._Round=s.asm.Round).apply(null,arguments)},s._Rsqrt=function(){return(s._Rsqrt=s.asm.Rsqrt).apply(null,arguments)},s._ScatterNd=function(){return(s._ScatterNd=s.asm.ScatterNd).apply(null,arguments)},s._SelectV2=function(){return(s._SelectV2=s.asm.SelectV2).apply(null,arguments)},s._Sigmoid=function(){return(s._Sigmoid=s.asm.Sigmoid).apply(null,arguments)},s._Sin=function(){return(s._Sin=s.asm.Sin).apply(null,arguments)},s._Softmax=function(){return(s._Softmax=s.asm.Softmax).apply(null,arguments)},s._Sqrt=function(){return(s._Sqrt=s.asm.Sqrt).apply(null,arguments)},s._Square=function(){return(s._Square=s.asm.Square).apply(null,arguments)},s._SquaredDifference=function(){return(s._SquaredDifference=s.asm.SquaredDifference).apply(null,arguments)},s._Step=function(){return(s._Step=s.asm.Step).apply(null,arguments)},s._StridedSlice=function(){return(s._StridedSlice=s.asm.StridedSlice).apply(null,arguments)},s._Sub=function(){return(s._Sub=s.asm.Sub).apply(null,arguments)},s._Sum=function(){return(s._Sum=s.asm.Sum).apply(null,arguments)},s._Tanh=function(){return(s._Tanh=s.asm.Tanh).apply(null,arguments)},s._Tile=function(){return(s._Tile=s.asm.Tile).apply(null,arguments)},s._TopK=function(){return(s._TopK=s.asm.TopK).apply(null,arguments)},s._Transpose=function(){return(s._Transpose=s.asm.Transpose).apply(null,arguments)},s.__FusedMatMul=function(){return(s.__FusedMatMul=s.asm._FusedMatMul).apply(null,arguments)},s._malloc=function(){return(s._malloc=s.asm.malloc).apply(null,arguments)},s._free=function(){return(s._free=s.asm.free).apply(null,arguments)},s.__start=function(){return(s.__start=s.asm._start).apply(null,arguments)};var $t,Nt=s.stackSave=function(){return(Nt=s.stackSave=s.asm.stackSave).apply(null,arguments)},Ct=s.stackAlloc=function(){return(Ct=s.stackAlloc=s.asm.stackAlloc).apply(null,arguments)},Et=s.stackRestore=function(){return(Et=s.stackRestore=s.asm.stackRestore).apply(null,arguments)};function St(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function At(t){var e=s.__start;try{e(),Tt(0,!0)}catch(t){if(t instanceof St)return;if("unwind"==t)return void(x=!0);var n=t;t&&"object"==typeof t&&t.stack&&(n=[t,t.stack]),k("exception thrown: "+n),a(1,t)}}function Rt(t){function e(){$t||($t=!0,s.calledRun=!0,$||(G(),j(),s.onRuntimeInitialized&&s.onRuntimeInitialized(),Ot&&At(),q()))}t=t||o,Z>0||(U(),Z>0||(s.setStatus?(s.setStatus("Running..."),setTimeout((function(){setTimeout((function(){s.setStatus("")}),1),e()}),1)):e()))}function Tt(t,e){e&&x&&0===t||(x||($=!0,H(),s.onExit&&s.onExit(t)),a(t,new St(t)))}if(s.asm=kt,s.cwrap=S,s.then=function(t){if($t)t(s);else{var e=s.onRuntimeInitialized;s.onRuntimeInitialized=function(){e&&e(),t(s)}}return s},tt=function t(){$t||Rt(),$t||(tt=t)},s.run=Rt,s.preInit)for("function"==typeof s.preInit&&(s.preInit=[s.preInit]);s.preInit.length>0;)s.preInit.pop()();var Ot=!0;return s.noInitialRun&&(Ot=!1),x=!0,Rt(),t});t.exports=s},377:(t,e,n)=>{var r=n(832),s=n(652),i=n(801),o=n(30),a=n(618),u=n(49),c=n(971);c.alea=r,c.xor128=s,c.xorwow=i,c.xorshift7=o,c.xor4096=a,c.tychei=u,t.exports=c},832:function(t,e,n){var r;!function(t,s,i){function o(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function u(t,e){var n=new o(t),r=e&&e.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&a(r,n),s.state=function(){return a(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.alea=u}(0,t=n.nmd(t),n.amdD)},49:function(t,e,n){var r;!function(t,s,i){function o(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function u(t,e){var n=new o(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&a(r,n),s.state=function(){return a(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.tychei=u}(0,t=n.nmd(t),n.amdD)},652:function(t,e,n){var r;!function(t,s,i){function o(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function u(t,e){var n=new o(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&a(r,n),s.state=function(){return a(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor128=u}(0,t=n.nmd(t),n.amdD)},618:function(t,e,n){var r;!function(t,s,i){function o(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,i=e.i;return e.w=r=r+1640531527|0,n=s[i+34&127],t=s[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,s,i,o,a=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,i=-32;i<u;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(o=o+1640531527|0,s=0==(n=a[127&i]^=r+o)?s+1:0);for(s>=128&&(a[127&(e&&e.length||0)]=-1),s=127,i=512;i>0;--i)r=a[s+34&127],n=a[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,a[s]=r^n;t.w=o,t.X=a,t.i=s}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function u(t,e){null==t&&(t=+new Date);var n=new o(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.X&&a(r,n),s.state=function(){return a(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor4096=u}(0,t=n.nmd(t),n.amdD)},30:function(t,e,n){var r;!function(t,s,i){function o(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function u(t,e){null==t&&(t=+new Date);var n=new o(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.x&&a(r,n),s.state=function(){return a(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorshift7=u}(0,t=n.nmd(t),n.amdD)},801:function(t,e,n){var r;!function(t,s,i){function o(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function u(t,e){var n=new o(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&a(r,n),s.state=function(){return a(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorwow=u}(0,t=n.nmd(t),n.amdD)},971:(t,e,n)=>{var r;!function(s,i){var o,a=this,u=256,c=i.pow(u,6),l=i.pow(2,52),h=2*l,d=255;function f(t,e,n){var r=[],d=y(b((e=1==e?{entropy:!0}:e||{}).entropy?[t,g(s)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(u):(t=new Uint8Array(u),(a.crypto||a.msCrypto).getRandomValues(t)),g(t)}catch(t){var e=a.navigator,n=e&&e.plugins;return[+new Date,a,n,a.screen,g(s)]}}():t,3),r),f=new p(r),x=function(){for(var t=f.g(6),e=c,n=0;t<l;)t=(t+n)*u,e*=u,n=f.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|f.g(4)},x.quick=function(){return f.g(4)/4294967296},x.double=x,y(g(f.S),s),(e.pass||n||function(t,e,n,r){return r&&(r.S&&m(r,f),t.state=function(){return m(f,{})}),n?(i.random=t,e):t})(x,d,"global"in e?e.global:this==i,e.state)}function p(t){var e,n=t.length,r=this,s=0,i=r.i=r.j=0,o=r.S=[];for(n||(t=[n++]);s<u;)o[s]=s++;for(s=0;s<u;s++)o[s]=o[i=d&i+t[s%n]+(e=o[s])],o[i]=e;(r.g=function(t){for(var e,n=0,s=r.i,i=r.j,o=r.S;t--;)e=o[s=d&s+1],n=n*u+o[d&(o[s]=o[i=d&i+e])+(o[i]=e)];return r.i=s,r.j=i,n})(u)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function b(t,e){var n,r=[],s=typeof t;if(e&&"object"==s)for(n in t)try{r.push(b(t[n],e-1))}catch(t){}return r.length?r:"string"==s?t:t+"\0"}function y(t,e){for(var n,r=t+"",s=0;s<r.length;)e[d&s]=d&(n^=19*e[d&s])+r.charCodeAt(s++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(i.seedrandom=f,y(i.random(),s),t.exports){t.exports=f;try{o=n(906)}catch(t){}}else void 0===(r=function(){return f}.call(e,n,e,t))||(t.exports=r)}([],Math)},906:()=>{},993:()=>{},352:()=>{},386:()=>{},513:()=>{},589:()=>{},758:()=>{},614:()=>{}},e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t={};n.r(t),n.d(t,{assertParamsValid:()=>li,computeFlatOffset:()=>$i,computeOutShape:()=>di,getNormalizedAxes:()=>bi,isSliceContinous:()=>ki,maskToAxes:()=>hi,parseSliceParams:()=>Ni,sliceInfo:()=>Ci,startForAxis:()=>wi,startIndicesWithElidedDims:()=>yi,stopForAxis:()=>vi,stopIndicesWithElidedDims:()=>gi,stridesForAxis:()=>xi,stridesWithElidedDims:()=>fi});var e={};n.r(e),n.d(e,{collectGatherOpShapeInfo:()=>Uc,computeOutShape:()=>Wc,segOpComputeOptimalWindowSize:()=>Bc});var r={};n.r(r),n.d(r,{ERF_A1:()=>Cc,ERF_A2:()=>Ec,ERF_A3:()=>Sc,ERF_A4:()=>Ac,ERF_A5:()=>Rc,ERF_P:()=>Nc,PARALLELIZE_THRESHOLD:()=>pc,SELU_SCALE:()=>$c,SELU_SCALEALPHA:()=>kc,applyActivation:()=>au,assertAndGetBroadcastShape:()=>To,assertAxesAreInnerMostDims:()=>ia,assertParamsConsistent:()=>dc,assignToTypedArray:()=>Lc,axesAreInnerMostDims:()=>ea,calculateShapes:()=>ci,castTensor:()=>Gc,combineLocations:()=>na,complexWithEvenIndex:()=>_c,complexWithOddIndex:()=>Mc,computeConv2DInfo:()=>Ki,computeConv3DInfo:()=>Ji,computeDefaultPad:()=>Yi,computeDilation2DInfo:()=>Hi,computeOptimalWindowSize:()=>mc,computeOutAndReduceShapes:()=>ra,computeOutShape:()=>fc,computePool2DInfo:()=>qi,computePool3DInfo:()=>Xi,convertConv2DDataFormat:()=>so,eitherStridesOrDilationsAreOne:()=>ro,expandShapeToKeepDim:()=>sa,exponent:()=>zc,exponents:()=>Pc,fromStringArrayToUint8:()=>qc,fromUint8ToStringArray:()=>Hc,getAxesPermutation:()=>oa,getBroadcastDims:()=>Ao,getComplexWithIndex:()=>Dc,getFusedBiasGradient:()=>ou,getFusedDyActivation:()=>iu,getImageCenter:()=>bc,getInnerMostAxes:()=>ua,getPermuted:()=>gc,getReductionAxes:()=>Ro,getReshaped:()=>yc,getReshapedPermuted:()=>xc,getSliceBeginCoords:()=>wc,getSliceSize:()=>vc,getUndoAxesPermutation:()=>aa,log:()=>Oc,mergeRealAndImagArrays:()=>Fc,prepareAndValidate:()=>oi,prepareSplitSize:()=>Vc,reshapeTensor:()=>jc,segment_util:()=>e,shouldFuse:()=>uu,slice_util:()=>t,splitRealAndImagArrays:()=>Ic,tupleValuesAreOne:()=>no,upcastType:()=>Br,validateInput:()=>ui,validateUpdateShape:()=>ai,warn:()=>Tc});var s={};n.r(s),n.d(s,{json:()=>Ig});var i={};n.r(i),n.d(i,{json:()=>_g});var o={};n.r(o),n.d(o,{json:()=>Mg});var a={};n.r(a),n.d(a,{json:()=>Dg});var u={};n.r(u),n.d(u,{json:()=>Lg});var c={};n.r(c),n.d(c,{json:()=>Pg});var l={};n.r(l),n.d(l,{json:()=>zg});var h={};n.r(h),n.d(h,{json:()=>Vg});var d={};n.r(d),n.d(d,{json:()=>Bg});var f={};n.r(f),n.d(f,{json:()=>Wg});var p={};n.r(p),n.d(p,{json:()=>Ug});var m={};n.r(m),n.d(m,{json:()=>Gg});var b={};n.r(b),n.d(b,{json:()=>jg});var y={};n.r(y),n.d(y,{json:()=>Hg});var g={};n.r(g),n.d(g,{json:()=>qg});var x={};n.r(x),n.d(x,{json:()=>Xg});var w={};n.r(w),n.d(w,{json:()=>Kg});var v={};n.r(v),n.d(v,{addImpl:()=>Xw,bincountImpl:()=>Vv,bincountReduceImpl:()=>Bv,ceilImpl:()=>Gv,concatImpl:()=>Jv,expImpl:()=>Dk,expm1Impl:()=>Bk,floorImpl:()=>u$,gatherV2Impl:()=>y$,greaterImpl:()=>x$,lessImpl:()=>F$,linSpaceImpl:()=>P$,logImpl:()=>V$,maxImpl:()=>eN,maximumImpl:()=>sN,minimumImpl:()=>bN,multiplyImpl:()=>Gk,negImpl:()=>EN,notEqualImpl:()=>_N,prodImpl:()=>qN,rangeImpl:()=>KN,rsqrtImpl:()=>aC,simpleAbsImpl:()=>rv,sliceImpl:()=>Dv,squaredDifferenceImpl:()=>_C,stridedSliceImpl:()=>zC,subImpl:()=>Yk,tileImpl:()=>GC,topKImpl:()=>jC,transposeImpl:()=>lv,uniqueImpl:()=>HC});const k=(t,e)=>{for(let n of Object.keys(e))e[n]instanceof Object&&Object.assign(e[n],k(t[n]||{},e[n]));return Object.assign(t||{},e),t};class ${constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class N{time(t){return C("time")}read(t){return C("read")}readSync(t){return C("readSync")}numDataIds(){return C("numDataIds")}disposeData(t){return C("disposeData")}write(t,e,n){return C("write")}move(t,e,n,r){return C("move")}memory(){return C("memory")}floatPrecision(){return C("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return C("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:i,preluActivationWeights:o}){return C("fusedBatchMatMul")}slice(t,e,n){return C("slice")}stridedSlice(t,e,n,r){return C("stridedSlice")}unstack(t,e){return C("unstack")}reverse(t,e){return C("reverse")}concat(t,e){return C("concat")}neg(t){return C("neg")}add(t,e){return C("add")}addN(t){return C("addN")}subtract(t,e){return C("subtract")}multiply(t,e){return C("multiply")}realDivide(t,e){return C("realDivide")}floorDiv(t,e){return C("floorDiv")}sum(t,e){return C("sum")}prod(t,e){return C("prod")}unsortedSegmentSum(t,e,n){return C("unsortedSegmentSum")}argMin(t,e){return C("argMin")}argMax(t,e){return C("argMax")}equal(t,e){return C("equal")}notEqual(t,e){return C("notEqual")}less(t,e){return C("less")}lessEqual(t,e){return C("lessEqual")}greater(t,e){return C("greater")}greaterEqual(t,e){return C("greaterEqual")}logicalNot(t){return C("logicalNot")}logicalAnd(t,e){return C("logicalAnd")}logicalOr(t,e){return C("logicalOr")}where(t){return C("where")}select(t,e,n){return C("select")}topk(t,e,n){return C("topk")}min(t,e){return C("min")}minimum(t,e){return C("minimum")}mod(t,e){return C("mod")}max(t,e){return C("max")}maximum(t,e){return C("maximum")}all(t,e){return C("all")}any(t,e){return C("any")}squaredDifference(t,e){return C("squaredDifference")}ceil(t){return C("ceil")}floor(t){return C("floor")}round(t){return C("round")}sign(t){return C("sign")}isNaN(t){return C("isNaN")}isInf(t){return C("isInf")}isFinite(t){return C("isFinite")}pow(t,e){return C("pow")}exp(t){return C("exp")}expm1(t){return C("expm1")}softmax(t,e){return C("softmax")}log(t){return C("log")}log1p(t){return C("log1p")}sqrt(t){return C("sqrt")}rsqrt(t){return C("rsqrt")}square(t){return C("square")}reciprocal(t){return C("reciprocal")}relu(t){return C("relu")}relu6(t){return C("relu6")}prelu(t,e){return C("prelu")}elu(t){return C("elu")}eluDer(t,e){return C("eluDer")}selu(t){return C("selu")}int(t){return C("int")}clip(t,e,n){return C("clip")}abs(t){return C("abs")}complexAbs(t){return C("complexAbs")}sigmoid(t){return C("sigmoid")}softplus(t){return C("softplus")}sin(t){return C("sin")}cos(t){return C("cos")}tan(t){return C("tan")}asin(t){return C("asin")}acos(t){return C("acos")}atan(t){return C("atan")}atan2(t,e){return C("atan2")}sinh(t){return C("sinh")}cosh(t){return C("cosh")}tanh(t){return C("tanh")}asinh(t){return C("asinh")}acosh(t){return C("acosh")}atanh(t){return C("atanh")}erf(t){return C("erf")}step(t,e){return C("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:i}){return C("fusedConv2d")}conv2d(t,e,n){return C("conv2d")}conv2dDerInput(t,e,n){return C("conv2dDerInput")}conv2dDerFilter(t,e,n){return C("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:i}){return C("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return C("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return C("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return C("depthwiseConv2DDerFilter")}conv3d(t,e,n){return C("conv3d")}conv3dDerInput(t,e,n){return C("conv3dDerInput")}conv3dDerFilter(t,e,n){return C("conv3dDerFilter")}maxPool(t,e){return C("maxPool")}maxPoolBackprop(t,e,n,r){return C("maxPoolBackprop")}avgPool(t,e){return C("avgPool")}avgPoolBackprop(t,e,n){return C("avgPoolBackprop")}avgPool3d(t,e){return C("avgPool3d")}avgPool3dBackprop(t,e,n){return C("avgPool3dBackprop")}maxPool3d(t,e){return C("maxPool3d")}maxPool3dBackprop(t,e,n,r){return C("maxPool3dBackprop")}reshape(t,e){return C("reshape")}cast(t,e){return C("cast")}tile(t,e){return C("tile")}pad(t,e,n){return C("pad")}transpose(t,e){return C("transpose")}gather(t,e,n,r=0){return C("gather")}gatherND(t,e){return C("gatherND")}scatterND(t,e,n){return C("scatterND")}batchToSpaceND(t,e,n){return C("batchToSpaceND")}spaceToBatchND(t,e,n){return C("spaceToBatchND")}resizeBilinear(t,e,n,r,s){return C("resizeBilinear")}resizeBilinearBackprop(t,e,n){return C("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r,s){return C("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return C("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,i){return C("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return C("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,i,o){return C("LRNGrad")}multinomial(t,e,n,r){return C("multinomial")}oneHot(t,e,n,r){return C("oneHot")}cumsum(t,e,n,r){return C("cumsum")}nonMaxSuppression(t,e,n,r,s){return C("nonMaxSuppression")}fft(t){return C("fft")}ifft(t){return C("ifft")}complex(t,e){return C("complex")}real(t){return C("real")}imag(t){return C("imag")}cropAndResize(t,e,n,r,s,i){return C("cropAndResize")}depthToSpace(t,e,n){return C("depthToSpace")}split(t,e,n){return C("split")}sparseToDense(t,e,n,r){return C("sparseToDense")}diag(t){return C("diag")}fill(t,e,n){return C("fill")}onesLike(t){return C("onesLike")}zerosLike(t){return C("zerosLike")}linspace(t,e,n){return C("linspace")}dispose(){return C("dispose")}}function C(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function E(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function S(t,e,n){return Math.max(t,Math.min(e,n))}function A(t){return t%2==0?t:t+1}function R(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function T(t,e,n=""){R(_(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function O(t){R(null!=t,(()=>"The input to the tensor constructor must be a non-null value."))}function F(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||j(t)&&!n)for(let r=0;r<t.length;++r)F(t[r],e,n);else e.push(t);return e}function I(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function _(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function M(t){return t%1==0}function D(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function L(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function P(t,e=(t=>0),n){return new Promise(((r,s)=>{let i=0;const o=()=>{if(t())return void r();i++;const a=e(i);null!=n&&i>=n?s():setTimeout(o,a)};o()}))}function z(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function V(t,e){const n=e.length;return R((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),R(t.every((t=>M(t))),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function B(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,i=null==e||s?null:V(e,t).sort();let o=0;for(let e=0;e<t.length;++e){if(null!=i){if(i[o]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==i[o]||i[o]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),i[o]<=e&&o++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function W(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error(`Unknown data type ${t}`);n=new Uint8Array(e)}return n}function U(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error(`Unknown data type ${t}`);n=new Array(e)}return n}function G(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function j(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function H(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function q(t){return"string"==typeof t||t instanceof String}function X(t){return"number"==typeof t}function K(t){return Array.isArray(t)?K(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":X(t)?"float32":q(t)?"string":"boolean"==typeof t?"bool":"float32"}function J(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Y(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function Z(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Q(t,e,n){const r=new Array;if(1===e.length){const s=e[0];for(let e=0;e<s;e++)r[e]=n[t+e]}else{const s=e[0],i=e.slice(1),o=i.reduce(((t,e)=>t*e));for(let e=0;e<s;e++)r[e]=Q(t+e*o,i,n)}return r}function tt(t,e){if(0===t.length)return e[0];const n=t.reduce(((t,e)=>t*e));if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return Q(0,t,e)}function et(t,e){const n=nt(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function nt(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error(`Unknown data type ${e}`)}function rt(t,e){const n=t.reduce(((t,e)=>t*e),1);if(null==e||"float32"===e)return tt(t,new Float32Array(n));if("int32"===e)return tt(t,new Int32Array(n));if("bool"===e)return tt(t,new Uint8Array(n));throw new Error(`Unknown data type ${e}`)}function st(t){t.forEach((e=>{R(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function it(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function ot(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}function at(t){return t&&t.then&&"function"==typeof t.then}const ut="tfjsflags";class ct{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(at(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")))),e}(this.global.location.search);if(ut in t){t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}}function lt(){return dt}let ht,dt=null;function ft(){if(null==ht){let t;if("undefined"!=typeof window)t=window;else if(void 0!==n.g)t=n.g;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}ht=t}return ht}function pt(t,e){const n=function(){const t=ft();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}const mt="Abs",bt="Acos",yt="Acosh",gt="Add",xt="AddN",wt="All",vt="Any",kt="ArgMax",$t="ArgMin",Nt="Asin",Ct="Asinh",Et="Atan",St="Atanh",At="Atan2",Rt="AvgPool",Tt="AvgPoolGrad",Ot="AvgPool3D",Ft="AvgPool3DGrad",It="BatchMatMul",_t="BatchToSpaceND",Mt="Bincount",Dt="Cast",Lt="Ceil",Pt="ClipByValue",zt="Complex",Vt="ComplexAbs",Bt="Concat",Wt="Conv2D",Ut="Conv2DBackpropFilter",Gt="Conv2DBackpropInput",jt="Conv3D",Ht="Conv3DBackpropFilterV2",qt="Conv3DBackpropInputV2",Xt="Cos",Kt="Cosh",Jt="Cumsum",Yt="CropAndResize",Zt="DenseBincount",Qt="DepthToSpace",te="DepthwiseConv2dNative",ee="DepthwiseConv2dNativeBackpropFilter",ne="DepthwiseConv2dNativeBackpropInput",re="Diag",se="Dilation2D",ie="Dilation2DBackpropInput",oe="Dilation2DBackpropFilter",ae="RealDiv",ue="Elu",ce="EluGrad",le="Erf",he="Equal",de="Exp",fe="ExpandDims",pe="Expm1",me="FFT",be="Fill",ye="FlipLeftRight",ge="Floor",xe="FloorDiv",we="FusedBatchNorm",ve="GatherV2",ke="GatherNd",$e="Greater",Ne="GreaterEqual",Ce="Identity",Ee="IFFT",Se="Imag",Ae="IsFinite",Re="IsInf",Te="IsNan",Oe="LeakyRelu",Fe="Less",Ie="LessEqual",_e="LinSpace",Me="Log",De="Log1p",Le="LogicalAnd",Pe="LogicalNot",ze="LogicalOr",Ve="LRN",Be="LRNGrad",We="Max",Ue="Maximum",Ge="MaxPool",je="MaxPoolGrad",He="MaxPool3D",qe="MaxPool3DGrad",Xe="MaxPoolWithArgmax",Ke="Mean",Je="Min",Ye="Minimum",Ze="MirrorPad",Qe="Mod",tn="Multinomial",en="Multiply",nn="Neg",rn="NotEqual",sn="NonMaxSuppressionV3",on="NonMaxSuppressionV4",an="NonMaxSuppressionV5",un="OnesLike",cn="OneHot",ln="Pack",hn="PadV2",dn="Pow",fn="Prelu",pn="Prod",mn="Range",bn="Real",yn="Reciprocal",gn="Relu",xn="Reshape",wn="ResizeNearestNeighbor",vn="ResizeNearestNeighborGrad",kn="ResizeBilinear",$n="ResizeBilinearGrad",Nn="Relu6",Cn="Reverse",En="Round",Sn="Rsqrt",An="ScatterNd",Rn="Select",Tn="Selu",On="Slice",Fn="Sin",In="Sinh",_n="Sign",Mn="Sigmoid",Dn="Softplus",Ln="Sqrt",Pn="Sum",zn="SpaceToBatchND",Vn="SplitV",Bn="Softmax",Wn="SquaredDifference",Un="Square",Gn="Sub",jn="SparseToDense",Hn="StridedSlice",qn="Tan",Xn="Tanh",Kn="Tile",Jn="TopK",Yn="Transpose",Zn="Unique",Qn="Unpack",tr="UnsortedSegmentSum",er="ZerosLike",nr="Step",rr="FromPixels",sr="RotateWithOffset",ir="_FusedMatMul",or="FusedConv2D",ar="FusedDepthwiseConv2D",ur=pt("kernelRegistry",(()=>new Map)),cr=pt("gradRegistry",(()=>new Map));function lr(t,e){const n=mr(t,e);return ur.get(n)}function hr(t){return cr.get(t)}function dr(t){const e=ur.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[i,o]=s,[a]=i.split("_");a===t&&n.push(o)}return n}function fr(t){const{kernelName:e,backendName:n}=t,r=mr(e,n);ur.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),ur.set(r,t)}function pr(t){const{kernelName:e}=t;cr.has(e)&&lt().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),cr.set(e,t)}function mr(t,e){return`${e}_${t}`}class br{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new gr)}profileKernel(t,e,n){let r;const s=this.backendTimer.time((()=>{r=n()}));if(lt().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let e=0;e<r.length;e++){const n=r[e];n.data().then((e=>{yr(e,n.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:s.then((t=>t.kernelMs)),extraInfo:s.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:i}=t;n.forEach((t=>{Promise.all([t.data(),r,i]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])}))}))}}function yr(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class gr{logKernelProfile(t,e,n,r,s,i){const o="number"==typeof r?L(`${r}ms`,9):r.error,a=L(t,25),u=e.rank,c=e.size,l=L(e.shape.toString(),14);let h="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;h+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${a}\t%c${o}\t%c${u}D ${l}\t%c${c}\t%c${h}\t%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function xr(t,e,n,r){const s=Z(e),i=function(t,e,n,r){const s=I(e),i=r[r.length-1],o=new Array(i).fill(0),a=e.length,u="complex64"===n?$r(t):t;if(a>1)for(let t=0;t<s/i;t++){const e=t*i;for(let t=0;t<i;t++)o[t]=Math.max(o[t],wr(u[e+t],0,n).length)}return o}(t,e,n,s),o=e.length,a=kr(t,e,n,s,i),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(a.map((t=>"    "+t)).join("\n")),u.join("\n")}function wr(t,e,n){let r;return r=Array.isArray(t)?`${parseFloat(t[0].toFixed(7))} + ${parseFloat(t[1].toFixed(7))}j`:q(t)?`'${t}'`:"bool"===n?vr(t):parseFloat(t.toFixed(7)).toString(),L(r,e)}function vr(t){return 0===t?"false":"true"}function kr(t,e,n,r,s,i=!0){const o="complex64"===n?2:1,a=e[0],u=e.length;if(0===u){if("complex64"===n){return[wr($r(t)[0],0,n)]}return"bool"===n?[vr(t[0])]:[t[0].toString()]}if(1===u){if(a>20){const e=3*o;let r=Array.from(t.slice(0,e)),i=Array.from(t.slice((a-3)*o,a*o));return"complex64"===n&&(r=$r(r),i=$r(i)),["["+r.map(((t,e)=>wr(t,s[e],n))).join(", ")+", ..., "+i.map(((t,e)=>wr(t,s[a-3+e],n))).join(", ")+"]"]}return["["+("complex64"===n?$r(t):Array.from(t)).map(((t,e)=>wr(t,s[e],n))).join(", ")+"]"]}const c=e.slice(1),l=r.slice(1),h=r[0]*o,d=[];if(a>20){for(let e=0;e<3;e++){const r=e*h,i=r+h;d.push(...kr(t.slice(r,i),c,n,l,s,!1))}d.push("...");for(let e=a-3;e<a;e++){const r=e*h,i=r+h;d.push(...kr(t.slice(r,i),c,n,l,s,e===a-1))}}else for(let e=0;e<a;e++){const r=e*h,i=r+h;d.push(...kr(t.slice(r,i),c,n,l,s,e===a-1))}const f=2===u?",":"";d[0]="["+d[0]+f;for(let t=1;t<d.length-1;t++)d[t]=" "+d[t]+f;let p=",\n";for(let t=2;t<u;t++)p+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":p),d}function $r(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}function Nr(t,e){return"string"===e?Sr(t):Cr([t],e)}function Cr(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=F(t)),lt().getBool("DEBUG")&&function(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error(`Unknown data type ${e}`)}function Er(){return lt().platform.now()}function Sr(t,e="utf-8"){return e=e||"utf-8",lt().platform.encode(t,e)}function Ar(t,e="utf-8"){return e=e||"utf-8",lt().platform.decode(t,e)}class Rr{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=I(t),null!=n){const t=n.length;R(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||U(e,this.size),this.strides=Z(t)}set(t,...e){0===e.length&&(e=[0]),R(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Tr().makeTensor(this.values,this.shape,this.dtype)}}let Tr=null,Or=null,Fr=null;class Ir{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=I(t),this.strides=Z(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return Or.buffer(this.shape,this.dtype,t)}bufferSync(){return Or.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return tt(this.shape,t)}arraySync(){return tt(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=Tr().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map((t=>Ar(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=Tr().readSync(this.dataId);if("string"===this.dtype)try{return t.map((t=>Ar(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await Tr().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Tr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return Or.print(this,t)}clone(){return this.throwIfDisposed(),Or.clone(this)}toString(t=!1){return xr(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Or.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),Tr().makeVariable(this,t,e,n)}}Object.defineProperty(Ir,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class _r extends Ir{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!_(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Tr().disposeTensor(this),this.dataId=t.dataId,Tr().incRef(this,null)}dispose(){Tr().disposeVariable(this),this.isDisposedInternal=!0}}var Mr,Dr,Lr,Pr,zr;Object.defineProperty(_r,Symbol.hasInstance,{value:t=>t instanceof Ir&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(Mr||(Mr={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(Dr||(Dr={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(Lr||(Lr={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Pr||(Pr={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(zr||(zr={}));const Vr={float32:Pr,int32:Dr,bool:Lr,complex64:zr};function Br(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return Vr[t][e]}function Wr(t){return Br(t,"int32")}function Ur(t,e){if(t.dtype===e.dtype)return[t,e];const n=Br(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Gr(t,e){return e.some((e=>e.id===t.id))}function jr(t){const e=[];return Hr(t,e,new Set),e}function Hr(t,e,n){if(null==t)return;if(t instanceof Ir)return void e.push(t);if(r=t,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=t;for(const t in s){const r=s[t];n.has(r)||(n.add(r),Hr(r,e,n))}}class qr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((t=>t.name))))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Xr{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new qr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new br(this.backendInstance),!0}setupRegisteredKernels(){dr(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){dr(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof N||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return Xr.nextTensorId++}nextVariableId(){return Xr.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e="float32",n={x:t},r={dtype:e};return Jr.runKernelFunc((n=>n.cast(t,e)),n,null,Dt,r)}})),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach((t=>{s+="complex64"===t.dtype?3:1}));const i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-e-s-i;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,i,o){let a,u=[];const c=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const l=this.state.numBytes,h=this.state.numTensors;let d;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const f=lr(r,this.backendName);let p,m;if(null!=f)d=()=>{const t=this.backend.numDataIds();p=f.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(p)?p:[p];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const a=n.map((t=>{if(null!=t.rank)return t;const{dataId:e,shape:n,dtype:r}=t;return this.makeTensorFromDataId(e,n,r)}));if(c){let t=this.getTensorsForGradient(r,e,a);if(null==t){null==o&&(o=[]);const e=a.filter(((t,e)=>o[e]));t=(i||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return a};else{if(null==t)throw new Error(`Error running ${r}: Neither modular kernel nor forward func passed`);const e=t=>{c&&(u=t.map((t=>this.keep(this.clone(t)))))};d=()=>{const n=this.backend.numDataIds();p=this.tidy((()=>t(this.backend,e)));const s=Array.isArray(p)?p:[p];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,e,(()=>d())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),a=m.outputs):a=d()})),c&&this.addTapeNode(r,e,a,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-l,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((t=>null!=e[t]?e[t].shape:null)),outputShapes:a.map((t=>t.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(p)?a:a[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const r=hr(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let i;r.saveAllInputs?(R(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),i=Object.keys(e).map((t=>e[t]))):i=t.map((t=>e[t]));const o=n.filter(((t,e)=>s[e]));return i.concat(o)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&q(t[0])&&(s=t.map((t=>Sr(t))));const i=r.write(s,e,n),o=new Ir(e,n,i,this.nextTensorId());if(this.incRef(o,r),"string"===n){const t=this.state.tensorInfo.get(i),e=function(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return o}makeTensorFromDataId(t,e,n,r){const s=new Ir(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new _r(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*H(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof _r||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,i){const o={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},a=hr(t);null!=a&&(r=a.gradFunc),null!=r&&(o.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],r=nt(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t})),r(t.length>1?t:t[0],s,i))),this.state.activeTape.push(o)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=jr(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(R(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));R(s instanceof Ir,(()=>"The result y returned by f() must be a tensor."));const i=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const i=t[n],o=i.inputs;for(const t in o){const n=o[t];let a=!1;for(let t=0;t<e.length;t++)if(r[n.id]){i.outputs.forEach((t=>r[t.id]=!0)),a=!0,s[i.id]=!0;break}if(a)break}}const i={};i[n.id]=!0;const o={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(i[n.outputs[t].id]){for(const t in r)i[r[t].id]=!0,o[n.id]=!0;break}}const a=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&o[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,a.push(e)}}return a}(this.state.activeTape,e,s);if(!r&&0===i.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[s.id]=null==n?function(t){const e=et(I(t),"float32");return Jr.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const i=e[s],o=[];if(i.outputs.forEach((e=>{const n=t[e.id];null!=n?o.push(n):o.push(null)})),null==i.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);const a=i.gradient(o);for(const e in i.inputs){if(!(e in a))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(a)}.`);const s=n((()=>a[e]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const o=i.inputs[e];if(!_(s.shape,o.shape))throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==t[o.id])t[o.id]=s;else{const e=t[o.id];t[o.id]=r(e,s),e.dispose()}}}}(t,i,(t=>this.tidy(t)),Yr);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(t){return R(J(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;R(e.every((t=>t instanceof Ir)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return e.forEach(((t,e)=>{r[e]=t})),this.runKernelFunc(((r,s)=>(n=t(...e,s),R(n.value instanceof Ir,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),R(J(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((t,r)=>{const s=n.gradFunc(t,r),i=Array.isArray(s)?s:[s];R(i.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),R(i.every((t=>t instanceof Ir)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return i.forEach(((t,e)=>{o[e]=()=>t})),o}))}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Er(),n=await this.backend.time(t);return n.wallMs=Er()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new qr;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Kr(){const t=ft();if(null==t._tfengine){const e=new ct(t);t._tfengine=new Xr(e)}var e;return e=t._tfengine.ENV,dt=e,Tr=()=>t._tfengine,t._tfengine}Xr.nextTensorId=0,Xr.nextVariableId=0;const Jr=Kr();function Yr(t,e){const n={a:t,b:e};return Jr.runKernel(gt,n)}function Zr(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Qr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const ts=lt();function es(t,e){let n=t;if(j(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||j(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&lt().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&ns(t,r,[]),r}function ns(t,e,n){if(n=n||[],!Array.isArray(t)&&!j(t))return void R(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));R(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),R(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let e=0;e<t.length;++e)ns(t[e],r,n.concat(e))}function rs(t,e,n,r){if("string_or_numeric"!==t){if(null==t)throw new Error("Expected dtype cannot be null.");if("numeric"!==t&&t!==e||"numeric"===t&&"string"===e)throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}}function ss(t,e,n,r="numeric"){if(t instanceof Ir)return rs(r,t.dtype,e,n),t;let s=K(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),rs(r,s,e,n),null==t||!j(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const i=es(t,s);j(t)||Array.isArray(t)||(t=[t]);const o="string"!==s?Cr(t,s):F(t,[],!0);return Jr.makeTensor(o,i,s)}function is(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,s)=>ss(t,`${e}[${s}]`,n,r)))}ts.registerFlag("DEBUG",(()=>!1),(t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),ts.registerFlag("IS_BROWSER",(()=>Qr())),ts.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),ts.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),ts.registerFlag("PROD",(()=>!1)),ts.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>ts.getBool("DEBUG"))),ts.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),ts.registerFlag("IS_TEST",(()=>!1)),ts.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));function os(t){const e=Object.keys(t);if(1!==e.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...t)=>{Jr.startScope(n);try{const e=r(...t);return at(e)&&console.error("Cannot return a Promise inside of tidy."),Jr.endScope(e),e}catch(t){throw Jr.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const as=os({complex_:function(t,e){const n=ss(t,"real","complex"),r=ss(e,"imag","complex");T(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Jr.runKernel(zt,s)}});function us(t,e,n,r){if(null==r&&(r=K(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!j(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){st(e);const t=I(e),r=I(n);R(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==I(e.slice(t));R(n[t]===e[t]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return j(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?Cr(t,r):F(t,[],!0),Jr.makeTensor(t,e,r)}function cs(t,e,n){return us(t,e,es(t,n),n)}const ls={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function hs(t,e){const n=[],r=[],s=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);for(let i=0;i<s.length;++i){const o=s[i],a=Array.isArray(t)?t[i].tensor:t[o];if("float32"!==a.dtype&&"int32"!==a.dtype&&"bool"!==a.dtype&&"string"!==a.dtype&&"complex64"!==a.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${a.dtype}`);const u={name:o,shape:a.shape,dtype:a.dtype};if("string"===a.dtype){const t=new Promise((async t=>{const e=await a.bytes(),n=e.reduce(((t,e)=>t+e.length),0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],i=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(i,s),s+=4,r.set(n,s),s+=n.length}t(r)}));r.push(t)}else r.push(a.data());null!=e&&(u.group=e),n.push(u)}return{data:ds(await Promise.all(r)),specs:n}}function ds(t){if(null===t)throw new Error(`Invalid input value: ${JSON.stringify(t)}`);let e=0;const n=[];t.forEach((t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${t.constructor.name}`)}));const r=new Uint8Array(e);let s=0;return n.forEach((t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength})),r.buffer}const fs="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ps(t){return fs?Buffer.byteLength(t):new Blob([t]).size}function ms(t){if(1===t.length)return t[0];let e=0;t.forEach((t=>{e+=t.byteLength}));const n=new Uint8Array(e);let r=0;return t.forEach((t=>{n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function bs(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:ps(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:ps(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function ys(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),i=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],a=t[n[o>>10]+(1023&o)]+e[o>>10];i[s]=a}return new Float32Array(s)}}class gs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==gs.instance&&(gs.instance=new gs),gs.instance}static registerSaveRouter(t){gs.getInstance().saveRouters.push(t)}static registerLoadRouter(t){gs.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return gs.getHandlers(t,"save")}static getLoadHandlers(t,e){return gs.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?gs.getInstance().loadRouters:gs.getInstance().saveRouters).forEach((e=>{const s=e(t,n);null!==s&&r.push(s)})),r}}const xs=t=>gs.getSaveHandlers(t),ws="tensorflowjs",vs="models_store",ks="model_info_store";function $s(){if(!lt().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Ns(t){const e=t.result;e.createObjectStore(vs,{keyPath:"modelPath"}),e.createObjectStore(ks,{keyPath:"modelPath"})}class Cs{constructor(t){if(this.indexedDB=$s(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise(((t,n)=>{const r=this.indexedDB.open(ws,1);r.onupgradeneeded=()=>Ns(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction(vs,"readonly"),r=e.objectStore(vs).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=bs(e),i=s.transaction(ks,"readwrite");let o=i.objectStore(ks);const a=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;a.onsuccess=()=>{u=s.transaction(vs,"readwrite");const a=u.objectStore(vs).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});a.onsuccess=()=>t({modelArtifactsInfo:r}),a.onerror=t=>{o=i.objectStore(ks);const e=o.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(a.error)),e.onerror=t=>(s.close(),n(a.error))}},a.onerror=t=>(s.close(),n(a.error)),i.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)}))}}Cs.URL_SCHEME="indexeddb://";const Es=t=>{return lt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Cs.URL_SCHEME)?(e=t.slice(Cs.URL_SCHEME.length),new Cs(e)):null;var e};gs.registerSaveRouter(Es),gs.registerLoadRouter(Es);class Ss{constructor(){this.indexedDB=$s()}async listModels(){return new Promise(((t,e)=>{const n=this.indexedDB.open(ws,1);n.onupgradeneeded=()=>Ns(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(ks,"readonly"),i=s.objectStore(ks).getAll();i.onsuccess=()=>{const e={};for(const t of i.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},i.onerror=t=>(r.close(),e(i.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)}))}async removeModel(t){var e;return t=(e=t).startsWith(Cs.URL_SCHEME)?e.slice(Cs.URL_SCHEME.length):e,new Promise(((e,n)=>{const r=this.indexedDB.open(ws,1);r.onupgradeneeded=()=>Ns(r),r.onsuccess=()=>{const s=r.result,i=s.transaction(ks,"readwrite"),o=i.objectStore(ks),a=o.get(t);let u;a.onsuccess=()=>{if(null==a.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=o.delete(t),i=()=>{u=s.transaction(vs,"readwrite");const r=u.objectStore(vs).delete(t);r.onsuccess=()=>e(a.result.modelArtifactsInfo),r.onerror=t=>n(a.error)};r.onsuccess=i,r.onerror=t=>(i(),s.close(),n(a.error))}},a.onerror=t=>(s.close(),n(a.error)),i.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)}))}}const As="/",Rs="tensorflowjs_models",Ts="info",Os="model_topology",Fs="weight_specs",Is="weight_data",_s="model_metadata";function Ms(t){return{info:[Rs,t,Ts].join(As),topology:[Rs,t,Os].join(As),weightSpecs:[Rs,t,Fs].join(As),weightData:[Rs,t,Is].join(As),modelMetadata:[Rs,t,_s].join(As)}}function Ds(t){const e=t.split(As);if(e.length<3)throw new Error(`Invalid key format: ${t}`);return e.slice(1,e.length-1).join(As)}class Ls{constructor(t){if(!lt().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Ms(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=bs(t);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(fs)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData));const s={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy};return null!=t.signature&&(s.signature=t.signature),null!=t.userDefinedMetadata&&(s.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(s.modelInitializer=t.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,null!=t.signature&&(e.signature=t.signature),null!=t.userDefinedMetadata&&(e.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(e.modelInitializer=t.modelInitializer)}const i=this.LS.getItem(this.keys.weightData);if(null==i)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(fs){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(i),e}}Ls.URL_SCHEME="localstorage://";const Ps=t=>{return lt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ls.URL_SCHEME)?(e=t.slice(Ls.URL_SCHEME.length),new Ls(e)):null;var e};gs.registerSaveRouter(Ps),gs.registerLoadRouter(Ps);class zs{constructor(){R(lt().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),R("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const t={},e=Rs+As,n=As+Ts;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[Ds(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=Ms(t=(e=t).startsWith(Ls.URL_SCHEME)?e.slice(Ls.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}const Vs="://";class Bs{constructor(){this.managers={}}static getInstance(){return null==Bs.instance&&(Bs.instance=new Bs),Bs.instance}static registerManager(t,e){R(null!=t,(()=>"scheme must not be undefined or null.")),t.endsWith(Vs)&&(t=t.slice(0,t.indexOf(Vs))),R(t.length>0,(()=>"scheme must not be an empty string."));const n=Bs.getInstance();R(null==n.managers[t],(()=>`A model store manager is already registered for scheme '${t}'.`)),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}class Ws{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(lt().get("IS_BROWSER")){lt().setPlatform("browser",new Ws);try{Bs.registerManager(Ls.URL_SCHEME,new zs)}catch(t){}try{Bs.registerManager(Cs.URL_SCHEME,new Ss)}catch(t){}}const Us=()=>n(352);let Gs;class js{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=lt().global.fetch?lt().global.fetch(t,e):(null==Gs&&(Gs=Us()),Gs(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}function Hs(t,e="float32",n){return e=e||"float32",st(t),new Rr(t,e,n)}lt().get("IS_NODE")&&lt().setPlatform("node",new js);const qs=os({cast_:function(t,e){const n=ss(t,"x","cast");if(!function(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return Jr.runKernel(Dt,r,s)}});const Xs=os({clone_:function(t){const e={x:ss(t,"x","clone","string_or_numeric")};return Jr.runKernel(Ce,e)}});Kr();Or={buffer:Hs,cast:qs,clone:Xs,print:function(t,e=!1){console.log(t.toString(e))}};function Ks(t){return new Promise((t=>setTimeout(t))).then(t)}class Js{constructor(t){if(!lt().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Js.URL_SCHEME)&&(t=t.slice(Js.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n};null!=t.signature&&(r.signature=t.signature),null!=t.userDefinedMetadata&&(r.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(r.modelInitializer=t.modelInitializer);const s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(i.download=this.modelTopologyFileName,i.href=s,await Ks((()=>i.dispatchEvent(new MouseEvent("click")))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Ks((()=>t.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:bs(t)}}}}Js.URL_SCHEME="downloads://";function Ys(t,e,n,r){!function(t){R(null!=t&&Array.isArray(t)&&t.length>0,(()=>"promises must be a none empty array"))}(t),function(t,e){R(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${t}`)),R(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${e}`)),R(e>=t,(()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction ${e}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map((i=>(i.then((i=>{const o=n+ ++s/t.length*(r-n);return e(o),i})),i))))}async function Zs(t,e){null==e&&(e={});const n=null==e.fetchFunc?lt().platform.fetch:e.fetchFunc,r=t.map((t=>n(t,e.requestInit,{isBinary:!0}))),s=(null==e.onProgress?await Promise.all(r):await Ys(r,e.onProgress,0,.5)).map((t=>t.arrayBuffer()));return null==e.onProgress?await Promise.all(s):await Ys(s,e.onProgress,.5,1)}gs.registerSaveRouter((t=>lt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Js.URL_SCHEME)?function(t="model"){return new Js(t)}(t.slice(Js.URL_SCHEME.length)):null));class Qs{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(R("function"==typeof e.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=e.fetchFunc):this.fetch=lt().platform.fetch,R(null!=t&&t.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(t)&&R(2===t.length,(()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`)),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n};null!=t.signature&&(r.signature=t.signature),null!=t.userDefinedMetadata&&(r.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(r.modelInitializer=t.modelInitializer),e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:bs(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,i=e.convertedBy,o=e.format,a=e.signature,u=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let c,l;if(null!=r){const t=await this.loadWeights(r);[c,l]=t}const h={modelTopology:n,weightSpecs:c,weightData:l,generatedBy:s,convertedBy:i,format:o};null!=a&&(h.signature=a),null!=u&&(h.userDefinedMetadata=u);const d=e.modelInitializer;return d&&(h.modelInitializer=d),h}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,i=[];for(const e of t)i.push(...e.weights);const o=[],a=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?a.push(this.weightUrlConverter(t)):o.push(s+t+r);this.weightUrlConverter&&o.push(...await Promise.all(a));return[i,ms(await Zs(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ti(t){return null!=t.match(Qs.URL_SCHEME_REGEX)}Qs.URL_SCHEME_REGEX=/^https?:\/\//;const ei=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every((t=>ti(t))):ti(t),n)return ni(t,e)}return null};function ni(t,e){return new Qs(t,e)}function ri(t,e){return ni(t,e)}gs.registerSaveRouter(ei),gs.registerLoadRouter(ei);let si;const ii=os({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,i=!1,o=!1,a=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)i=!0;else if(null!=t.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${t.constructor.name}`);a=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=lr(rr,Jr.backendName)){const n={pixels:t},r={numChannels:e};return Jr.runKernel(rr,n,r)}const[u,c]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let l,h;if(o?l=t.getContext("2d").getImageData(0,0,u,c).data:r||n?l=t.data:(i||s||a)&&(null==si&&(si=document.createElement("canvas").getContext("2d")),si.canvas.width=u,si.canvas.height=c,si.drawImage(t,0,0,u,c),l=si.getImageData(0,0,u,c).data),4===e)h=new Int32Array(l);else{const t=u*c;h=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)h[n*e+t]=l[4*n+t]}return function(t,e,n){if(O(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=es(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return us(t,e,r,n)}(h,[c,u,e],"int32")}});function oi(t,e){const n=t.shape.length,r=e.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[r-1]} vs. ${n}`);if(0===I(t.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const s=e.shape,i=s[s.length-1];let o=1;for(let t=0;t<s.length-1;++t)o*=s[t];const a=t.shape,u=s.slice();u.pop();let c=1;for(let t=i;t<n;++t)c*=a[t],u.push(a[t]);const l=[...Z(t.shape).map((t=>t/c)),1].slice(0,i);return[u,o,c,l]}function ai(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,i=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(i+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(i+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+t.length-r)throw new Error(i+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(i+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(i+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function ui(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===e.size)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(0===t.size)throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`)}ai(n,e,t)}function ci(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,i=n.length;let o=1;for(let t=s;t<i;++t)o*=n[t];const a=s<1?1:s;return{sliceRank:s,numUpdates:I(e.shape)/a,sliceSize:o,strides:[...Z(n.slice(0,s)),1],outputSize:I(n)}}function li(t,e,n){const r=t.shape.length;R(r===e.length,(()=>`Error in slice${r}D: Length of begin ${e} must match the rank of the array (${r}).`)),R(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)R(e[s]+n[s]<=t.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${e[s]+n[s]}) would overflow input.shape[${s}] (${t.shape[s]})`))}function hi(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function di(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function fi(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}function pi(t,e,n){return n<=t?n:n-(e-1)}function mi(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function bi(t,e,n,r,s,i,o,a,u){const c=t.length;let l=new Array(c),h=new Array(c),d=new Array(c);if(e.length&&n>0){const u=e[0],c=n+1;l=yi(o,u,c,r,t),h=gi(a,u,c,s,t),d=fi(i,u,c,t)}else for(let e=0;e<c;e++)l[e]=wi(o,r,i,t,e,u),h[e]=vi(a,s,i,t,e,u),d[e]=xi(i,e,u);return{begin:l,end:h,strides:d}}function yi(t,e,n,r,s){const i=[...s],o=mi(n,e);for(let s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=0;else{const o=pi(e,n,s);let a=r[o];t&1<<o&&(a=0),i[s]=a}return i}function gi(t,e,n,r,s){const i=[...s],o=mi(n,e);for(let s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=Number.MAX_SAFE_INTEGER;else{const o=pi(e,n,s);let a=r[o];t&1<<o&&(a=Number.MAX_SAFE_INTEGER),i[s]=a}for(let t=0;t<i.length;t++){const e=s[t];i[t]<0&&(i[t]+=e),i[t]=S(0,i[t],s[t])}return i}function xi(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function wi(t,e,n,r,s,i){let o=e[s];const a=n[s]||1;(t&1<<s||i&1<<s||null==o)&&(o=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=S(0,o,u-1),o}function vi(t,e,n,r,s,i){let o=e[s];const a=n[s]||1;(t&1<<s||i&1<<s||null==o)&&(o=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=a>0?S(0,o,u):S(-1,o,u-1),o}function ki(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function $i(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function Ni(t,e,n){let r;const s=t.shape.length;let i;return r="number"==typeof e?[e,...new Array(s-1).fill(0)]:e.length<s?e.concat(new Array(s-e.length).fill(0)):e.slice(),r.forEach((t=>{R(-1!==t,(()=>"slice() does not support negative begin indexing."))})),i=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,i=i.map(((e,n)=>e>=0?e:(R(-1===e,(()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`)),t.shape[n]-r[n]))),[r,i]}function Ci(t,e,n,r,s,i,o,a,u){let c=e.slice(),l=n.slice(),h=r;null==r&&(h=new Array(c.length));const d=hi(o);if(d.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==a)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const f=t.length-c.length,p=hi(a),m=t.slice();p.forEach((t=>{c[t]=0,l[t]=1,m.splice(t,0,1)}));const{begin:b,end:y,strides:g}=bi(m,d,f,c,l,h,s,i,o);c=b,l=y,h=g;const x=hi(u);x.forEach((t=>{l[t]=c[t]+1,h[t]=1}));const w=di(c,l,h),v=w.filter(((t,e)=>-1===x.indexOf(e)));return{nonStrided:h.every((t=>1===t)),$begin:c,$end:l,$strides:h,size:w,newShape:m,outShape:v}}class Ei{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Si{constructor(){this.classNameMap={}}static getMap(){return null==Si.instance&&(Si.instance=new Si),Si.instance}static register(t){Si.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Ai(t){R(null!=t.className,(()=>"Class being registered does not have the static className property defined.")),R("string"==typeof t.className,(()=>"className is required to be a string, but got type "+typeof t.className)),R(t.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Si.register(t)}function Ri(t){lt().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Ti(){return Jr}function Oi(){return Jr.memory()}function Fi(t,e){return Jr.tidy(t,e)}function Ii(t){jr(t).forEach((t=>t.dispose()))}function _i(t){return Jr.keep(t)}function Mi(t){return Jr.setBackend(t)}function Di(){return Jr.backendName}function Li(t,e,n=1){return Jr.registerBackend(t,e,n)}function Pi(t){return Jr.customGrad(t)}function zi(t,e){if((j(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&j(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return us(t,[],[],e)}Fr=Ri;class Vi extends Ei{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map((t=>({name:t.name,tensor:s[t.name]})));this.applyGradients(t)}else this.applyGradients(s);return Ii(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function(t,e){R(J(t),(()=>"The f passed in variableGrads(f) must be a function")),R(null==e||Array.isArray(e)&&e.every((t=>t instanceof _r)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=e;if(!n){e=[];for(const t in Jr.registeredVariables)e.push(Jr.registeredVariables[t])}const r=n?e.filter((t=>!t.trainable)):null,s=e.length;R((e=e.filter((t=>t.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:i,grads:o}=Jr.gradients(t,e,null,!0);R(o.some((t=>null!=t)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),R(0===i.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`));const a={};return e.forEach(((t,e)=>{null!=o[e]&&(a[t.name]=o[e])})),null!=r&&r.forEach((t=>a[t.name]=null)),{value:i,grads:a}}(t,e)}dispose(){null!=this.iterations_&&Ii(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:zi(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Vi,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});const Bi=os({abs_:function(t){const e=ss(t,"x","abs");if("complex64"===e.dtype){const t={x:e};return Jr.runKernel(Vt,t)}{const t={x:e};return Jr.runKernel(mt,t)}}});const Wi=os({add_:function(t,e){let n=ss(t,"a","add"),r=ss(e,"b","add");[n,r]=Ur(n,r);const s={a:n,b:r};return Jr.runKernel(gt,s)}});const Ui=os({all_:function(t,e=null,n=!1){const r={x:ss(t,"x","all","bool")},s={axis:e,keepDims:n};return Jr.runKernel(wt,r,s)}});const Gi=os({any_:function(t,e=null,n=!1){const r={x:ss(t,"x","any","bool")},s={axis:e,keepDims:n};return Jr.runKernel(vt,r,s)}});const ji=os({argMax_:function(t,e=0){const n={x:ss(t,"x","argMax")},r={axis:e};return Jr.runKernel(kt,n,r)}});function Hi(t,e,n,r,s="NHWC",i){return Ki(t,[...e,t[3]],n,i,r,null,null,so(s))}function qi(t,e,n,r,s,i,o="channelsLast"){const[a,u]=Zi(e);let c;if("channelsLast"===o)c=[a,u,t[3],t[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);c=[a,u,t[1],t[1]]}return Ki(t,c,n,r,s,i,!1,o)}function Xi(t,e,n,r,s,i,o="NDHWC"){const[a,u,c]=Qi(e);let l,h;if("NDHWC"===o)h="channelsLast",l=[a,u,c,t[4],t[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",l=[a,u,c,t[1],t[1]]}return Ji(t,l,n,r,s,!1,h,i)}function Ki(t,e,n,r,s,i,o=!1,a="channelsLast"){let[u,c,l,h]=[-1,-1,-1,-1];if("channelsLast"===a)[u,c,l,h]=t;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[u,h,c,l]=t}const[d,f,,p]=e,[m,b]=Zi(n),[y,g]=Zi(r),x=to(d,y),w=to(f,g),{padInfo:v,outHeight:k,outWidth:$}=function(t,e,n,r,s,i,o,a,u){let c,l,h;if("number"==typeof t){c={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=Yi(t,e,n));const i=t[0],o=t[1],a=eo((i-e+2*r)/n+1,s),u=eo((o-e+2*r)/n+1,s);return[a,u]}([e,n],i,r,t,a);l=s[0],h=s[1]}else if("same"===t){l=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(l-1)*r+i-e),a=Math.max(0,(h-1)*s+o-n),u=Math.floor(t/2),d=t-u,f=Math.floor(a/2);c={top:u,bottom:d,left:f,right:a-f,type:"SAME"}}else if("valid"===t)c={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((e-i+1)/r),h=Math.ceil((n-o+1)/s);else{if("object"!=typeof t)throw Error(`Unknown padding parameter: ${t}`);{const d="channelsLast"===u?t[1][0]:t[2][0],f="channelsLast"===u?t[1][1]:t[2][1],p="channelsLast"===u?t[2][0]:t[3][0],m="channelsLast"===u?t[2][1]:t[3][1];c={top:d,bottom:f,left:p,right:m,type:0===d&&0===f&&0===p&&0===m?"VALID":"EXPLICIT"},l=eo((e-i+d+f)/r+1,a),h=eo((n-o+p+m)/s+1,a)}}return{padInfo:c,outHeight:l,outWidth:h}}(s,c,l,m,b,x,w,i,a),N=o?p*h:p;let C;return"channelsFirst"===a?C=[u,N,k,$]:"channelsLast"===a&&(C=[u,k,$,N]),{batchSize:u,dataFormat:a,inHeight:c,inWidth:l,inChannels:h,outHeight:k,outWidth:$,outChannels:N,padInfo:v,strideHeight:m,strideWidth:b,filterHeight:d,filterWidth:f,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:g,inShape:t,outShape:C,filterShape:e}}function Ji(t,e,n,r,s,i=!1,o="channelsLast",a){let[u,c,l,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,c,l,h,d]=t;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,d,c,l,h]=t}const[f,p,m,,b]=e,[y,g,x]=Qi(n),[w,v,k]=Qi(r),$=to(f,w),N=to(p,v),C=to(m,k),{padInfo:E,outDepth:S,outHeight:A,outWidth:R}=function(t,e,n,r,s,i,o,a,u,c,l){let h,d,f,p;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const i=function(t,e,n,r,s,i){null==s&&(s=Yi(t,e,r));const o=t[0],a=t[1],u=t[2],c=eo((o-e+2*s)/r+1,i),l=eo((a-e+2*s)/r+1,i),h=eo((u-e+2*s)/r+1,i);return[c,l,h,n]}([e,n,r,1],a,1,s,t,l);d=i[0],f=i[1],p=i[2]}else if("same"===t){d=Math.ceil(e/s),f=Math.ceil(n/i),p=Math.ceil(r/o);const t=(d-1)*s+a-e,l=(f-1)*i+u-n,m=(p-1)*o+c-r,b=Math.floor(t/2),y=t-b,g=Math.floor(l/2),x=l-g,w=Math.floor(m/2);h={top:g,bottom:x,left:w,right:m-w,front:b,back:y,type:"SAME"}}else{if("valid"!==t)throw Error(`Unknown padding parameter: ${t}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-a+1)/s),f=Math.ceil((n-u+1)/i),p=Math.ceil((r-c+1)/o)}return{padInfo:h,outDepth:d,outHeight:f,outWidth:p}}(s,c,l,h,y,g,x,$,N,C,a),T=i?b*d:b;let O;return"channelsFirst"===o?O=[u,T,S,A,R]:"channelsLast"===o&&(O=[u,S,A,R,T]),{batchSize:u,dataFormat:o,inDepth:c,inHeight:l,inWidth:h,inChannels:d,outDepth:S,outHeight:A,outWidth:R,outChannels:T,padInfo:E,strideDepth:y,strideHeight:g,strideWidth:x,filterDepth:f,filterHeight:p,filterWidth:m,effectiveFilterDepth:$,effectiveFilterHeight:N,effectiveFilterWidth:C,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:t,outShape:O,filterShape:e}}function Yi(t,e,n,r=1){const s=to(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function Zi(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Qi(t){return"number"==typeof t?[t,t,t]:t}function to(t,e){return e<=1?t:t+(t-1)*(e-1)}function eo(t,e){if(!e)return Math.trunc(t);switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error(`Unknown roundingMode ${e}`)}}function no(t){const[e,n,r]=Zi(t);return 1===e&&1===n&&1===r}function ro(t,e){return no(t)||no(e)}function so(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error(`Unknown dataFormat ${t}`)}const io=os({reshape_:function(t,e){const n={x:ss(t,"x","reshape","string_or_numeric")},r={shape:e};return Jr.runKernel(xn,n,r)}});const oo=os({avgPool_:function(t,e,n,r,s){const i=ss(t,"x","avgPool","float32");R(ro(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=i,a=!1;3===i.rank&&(a=!0,o=io(i,[1,i.shape[0],i.shape[1],i.shape[2]])),R(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),null!=s&&R(M(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:o},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let l=Jr.runKernel(Rt,u,c);return l=qs(l,i.dtype),a?io(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const ao=os({avgPool3d_:function(t,e,n,r,s,i="NDHWC",o){null==o?o=[1,1,1]:Ri("dilations is deprecated, this field will be gone in v3.0.0.");const a=ss(t,"x","avgPool3d","float32");let u=a,c=!1;4===a.rank&&(c=!0,u=io(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),R(5===u.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`)),R("NDHWC"===i,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`)),R(ro(n,o),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`)),null!=s&&R(M(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:i,dilations:o};let d=Jr.runKernel(Ot,l,h);return d=qs(d,u.dtype),c?io(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const uo=os({batchNorm_:function(t,e,n,r,s,i){null==i&&(i=.001);const o=ss(t,"x","batchNorm"),a=ss(e,"mean","batchNorm"),u=ss(n,"variance","batchNorm");let c,l;null!=s&&(c=ss(s,"scale","batchNorm")),null!=r&&(l=ss(r,"offset","batchNorm")),R(a.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),R(null==l||a.rank===l.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),R(null==c||a.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(t){let e;return e=0===t.rank||1===t.rank?io(t,[1,1,1,t.size]):2===t.rank?io(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?io(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(o),scale:c,offset:l,mean:a,variance:u},d={varianceEpsilon:i},f=Jr.runKernel(we,h,d);return io(f,o.shape)}});const co=os({batchNorm2d_:function(t,e,n,r,s,i){const o=ss(t,"x","batchNorm"),a=ss(e,"mean","batchNorm"),u=ss(n,"variance","batchNorm");let c,l;return null!=s&&(c=ss(s,"scale","batchNorm")),null!=r&&(l=ss(r,"offset","batchNorm")),R(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),R(2===a.rank||1===a.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`)),R(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&R(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=l&&R(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`)),uo(o,a,u,l,c,i)}});const lo=os({batchNorm3d_:function(t,e,n,r,s,i){const o=ss(t,"x","batchNorm"),a=ss(e,"mean","batchNorm"),u=ss(n,"variance","batchNorm");let c,l;return null!=s&&(c=ss(s,"scale","batchNorm")),null!=r&&(l=ss(r,"offset","batchNorm")),R(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),R(3===a.rank||1===a.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`)),R(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&R(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=l&&R(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`)),uo(o,a,u,l,c,i)}});const ho=os({batchNorm4d_:function(t,e,n,r,s,i){const o=ss(t,"x","batchNorm"),a=ss(e,"mean","batchNorm"),u=ss(n,"variance","batchNorm");let c,l;return null!=s&&(c=ss(s,"scale","batchNorm")),null!=r&&(l=ss(r,"offset","batchNorm")),R(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),R(4===a.rank||1===a.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`)),R(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&R(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=l&&R(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`)),uo(o,a,u,l,c,i)}});const fo=os({clipByValue_:function(t,e,n){const r=ss(t,"x","clipByValue");R(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const s={x:r},i={clipValueMin:e,clipValueMax:n};return Jr.runKernel(Pt,s,i)}});const po=os({concat_:function(t,e=0){R(t.length>=1,(()=>"Pass at least one tensor to concat"));const n=is(t,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)})),1===n.length)return Xs(n[0]);const r=n,s={axis:e};return Jr.runKernel(Bt,r,s)}});const mo=os({concat1d_:function(t){return po(t,0)}});const bo=os({concat2d_:function(t,e){return po(t,e)}});const yo=os({concat3d_:function(t,e){return po(t,e)}});const go=os({concat4d_:function(t,e){return po(t,e)}});const xo=os({conv2d_:function(t,e,n,r,s="NHWC",i=[1,1],o){const a=ss(t,"x","conv2d"),u=ss(e,"filter","conv2d");let c=a,l=!1;3===a.rank&&(l=!0,c=io(a,[1,a.shape[0],a.shape[1],a.shape[2]])),R(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),R(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),null!=o&&R(M(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const h="NHWC"===s?c.shape[3]:c.shape[1];R(h===u.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`)),R(ro(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`));const d={x:c,filter:u},f={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:o},p=Jr.runKernel(Wt,d,f);return l?io(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const wo=os({conv1d_:function(t,e,n,r,s="NWC",i=1,o){const a=ss(t,"x","conv1d"),u=ss(e,"filter","conv1d");let c=a,l=!1;2===a.rank&&(l=!0,c=io(a,[1,a.shape[0],a.shape[1]])),R(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),R(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),null!=o&&R(M(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`)),R(c.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),R(ro(n,i),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${i}'`)),R("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=io(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=io(c,[c.shape[0],1,c.shape[1],c.shape[2]]),f=xo(d,h,[1,n],r,"NHWC",[1,i],o);return io(f,l?[f.shape[2],f.shape[3]]:[f.shape[0],f.shape[2],f.shape[3]])}});const vo=os({conv2DBackpropInput_:function(t,e,n,r,s,i="NHWC",o){R(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let a=t,u=e,c=!1;3===e.rank&&(c=!0,u=io(e,[1,e.shape[0],e.shape[1],e.shape[2]]),a=[1,t[0],t[1],t[2]]),R(4===a.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`)),R(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),R(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const l="NHWC"===i?a[3]:a[1],h="NHWC"===i?u.shape[3]:u.shape[1];R(l===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[2]}.`)),R(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=o&&R(M(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const d={dy:u,filter:n},f={strides:r,pad:s,dataFormat:i,dimRoundingMode:o,inputShape:a},p=Jr.runKernel(Gt,d,f);return c?io(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const ko=os({conv2dTranspose_:function(t,e,n,r,s,i){const o=ss(t,"x","conv2dTranspose"),a=ss(e,"filter","conv2dTranspose");return vo(n,o,a,r,s,"NHWC",i)}});const $o=os({conv3d_:function(t,e,n,r,s="NDHWC",i=[1,1,1]){const o=ss(t,"x","conv3d"),a=ss(e,"filter","conv3d");let u=o,c=!1;4===o.rank&&(c=!0,u=io(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),R(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),R(5===a.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`)),R(u.shape[4]===a.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${a.shape[3]}.`)),R(ro(n,i),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),R("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const l={x:u,filter:a},h={strides:n,pad:r,dataFormat:s,dilations:i},d=Jr.runKernel(jt,l,h);return c?io(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const No=os({depthwiseConv2d_:function(t,e,n,r,s="NHWC",i=[1,1],o){const a=ss(t,"x","depthwiseConv2d"),u=ss(e,"filter","depthwiseConv2d");let c=a,l=!1;3===a.rank&&(l=!0,c=io(a,[1,a.shape[0],a.shape[1],a.shape[2]])),R(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),R(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),R(c.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),null!=o&&R(M(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const h={x:c,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:o},f=Jr.runKernel(te,h,d);return l?io(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Co=os({floorDiv_:function(t,e){let n=ss(t,"a","floorDiv"),r=ss(e,"b","floorDiv");[n,r]=Ur(n,r);const s={a:n,b:r};return Jr.runKernel(xe,s)}});const Eo=os({div_:function(t,e){let n=ss(t,"a","div"),r=ss(e,"b","div");if([n,r]=Ur(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Co(n,r);const s={a:n,b:r};return Jr.runKernel(ae,s,{})}});const So=os({elu_:function(t){const e={x:ss(t,"x","elu")};return Jr.runKernel(ue,e)}});function Ao(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const i=n-1-s,o=t[i]||1;(e[e.length-1-s]||1)>1&&1===o&&r.unshift(i)}return r}function Ro(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],i=e.length-r-1,o=e[i];(null==s||1===s&&o>1)&&n.unshift(i)}return n}function To(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let i=e[e.length-s-1];if(null==i&&(i=1),1===r)n.unshift(i);else if(1===i)n.unshift(r);else{if(r!==i){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const Oo=os({equal_:function(t,e){let n=ss(t,"a","equal"),r=ss(e,"b","equal");[n,r]=Ur(n,r),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(he,s)}});const Fo=os({expandDims_:function(t,e=0){const n=ss(t,"x","expandDims","string_or_numeric");R(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:e};return Jr.runKernel(fe,r,s)}});const Io=os({tile_:function(t,e){const n=ss(t,"x","tile","string_or_numeric");R(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r={x:n},s={reps:e};return Jr.runKernel(Kn,r,s)}});const _o=os({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=Hs([t,e],r),i=t<=e?t:e;for(let t=0;t<i;++t)s.set(1,t,t);const o=io(s.toTensor(),[t,e]);if(null==n)return o;if(1===n.length)return Io(Fo(o,0),[n[0],1,1]);if(2===n.length)return Io(Fo(Fo(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Io(Fo(Fo(Fo(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Mo(t,e,n){const r={shape:t,value:e,dtype:n};return Jr.runKernel(be,{},r)}const Do=os({floor_:function(t){const e={x:ss(t,"x","floor")};return Jr.runKernel(ge,e)}});const Lo=os({gather_:function(t,e,n=0,r=0){const s={x:ss(t,"x","gather"),indices:ss(e,"indices","gather","int32")},i={axis:n,batchDims:r};return Jr.runKernel(ve,s,i)}});const Po=os({greater_:function(t,e){let n=ss(t,"a","greater"),r=ss(e,"b","greater");[n,r]=Ur(n,r),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel($e,s)}});const zo=os({greaterEqual_:function(t,e){let n=ss(t,"a","greaterEqual"),r=ss(e,"b","greaterEqual");[n,r]=Ur(n,r),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(Ne,s)}});const Vo=os({leakyRelu_:function(t,e=.2){const n={x:ss(t,"x","leakyRelu")},r={alpha:e};return Jr.runKernel(Oe,n,r)}});const Bo=os({log_:function(t){const e={x:ss(t,"x","log")};return Jr.runKernel(Me,e)}});const Wo=os({exp_:function(t){const e={x:ss(t,"x","exp")};return Jr.runKernel(de,e)}});const Uo=os({max_:function(t,e=null,n=!1){const r={x:ss(t,"x","max")},s={reductionIndices:e,keepDims:n};return Jr.runKernel(We,r,s)}});const Go=os({mul_:function(t,e){let n=ss(t,"a","mul"),r=ss(e,"b","mul");[n,r]=Ur(n,r);const s={a:n,b:r};return Jr.runKernel(en,s)}});const jo=os({sub_:function(t,e){let n=ss(t,"a","sub"),r=ss(e,"b","sub");[n,r]=Ur(n,r);const s={a:n,b:r};return Jr.runKernel(Gn,s)}});const Ho=os({sum_:function(t,e=null,n=!1){let r=ss(t,"x","sum");"bool"===r.dtype&&(r=qs(r,"int32"));const s={x:r},i={axis:e,keepDims:n};return Jr.runKernel(Pn,s,i)}});const qo=os({logSoftmax_:function(t,e=-1){const n=ss(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);return Pi(((t,n)=>{const r=Uo(t,e,!0),s=jo(t,r),i=jo(qs(s,"float32"),Bo(Ho(Wo(s),e,!0)));n([i]);return{value:i,gradFunc:(t,n)=>{const[r]=n,s=Wo(r);return jo(t,Go(Ho(t,e,!0),s))}}}))(n)}});const Xo=os({logicalAnd_:function(t,e){const n=ss(t,"a","logicalAnd","bool"),r=ss(e,"b","logicalAnd","bool");To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(Le,s)}});const Ko=os({maxPool_:function(t,e,n,r,s){const i=ss(t,"x","maxPool");let o=i,a=!1;3===i.rank&&(a=!0,o=io(i,[1,i.shape[0],i.shape[1],i.shape[2]])),R(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),R(ro(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&R(M(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:o},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s},l=Jr.runKernel(Ge,u,c);return a?io(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Jo=os({maxPool3d_:function(t,e=[1,1,1],n,r,s,i="NDHWC",o){null==o?o=[1,1,1]:Ri("dilations is deprecated, this field will be gone in v3.0.0.");const a=ss(t,"x","maxPool3d");let u=a,c=!1;4===a.rank&&(c=!0,u=io(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),R(5===u.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`)),R("NDHWC"===i,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`)),R(ro(n,o),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`)),null!=s&&R(M(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:i,dilations:o},d=Jr.runKernel(He,l,h);return c?io(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Yo=os({maximum_:function(t,e){let n=ss(t,"a","maximum"),r=ss(e,"b","maximum");[n,r]=Ur(n,r),"bool"===n.dtype&&(n=qs(n,"int32"),r=qs(r,"int32")),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(Ue,s)}});const Zo=os({mean_:function(t,e=null,n=!1){const r={x:ss(t,"x","mean")},s={axis:e,keepDims:n};return Jr.runKernel(Ke,r,s)}});const Qo=os({min_:function(t,e=null,n=!1){const r={x:ss(t,"x","min")},s={axis:e,keepDims:n};return Jr.runKernel(Je,r,s)}});const ta=os({minimum_:function(t,e){let n=ss(t,"a","minimum"),r=ss(e,"b","minimum");[n,r]=Ur(n,r),"bool"===n.dtype&&(n=qs(n,"int32"),r=qs(r,"int32")),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(Ye,s)}});function ea(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function na(t,e,n){const r=t.length+e.length,s=[];let i=0,o=0;for(let a=0;a<r;a++)-1===n.indexOf(a)?s.push(t[i++]):s.push(e[o++]);return s}function ra(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map((e=>t[e]))]}function sa(t,e){return na(t,e.map((t=>1)),e)}function ia(t,e,n){R(ea(e,n),(()=>`${t} supports only inner-most axes for now. Got axes ${e} and rank-${n} input.`))}function oa(t,e){if(ea(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((t=>n.push(t))),n}function aa(t){return t.map(((t,e)=>[e,t])).sort(((t,e)=>t[1]-e[1])).map((t=>t[0]))}function ua(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const ca=os({square_:function(t){const e=ss(t,"x","square");return Jr.runKernel("Square",{x:e},{})}});const la=os({moments_:function(t,e=null,n=!1){const r=V(e,(t=ss(t,"x","moments")).shape),s=Zo(t,r,n);let i=s.shape;n||(i=sa(s.shape,r));const o=ca(jo(qs(t,"float32"),io(s,i)));return{mean:s,variance:Zo(o,r,n)}}});const ha=os({neg_:function(t){const e={x:ss(t,"x","neg")};return Jr.runKernel(nn,e)}});const da=os({notEqual_:function(t,e){let n=ss(t,"a","notEqual"),r=ss(e,"b","notEqual");[n,r]=Ur(n,r),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(rn,s)}});const fa=os({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const s={indices:ss(t,"indices","oneHot","int32")},i={depth:e,onValue:n,offValue:r};return Jr.runKernel(cn,s,i)}});function pa(t,e="float32"){if("complex64"===e){const e=pa(t,"float32"),n=pa(t,"float32");return as(e,n)}const n=nt(I(t),e);return Jr.makeTensor(n,t,e)}function ma(t,e="float32"){if("complex64"===e){const e=ma(t,"float32"),n=pa(t,"float32");return as(e,n)}const n=et(I(t),e);return Jr.makeTensor(n,t,e)}const ba=os({onesLike_:function(t){const e={x:ss(t,"x","onesLike")};return Jr.runKernel(un,e)}});const ya=os({pad_:function(t,e,n=0){const r=ss(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},i={x:r};return Jr.runKernel(hn,i,s)}});const ga=os({prelu_:function(t,e){const n={x:ss(t,"x","prelu"),alpha:ss(e,"alpha","prelu")};return Jr.runKernel(fn,n)}});var xa=n(377);class wa{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const i=s||Math.random();this.random=xa.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,i;do{r=2*this.random()-1,s=2*this.random()-1,i=r*r+s*s}while(i>=1||0===i);const o=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*r*o,e=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class va{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=xa.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const ka=os({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const i=new wa(e,n,r,!1,s),o=Hs(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=i.nextValue();return o.toTensor()}});const $a=os({randomUniform_:function(t,e=0,n=1,r="float32",s){const i=Hs(t,r),o=new va(e,n,null,s);for(let t=0;t<i.values.length;t++)i.values[t]=o.nextValue();return i.toTensor()}});const Na=os({relu_:function(t){const e={x:ss(t,"x","relu")};return Jr.runKernel(gn,e)}});const Ca=os({reverse_:function(t,e){const n={x:ss(t,"x","reverse")},r={dims:e};return Jr.runKernel(Cn,n,r)}});const Ea=os({selu_:function(t){const e={x:ss(t,"x","selu")};return Jr.runKernel(Tn,e)}});const Sa=os({separableConv2d_:function(t,e,n,r,s,i=[1,1],o="NHWC"){const a=ss(t,"x","separableConv2d"),u=ss(e,"depthwiseFilter","separableConv2d"),c=ss(n,"pointwiseFilter","separableConv2d");let l=a,h=!1;if(3===a.rank&&(h=!0,l=io(a,[1,a.shape[0],a.shape[1],a.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");R(4===l.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`)),R(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),R(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),R(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),R(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const d=u.shape[2],f=u.shape[3];R(c.shape[2]===d*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*f}, but got ${c.shape[2]}.`));const p=No(l,u,r,s,o,i),m=xo(p,c,1,"valid",o);return h?io(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Aa=os({sigmoid_:function(t){const e={x:ss(t,"x","sigmoid")};return Jr.runKernel(Mn,e)}});const Ra=os({slice_:function(t,e,n){const r=ss(t,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},i={begin:e,size:n};return Jr.runKernel(On,s,i)}});const Ta=os({slice1d_:function(t,e,n){const r=ss(t,"x","slice1d");return R(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Ra(r,[e],[n])}});const Oa=os({slice2d_:function(t,e,n){const r=ss(t,"x","slice2d");return R(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Ra(r,e,n)}});const Fa=os({slice3d_:function(t,e,n){const r=ss(t,"x","slice3d");return R(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Ra(r,e,n)}});const Ia=os({slice4d_:function(t,e,n){const r=ss(t,"x","slice4d");return R(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Ra(r,e,n)}});const _a=os({softmax_:function(t,e=-1){const n=ss(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return Jr.runKernel(Bn,r,s)}});const Ma=os({softplus_:function(t){const e={x:ss(t,"x","softplus")};return Jr.runKernel(Dn,e)}});const Da=os({split_:function(t,e,n=0){const r={x:ss(t,"x","split")},s={numOrSizeSplits:e,axis:n};return Jr.runKernel(Vn,r,s)}});const La=os({sqrt_:function(t){const e={x:ss(t,"x","sqrt")};return Jr.runKernel(Ln,e)}});const Pa=os({squeeze_:function(t,e){const n=ss(t,"x","squeeze");return io(n,B(n.shape,e).newShape)}});const za=os({stack_:function(t,e=0){const n=is(t,"tensors","stack","string_or_numeric");R(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&R(e<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:e};return Jr.runKernel(ln,r,s)}});const Va=os({tanh_:function(t){const e={x:ss(t,"x","tanh")};return Jr.runKernel(Xn,e)}});function Ba(t,e){O(t);const n=es(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return us(t,null,n,e)}function Wa(t,e,n){if(O(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=es(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return us(t,e,r,n)}const Ua=os({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const i=new wa(e,n,r,!0,s),o=Hs(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=i.nextValue();return o.toTensor()}});const Ga=os({unstack_:function(t,e=0){const n=ss(t,"x","unstack","string_or_numeric");R(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:e};return Jr.runKernel(Qn,r,s)}});const ja=os({broadcastTo_:function(t,e){let n=ss(t,"broadcastTo","x");const r=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=io(n,t)}const s=n.shape,i=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])i[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===i.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return Xs(n);const o={x:n},a={reps:i};return Jr.runKernel(Kn,o,a)}});const Ha=os({where_:function(t,e,n){const r=ss(e,"a","where"),s=ss(n,"b","where"),i=ss(t,"condition","where","bool"),o=To(r.shape,s.shape),a=ja(r,o),u=ja(s,o);1===i.rank&&R(i.shape[0]===r.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==i.rank&&T(i.shape,u.shape,"Error in where: ");const c={condition:i,t:a,e:u};return Jr.runKernel(Rn,c)}});const qa=os({zerosLike_:function(t){const e={x:ss(t,"x","zerosLike")};return Jr.runKernel(er,e)}});const Xa=os({transpose_:function(t,e){const n=ss(t,"x","transpose");if(null==e&&(e=n.shape.map(((t,e)=>e)).reverse()),R(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`)),e.forEach((t=>{R(t>=0&&t<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${e}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return Jr.runKernel(Yn,r,s)}});const Ka=os({dropout_:function(t,e,n,r){const s=ss(t,"x","dropout");if(R("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),R(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof Ir?s.clone():s;const i=function(t,e){if(null==e)return t.shape.slice();if(_(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),o=1-e,a=Eo(Do(Wi($a(i,0,1,"float32",r),o)),o);return Go(s,a)}});const Ja=os({imag_:function(t){const e={input:ss(t,"input","imag")};return Jr.runKernel(Se,e)}});const Ya=os({real_:function(t){const e={input:ss(t,"input","real")};return Jr.runKernel(bn,e)}});const Za=os({fft_:function(t){R("complex64"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return Jr.runKernel(me,e)}});const Qa=os({rfft_:function(t,e){R("float32"===t.dtype,(()=>`The dtype for rfft() must be real value but got ${t.dtype}`));let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map((t=>0)),i=t.shape.map((t=>t));i[t.shape.length-1]=e,s=Ra(t,r,i),n=e}else if(null!=e&&e>n){const r=t.shape.map((t=>t));r[t.shape.length-1]=e-n,s=po([t,pa(r)],t.shape.length-1),n=e}else s=t;const i=qa(s),o=io(as(s,i),[r,n]),a=Za(o),u=Math.floor(n/2)+1,c=Ya(a),l=Ja(a),h=Da(c,[u,n-u],c.shape.length-1),d=Da(l,[u,n-u],l.shape.length-1),f=s.shape.slice();return f[s.shape.length-1]=u,io(as(h[0],d[0]),f)}});const tu=os({ifft_:function(t){R("complex64"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return Jr.runKernel(Ee,e)}});const eu=os({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=io(t,[n,e]);r=tu(s)}else{const s=[n,2*(e-1)],i=io(Ya(t),[n,e]),o=io(Ja(t),[n,e]),a=Ca(Ra(i,[0,1],[n,e-2]),1),u=Go(Ca(Ra(o,[0,1],[n,e-2]),1),zi(-1)),c=po([i,a],1),l=po([o,u],1),h=io(as(c,l),[s[0],s[1]]);r=tu(h)}if(r=Ya(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=io(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const nu=os({conv2DBackpropFilter_:function(t,e,n,r,s,i="NHWC",o){let a=t;3===t.rank&&(a=io(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=io(e,[1,e.shape[0],e.shape[1],e.shape[2]])),R(4===a.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`)),R(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),R(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===i?a.shape[3]:a.shape[1],l="NHWC"===i?u.shape[3]:u.shape[1];R(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),R(l===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${n[3]}).`)),null!=o&&R(M(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const h={x:a,dy:u},d={strides:r,pad:s,dataFormat:i,dimRoundingMode:o,filterShape:n};return Jr.runKernel(Ut,h,d)}});const ru=os({relu6_:function(t){const e={x:ss(t,"x","relu6")};return Jr.runKernel(Nn,e)}});const su=os({step_:function(t,e=0){const n={x:ss(t,"x","step")},r={alpha:e};return Jr.runKernel(nr,n,r)}});function iu(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Go(t,su(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function ou(t,e){let n=e;const r=Ro(t.shape,e.shape);return r.length>0&&(n=Ho(n,r)),io(n,t.shape)}function au(t,e,n,r){if("linear"===e)return t;if("relu"===e)return Na(t);if("elu"===e)return So(t);if("relu6"===e)return ru(t);if("prelu"===e)return ga(t,n);if("leakyrelu"===e)return Vo(t,r);throw new Error(`Unknown fused activation ${e}.`)}const uu=(t,e)=>!(t>0)||"linear"===e;const cu=os({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:i=[1,1],dimRoundingMode:o,bias:a,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:l}){if(u=u||"linear",!1===uu(Jr.state.gradientDepth,u)){let h=xo(t,e,n,r,s,i,o);return null!=a&&(h=Wi(h,a)),au(h,u,c,l)}const h=ss(t,"x","conv2d"),d=ss(e,"filter","conv2d");let f=h,p=!1;3===h.rank&&(p=!0,f=io(h,[1,h.shape[0],h.shape[1],h.shape[2]])),R(4===f.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`)),R(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),null!=o&&R(M(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`)),R(f.shape[3]===d.shape[2],(()=>`Error in conv2d: depth of input (${f.shape[3]}) must match input depth for filter ${d.shape[2]}.`)),R(ro(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),R("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const m=Ki(f.shape,d.shape,n,i,r,o);let b,y;null!=a&&(b=ss(a,"bias","fused conv2d"),[b]=Ur(b,h),To(m.outShape,b.shape)),null!=c&&(y=ss(c,"prelu weights","fused conv2d"));const g=(t,e)=>{const[s,o,a,c]=e,l=iu(t,a,u);R(no(i),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`));const h=[vo(o.shape,l,s,n,r),nu(o,l,s.shape,n,r)];if(null!=c){const t=ou(c,l);h.push(t)}return h},x={x:f,filter:d,bias:b,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==a){return Pi(((t,e,n)=>{let r=Jr.runKernel(or,x,w);return n([e,t,r]),p&&(r=io(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:g}}))(f,d)}return Pi(((t,e,n,r)=>{let s=Jr.runKernel(or,x,w);return r([e,t,s,n]),p&&(s=io(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:g}}))(f,d,b)}});const lu=os({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r,s,i=[1,1],o){let a=t;3===t.rank&&(a=io(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=io(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const c={x:a,dy:u},l={strides:r,pad:s,dimRoundingMode:o,dilations:i,filterShape:n};return Jr.runKernel(ee,c,l)}});const hu=os({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r,s,i=[1,1],o){let a=e,u=!1;3===e.rank&&(u=!0,a=io(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const c={dy:a,filter:n},l={strides:r,pad:s,dimRoundingMode:o,dilations:i,inputShape:t},h=Jr.runKernel(ne,c,l);return u?io(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const du=os({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:i=[1,1],dimRoundingMode:o,bias:a,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:l}){if(!1===uu(Jr.state.gradientDepth,u)){let h=No(t,e,n,r,s,i,o);return null!=a&&(h=Wi(h,a)),au(h,u,c,l)}const h=ss(t,"x","depthwiseConv2d"),d=ss(e,"filter","depthwiseConv2d");let f=h,p=!1;3===h.rank&&(p=!0,f=io(h,[1,h.shape[0],h.shape[1],h.shape[2]])),R(4===f.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`)),R(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),R(f.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==i&&(i=[1,1]),R(ro(n,i),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=o&&R(M(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${o} but got pad ${r}.`));const m=Ki(f.shape,d.shape,n,i,r,o,!0);let b,y;null!=a&&(b=ss(a,"bias","fused conv2d"),[b]=Ur(b,h),To(m.outShape,b.shape)),null!=c&&(y=ss(c,"prelu weights","fused depthwiseConv2d"));const g=(t,e)=>{R(no(i),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[s,a,c,l]=e,h=iu(t,c,u),d=hu(a.shape,h,s,n,r,i,o),f=lu(a,h,s.shape,n,r,i,o);if(null!=l){return[d,f,ou(b,h)]}return[d,f]},x={x:f,filter:d,bias:b,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==a){return Pi(((t,e,n)=>{let r=Jr.runKernel(ar,x,w);return n([e,t,r]),p&&(r=io(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:g}}))(f,d)}return Pi(((t,e,n,r)=>{let s=Jr.runKernel(ar,x,w);return r([e,t,s,n]),p&&(s=io(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:g}}))(f,d,b)}});const fu=os({matMul_:function(t,e,n=!1,r=!1){let s=ss(t,"a","matMul"),i=ss(e,"b","matMul");[s,i]=Ur(s,i);const o={a:s,b:i},a={transposeA:n,transposeB:r};return Jr.runKernel(It,o,a)}});const pu=os({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:i="linear",preluActivationWeights:o,leakyreluAlpha:a}){if(!1===uu(Jr.state.gradientDepth,i)){let u=fu(t,e,n,r);return null!=s&&(u=Wi(u,s)),au(u,i,o,a)}let u=ss(t,"a","fused matMul"),c=ss(e,"b","fused matMul");[u,c]=Ur(u,c);const l=n?u.shape[u.rank-2]:u.shape[u.rank-1],h=r?c.shape[c.rank-1]:c.shape[c.rank-2],d=n?u.shape[u.rank-1]:u.shape[u.rank-2],f=r?c.shape[c.rank-2]:c.shape[c.rank-1],p=u.shape.slice(0,-2),m=c.shape.slice(0,-2),b=I(p),y=I(m);R(u.rank>=2&&c.rank>=2&&u.rank===c.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${u.rank} and ${c.rank}.`)),R(_(p,m),(()=>`Error in fused matMul: outer dimensions (${p}) and (${m}) of Tensors with shapes ${u.shape} and ${c.shape} must match.`)),R(l===h,(()=>`Error in fused matMul: inner shapes (${l}) and (${h}) of Tensors with shapes ${u.shape} and ${c.shape} and transposeA=${n} and transposeB=${r} must match.`));const g=u.shape.slice(0,-2).concat([d,f]),x=io(u,n?[b,l,d]:[b,d,l]),w=io(c,r?[y,f,h]:[y,h,f]);let v,k;null!=s&&(v=ss(s,"bias","fused matMul"),[v]=Ur(v,u),To(g,v.shape)),null!=o&&(k=ss(o,"prelu weights","fused matMul"));const $=(t,e)=>{const[o,a,u,c]=e,l=iu(io(t,u.shape),u,i);let h,d;if(n||r?!n&&r?(h=fu(l,a,!1,!1),d=fu(l,o,!0,!1)):n&&!r?(h=fu(a,l,!1,!0),d=fu(o,l,!1,!1)):(h=fu(a,l,!0,!0),d=fu(l,o,!0,!0)):(h=fu(l,a,!1,!0),d=fu(o,l,!0,!1)),null!=s){return[h,d,ou(c,l)]}return[h,d]},N={a:x,b:w,bias:v,preluActivationWeights:k},C={transposeA:n,transposeB:r,activation:i,leakyreluAlpha:a};if(null==s){return Pi(((t,e,n)=>{const r=Jr.runKernel(ir,N,C);return n([t,e,r]),{value:io(r,g),gradFunc:$}}))(x,w)}return Pi(((t,e,n,r)=>{const s=Jr.runKernel(ir,N,C);return r([t,e,s,n]),{value:io(s,g),gradFunc:$}}))(x,w,v)}});function mu(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let i=0;i<t;++i){const o=2*Math.PI*i/(t+r-1);s[i]=e-n*Math.cos(o)}return Ba(s,"float32")}os({hammingWindow_:function(t){return mu(t,.54,.46)}});const bu=os({hannWindow_:function(t){return mu(t,.5,.5)}});const yu=os({frame_:function(t,e,n,r=!1,s=0){let i=0;const o=[];for(;i+e<=t.size;)o.push(Ra(t,i,e)),i+=n;if(r)for(;i<t.size;){const r=i+e-t.size,a=po([Ra(t,i,e-r),Mo([r],s)]);o.push(a),i+=n}return 0===o.length?Wa([],[0,e]):io(po(o),[o.length,e])}});os({stft_:function(t,e,n,r,s=bu){var i;null==r&&(i=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));const o=yu(t,e,n),a=Go(o,s(e)),u=[];for(let t=0;t<o.shape[0];t++)u.push(Qa(Ra(a,[t,0],[1,e]),r));return po(u)}});const gu=os({cropAndResize_:function(t,e,n,r,s="bilinear",i=0){const o=ss(t,"image","cropAndResize"),a=ss(e,"boxes","cropAndResize","float32"),u=ss(n,"boxInd","cropAndResize","int32"),c=a.shape[0];R(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),R(2===a.rank&&4===a.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`)),R(1===u.rank&&u.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`)),R(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),R(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),R("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const l={image:o,boxes:a,boxInd:u},h={method:s,extrapolationValue:i,cropSize:r};return Jr.runKernel(Yt,l,h)}});const xu=os({flipLeftRight_:function(t){const e=ss(t,"image","flipLeftRight","float32");R(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return Jr.runKernel(ye,n,{})}});const wu=os({rotateWithOffset_:function(t,e,n=0,r=.5){const s=ss(t,"image","rotateWithOffset","float32");R(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const i={image:s},o={radians:e,fillValue:n,center:r};return Jr.runKernel(sr,i,o)}});function vu(t,e,n,r,s,i){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==i&&(i=0);const o=t.shape[0];return n=Math.min(n,o),R(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),R(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),R(4===t.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`)),R(1===e.rank,(()=>"scores must be a 1D tensor")),R(e.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${e.shape[0]}`)),R(0<=i&&i<=1,(()=>`softNmsSigma must be in [0, 1], but was '${i}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:i}}const ku=os({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const i=ss(t,"boxes","nonMaxSuppression"),o=ss(e,"scores","nonMaxSuppression"),a=vu(i,o,n,r,s),u={maxOutputSize:n=a.maxOutputSize,iouThreshold:r=a.iouThreshold,scoreThreshold:s=a.scoreThreshold};return Jr.runKernel(sn,{boxes:i,scores:o},u)}});function $u(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,i=0,o=!1;for(;r<s;){i=r+(s-r>>>1);const a=n(e,t[i]);a>0?r=i+1:(s=i,o=!a)}return o?r:-r-1}(t,e,n||Nu)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Nu(t,e){return t>e?1:t<e?-1:0}function Cu(t,e,n,r,s){return Au(t,e,n,r,s,0)}function Eu(t,e,n,r,s,i){return Au(t,e,n,r,s,0,!1,i,!0)}function Su(t,e,n,r,s,i){return Au(t,e,n,r,s,i,!0)}function Au(t,e,n,r,s,i,o=!1,a=!1,u=!1){const c=[];for(let t=0;t<e.length;t++)e[t]>s&&c.push({score:e[t],boxIndex:t,suppressBeginIndex:0});c.sort(Ou);const l=i>0?-.5/i:0,h=[],d=[];for(;h.length<n&&c.length>0;){const e=c.pop(),{score:n,boxIndex:i,suppressBeginIndex:o}=e;if(n<s)break;let a=!1;for(let n=h.length-1;n>=o;--n){const o=Ru(t,i,h[n]);if(o>=r){a=!0;break}if(e.score=e.score*Tu(r,l,o),e.score<=s)break}e.suppressBeginIndex=h.length,a||(e.score===n?(h.push(i),d.push(e.score)):e.score>s&&$u(c,e,Ou))}const f=h.length,p=n-f;a&&p>0&&(h.push(...new Array(p).fill(0)),d.push(...new Array(p).fill(0)));const m={selectedIndices:h};return o&&(m.selectedScores=d),u&&(m.validOutputs=f),m}function Ru(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),i=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),a=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(s[0],s[2]),l=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),f=(a-i)*(u-o),p=(h-c)*(d-l);if(f<=0||p<=0)return 0;const m=Math.max(i,c),b=Math.max(o,l),y=Math.min(a,h),g=Math.min(u,d),x=Math.max(y-m,0)*Math.max(g-b,0);return x/(f+p-x)}function Tu(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function Ou(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const Fu=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const i=ss(t,"boxes","nonMaxSuppressionAsync"),o=ss(e,"scores","nonMaxSuppressionAsync"),a=vu(i,o,n,r,s);n=a.maxOutputSize,r=a.iouThreshold,s=a.scoreThreshold;const u=await Promise.all([i.data(),o.data()]),c=u[0],l=u[1],{selectedIndices:h}=Cu(c,l,n,r,s);return i!==t&&i.dispose(),o!==e&&o.dispose(),Ba(h,"int32")};const Iu=os({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=0){const o=ss(t,"boxes","nonMaxSuppression"),a=ss(e,"scores","nonMaxSuppression"),u=vu(o,a,n,r,s,i),c={boxes:o,scores:a},l={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:i=u.softNmsSigma},h=Jr.runKernel(an,c,l);return{selectedIndices:h[0],selectedScores:h[1]}}});const _u=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=0){const o=ss(t,"boxes","nonMaxSuppressionAsync"),a=ss(e,"scores","nonMaxSuppressionAsync"),u=vu(o,a,n,r,s,i);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,i=u.softNmsSigma;const c=await Promise.all([o.data(),a.data()]),l=c[0],h=c[1],{selectedIndices:d,selectedScores:f}=Su(l,h,n,r,s,i);return o!==t&&o.dispose(),a!==e&&a.dispose(),{selectedIndices:Ba(d,"int32"),selectedScores:Ba(f)}};const Mu=os({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=!1){const o=ss(t,"boxes","nonMaxSuppression"),a=ss(e,"scores","nonMaxSuppression"),u=vu(o,a,n,r,s,null),c={boxes:o,scores:a},l={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:i},h=Jr.runKernel(on,c,l);return{selectedIndices:h[0],validOutputs:h[1]}}});const Du=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=!1){const o=ss(t,"boxes","nonMaxSuppressionAsync"),a=ss(e,"scores","nonMaxSuppressionAsync"),u=vu(o,a,n,r,s,null),c=u.maxOutputSize,l=u.iouThreshold,h=u.scoreThreshold,[d,f]=await Promise.all([o.data(),a.data()]),{selectedIndices:p,validOutputs:m}=Eu(d,f,c,l,h,i);return o!==t&&o.dispose(),a!==e&&a.dispose(),{selectedIndices:Ba(p,"int32"),validOutputs:zi(m,"int32")}};const Lu=os({resizeBilinear_:function(t,e,n=!1,r=!1){const s=ss(t,"images","resizeBilinear");R(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),R(2===e.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`)),R(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let i=s,o=!1;3===s.rank&&(o=!0,i=io(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=e,a={images:i},u={alignCorners:n,halfPixelCenters:r,size:e},c=Jr.runKernel(kn,a,u);return o?io(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Pu=os({resizeNearestNeighbor_:function(t,e,n=!1,r=!1){const s=ss(t,"images","resizeNearestNeighbor");R(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),R(2===e.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`)),R("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),R(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let i=s,o=!1;3===s.rank&&(o=!0,i=io(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=e,a={images:i},u={alignCorners:n,halfPixelCenters:r,size:e},c=Jr.runKernel(wn,a,u);return o?io(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const zu=os({lessEqual_:function(t,e){let n=ss(t,"a","lessEqual"),r=ss(e,"b","lessEqual");[n,r]=Ur(n,r),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(Ie,s)}});function Vu(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return Jr.runKernel(mn,{},s)}const Bu=os({bandPart_:function(t,e,n){R(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),R(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=ss(t,"a","bandPart");R(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[i,o]=r.shape.slice(-2);if(!(e<=i))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${i}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);e<0&&(e=i),n<0&&(n=o);const a=io(Vu(0,i,1,"int32"),[-1,1]),u=Vu(0,o,1,"int32"),c=jo(a,u),l=Xo(zu(c,zi(+e,"int32")),zo(c,zi(-n,"int32"))),h=pa([i,o],r.dtype);return io(za(Ga(io(r,[-1,i,o])).map((t=>Ha(l,t,h)))),s)}});const Wu=os({pow_:function(t,e){let n=ss(t,"base","pow"),r=ss(e,"exp","pow");[n,r]=Ur(n,r);const s={a:n,b:r};return Jr.runKernel(dn,s)}});function Uu(t,e,n=null){if(0===t.rank)return Bi(t);if(1!==t.rank&&null===n)return Uu(io(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return Ho(Bi(t),n);if(e===1/0)return Uo(Bi(t),n);if(e===-1/0)return Qo(Bi(t),n);if("euclidean"===e||2===e)return La(Ho(Wu(Bi(t),zi(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(n)&&2===n.length){if(1===e)return Uo(Ho(Bi(t),n[0]),n[1]-1);if(e===1/0)return Uo(Ho(Bi(t),n[1]),n[0]);if(e===-1/0)return Qo(Ho(Bi(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return La(Ho(ca(t),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Gu=os({norm_:function(t,e="euclidean",n=null,r=!1){const s=Uu(t=ss(t,"x","norm"),e,n);let i=s.shape;if(r){const e=V(n,t.shape);i=sa(s.shape,e)}return io(s,i)}});const ju=os({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,R(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)R(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=Da(t,t.shape[0],0).map((t=>Pa(t,[0])));R(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let e=0;e<t.length;++e)n.push(Jr.tidy((()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=Go(Ho(Go(n[r],t)),n[r]);t=jo(t,e)}return Eo(t,Gu(t,"euclidean"))})));return e?za(n,0):n}});function Hu(t,e=!1){return Jr.tidy((()=>{R(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let s=_o(n),i=Xs(t);const o=Wa([[1]],[1,1]);let a=Xs(o);const u=n>=r?r:n;for(let t=0;t<u;++t){const e=i,u=a,c=s;[a,i,s]=Jr.tidy((()=>{const e=Ra(i,[t,t],[n-t,1]),u=Gu(e),c=Ra(i,[t,t],[1,1]),l=Ha(Po(c,0),Wa([[-1]]),Wa([[1]])),h=jo(c,Go(l,u)),d=Eo(e,h);a=1===d.shape[0]?Xs(o):po([o,Ra(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const f=ha(Eo(fu(l,h),u)),p=Ra(i,[t,0],[n-t,r]),m=Go(f,a),b=Xa(a);if(0===t)i=jo(p,fu(m,fu(b,p)));else{const e=jo(p,fu(m,fu(b,p)));i=po([Ra(i,[0,0],[t,r]),e],0)}const y=Xa(m),g=Ra(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=jo(g,fu(fu(g,a),y));else{const e=jo(g,fu(fu(g,a),y));s=po([Ra(s,[0,0],[n,t]),e],1)}return[a,i,s]})),Ii([e,u,c])}return!e&&n>r&&(s=Ra(s,[0,0],[n,r]),i=Ra(i,[0,0],[r,r])),[s,i]}))}const qu=os({qr_:function(t,e=!1){if(R(t.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`)),2===t.rank)return Hu(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=Ga(io(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],i=[];r.forEach((t=>{const[n,r]=Hu(t,e);s.push(n),i.push(r)}));return[io(za(s,0),t.shape),io(za(i,0),t.shape)]}}});var Xu;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Xu||(Xu={}));const Ku=os({computeWeightedLoss_:function(t,e,n=Xu.SUM_BY_NONZERO_WEIGHTS){const r=ss(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=ss(e,"weights","computeWeightedLoss"));const i=null==s?r:Go(r,s);if(n===Xu.NONE)return i;if(n===Xu.SUM)return Ho(i);if(n===Xu.MEAN){if(null==s)return Zo(i);{const t=r.size/s.size,e=Eo(Ho(i),Ho(s));return t>1?Eo(e,zi(t)):e}}if(n===Xu.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Eo(Ho(i),zi(r.size));{const t=Go(s,ma(r.shape)),e=qs(Ho(da(t,zi(0))),"float32");return Eo(Ho(i),e)}}throw Error(`Unknown reduction: ${n}`)}});os({absoluteDifference_:function(t,e,n,r=Xu.SUM_BY_NONZERO_WEIGHTS){const s=ss(t,"labels","absoluteDifference"),i=ss(e,"predictions","absoluteDifference");let o=null;null!=n&&(o=ss(n,"weights","absoluteDifference")),T(s.shape,i.shape,"Error in absoluteDifference: ");const a=Bi(jo(s,i));return Ku(a,o,r)}});os({cosineDistance_:function(t,e,n,r,s=Xu.SUM_BY_NONZERO_WEIGHTS){const i=ss(t,"labels","cosineDistance"),o=ss(e,"predictions","cosineDistance");let a=null;null!=r&&(a=ss(r,"weights","cosineDistance")),T(i.shape,o.shape,"Error in cosineDistance: ");const u=zi(1),c=jo(u,Ho(Go(i,o),n,!0));return Ku(c,a,s)}});os({hingeLoss_:function(t,e,n,r=Xu.SUM_BY_NONZERO_WEIGHTS){let s=ss(t,"labels","hingeLoss");const i=ss(e,"predictions","hingeLoss");let o=null;null!=n&&(o=ss(n,"weights","hingeLoss")),T(s.shape,i.shape,"Error in hingeLoss: ");const a=zi(1);s=jo(Go(zi(2),s),a);const u=Na(jo(a,Go(s,i)));return Ku(u,o,r)}});os({huberLoss_:function(t,e,n,r=1,s=Xu.SUM_BY_NONZERO_WEIGHTS){const i=ss(t,"labels","huberLoss"),o=ss(e,"predictions","huberLoss");let a=null;null!=n&&(a=ss(n,"weights","huberLoss")),T(i.shape,o.shape,"Error in huberLoss: ");const u=zi(r),c=Bi(jo(o,i)),l=ta(c,u),h=jo(c,l),d=Wi(Go(zi(.5),ca(l)),Go(u,h));return Ku(d,a,s)}});os({logLoss_:function(t,e,n,r=1e-7,s=Xu.SUM_BY_NONZERO_WEIGHTS){const i=ss(t,"labels","logLoss"),o=ss(e,"predictions","logLoss");let a=null;null!=n&&(a=ss(n,"weights","logLoss")),T(i.shape,o.shape,"Error in logLoss: ");const u=zi(1),c=zi(r),l=ha(Go(i,Bo(Wi(o,c)))),h=Go(jo(u,i),Bo(Wi(jo(u,o),c))),d=jo(l,h);return Ku(d,a,s)}});const Ju=os({squaredDifference_:function(t,e){let n=ss(t,"a","squaredDifference"),r=ss(e,"b","squaredDifference");[n,r]=Ur(n,r),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(Wn,s,{})}});os({meanSquaredError_:function(t,e,n,r=Xu.SUM_BY_NONZERO_WEIGHTS){const s=ss(t,"labels","meanSquaredError"),i=ss(e,"predictions","meanSquaredError");let o=null;null!=n&&(o=ss(n,"weights","meanSquaredError")),T(s.shape,i.shape,"Error in meanSquaredError: ");const a=Ju(s,i);return Ku(a,o,r)}});const Yu=os({log1p_:function(t){const e={x:ss(t,"x","log1p")};return Jr.runKernel(De,e)}});os({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Xu.SUM_BY_NONZERO_WEIGHTS){let i=ss(t,"multiClassLabels","sigmoidCrossEntropy");const o=ss(e,"logits","sigmoidCrossEntropy");let a=null;if(null!=n&&(a=ss(n,"weights","sigmoidCrossEntropy")),T(i.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=zi(r),e=zi(1),n=zi(.5);i=Wi(Go(i,jo(e,t)),Go(n,t))}const u=function(t,e){const n=ss(t,"labels","sigmoidCrossEntropyWithLogits"),r=ss(e,"logits","sigmoidCrossEntropyWithLogits");T(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Na(r),i=Go(r,n),o=Yu(Wo(ha(Bi(r))));return Wi(jo(s,i),o)}(i,o);return Ku(u,a,s)}});const Zu=os({logSumExp_:function(t,e=null,n=!1){const r=ss(t,"x","logSumExp"),s=V(e,r.shape),i=Uo(r,s,!0),o=jo(r,i),a=Wo(o),u=Ho(a,s),c=Bo(u),l=Wi(io(i,c.shape),c);if(n){const t=sa(l.shape,s);return io(l,t)}return l}});os({softmaxCrossEntropy_:function(t,e,n,r=0,s=Xu.SUM_BY_NONZERO_WEIGHTS){let i=ss(t,"onehotLabels","softmaxCrossEntropy");const o=ss(e,"logits","softmaxCrossEntropy");let a=null;if(null!=n&&(a=ss(n,"weights","softmaxCrossEntropy")),T(i.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const t=zi(r),e=zi(1),n=zi(i.shape[1]);i=Wi(Go(i,jo(e,t)),Eo(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);return Pi(((t,e,r)=>{const s=Zu(e,[n],!0),i=jo(qs(e,"float32"),s);r([t,i]);const o=ha(Go(i,t));return{value:Ho(o,[n]),gradFunc:(t,e)=>{const[r,s]=e,i=sa(t.shape,[n]);return[Go(io(t,i),jo(qs(r,"float32"),Wo(s))),Go(io(t,i),jo(Wo(s),qs(r,"float32")))]}}}))(t,e)}(i,o);return Ku(u,a,s)}});const Qu={flipLeftRight:xu,resizeNearestNeighbor:Pu,resizeBilinear:Lu,rotateWithOffset:wu,cropAndResize:gu,nonMaxSuppression:ku,nonMaxSuppressionAsync:Fu,nonMaxSuppressionWithScore:Iu,nonMaxSuppressionWithScoreAsync:_u,nonMaxSuppressionPadded:Mu,nonMaxSuppressionPaddedAsync:Du},tc={bandPart:Bu,gramSchmidt:ju,qr:qu};class ec extends Vi{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Jr.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Jr.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${e}/accum_grad`,variable:Fi((()=>qa(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${e}/accum_var`,variable:Fi((()=>qa(r).variable(false)))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const i=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Fi((()=>{const t=Wi(Go(i,this.rho),Go(ca(s),1-this.rho)),e=Go(Eo(La(Wi(o,this.epsilon)),La(Wi(i,this.epsilon))),s),n=Wi(Go(o,this.rho),Go(ca(e),1-this.rho));i.assign(t),o.assign(n);const a=Wi(Go(e,-this.learningRate),r);r.assign(a)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ii(this.accumulatedGrads.map((t=>t.variable))),Ii(this.accumulatedUpdates.map((t=>t.variable))))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedUpdates=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}ec.className="Adadelta",Ai(ec);class nc extends Vi{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Jr.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:`${e}/accumulator`,variable:Fi((()=>Mo(r.shape,this.initialAccumulatorValue).variable(t)))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const i=this.accumulatedGrads[n].variable;Fi((()=>{const t=Wi(i,ca(s));i.assign(t);const e=Wi(Go(Eo(s,La(Wi(t,Jr.backend.epsilon()))),-this.learningRate),r);r.assign(e)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ii(this.accumulatedGrads.map((t=>t.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}nc.className="Adagrad",Ai(nc);class rc extends Vi{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Fi((()=>{this.accBeta1=zi(e).variable(),this.accBeta2=zi(n).variable()})),null==r&&(this.epsilon=Jr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Fi((()=>{const n=jo(1,this.accBeta1),r=jo(1,this.accBeta2);e.forEach(((e,s)=>{const i=Jr.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:Fi((()=>qa(i).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${e}/v`,variable:Fi((()=>qa(i).variable(false)))});const o=Array.isArray(t)?t[s].tensor:t[e];if(null==o)return;const a=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,c=Wi(Go(a,this.beta1),Go(o,1-this.beta1)),l=Wi(Go(u,this.beta2),Go(ca(o),1-this.beta2)),h=Eo(c,n),d=Eo(l,r);a.assign(c),u.assign(l);const f=Wi(Go(Eo(h,Wi(La(d),this.epsilon)),-this.learningRate),i);i.assign(f)})),this.accBeta1.assign(Go(this.accBeta1,this.beta1)),this.accBeta2.assign(Go(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ii(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedSecondMoment&&Ii(this.accumulatedSecondMoment.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),Fi((()=>{this.accBeta1.assign(Wu(this.beta1,this.iterations_+1)),this.accBeta2.assign(Wu(this.beta2,this.iterations_+1))}));const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedSecondMoment=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}rc.className="Adam",Ai(rc);class sc extends Vi{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Fi((()=>{this.iteration=zi(0).variable(),this.accBeta1=zi(e).variable()})),null==r&&(this.epsilon=Jr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Fi((()=>{const n=jo(1,this.accBeta1),r=Eo(-this.learningRate,Wi(Go(this.iteration,this.decay),1));e.forEach(((e,s)=>{const i=Jr.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:qa(i).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${e}/v`,variable:qa(i).variable(false)});const o=Array.isArray(t)?t[s].tensor:t[e];if(null==o)return;const a=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,c=Wi(Go(a,this.beta1),Go(o,1-this.beta1)),l=Go(u,this.beta2),h=Bi(o),d=Yo(l,h);a.assign(c),u.assign(d);const f=Wi(Go(Eo(r,n),Eo(c,Wi(d,this.epsilon))),i);i.assign(f)})),this.iteration.assign(Wi(this.iteration,1)),this.accBeta1.assign(Go(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ii(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedWeightedInfNorm&&Ii(this.accumulatedWeightedInfNorm.map((t=>t.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}sc.className="Adamax",Ai(sc);class ic extends Vi{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=Jr.registeredVariables[e];Fi((()=>{const t=Wi(Go(this.c,r),s);s.assign(t)}))})),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=_i(zi(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}ic.className="SGD",Ai(ic);class oc extends ic{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=zi(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Jr.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:`${e}/momentum`,variable:Fi((()=>qa(r).variable(t)))}}const s=this.accumulations[n].variable,i=Array.isArray(t)?t[n].tensor:t[e];null!=i&&Fi((()=>{let t;const e=Wi(Go(this.m,s),i);t=this.useNesterov?Wi(Go(this.c,Wi(i,Go(e,this.m))),r):Wi(Go(this.c,e),r),s.assign(e),r.assign(t)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ii(this.accumulations.map((t=>t.variable)))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}oc.className="Momentum",Ai(oc);class ac extends Vi{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Jr.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Jr.registeredVariables[e],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${e}/rms`,variable:Fi((()=>qa(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${e}/momentum`,variable:Fi((()=>qa(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${e}/mg`,variable:Fi((()=>qa(r).variable(s)))});const i=Array.isArray(t)?t[n].tensor:t[e];if(null==i)return;const o=this.accumulatedMeanSquares[n].variable,a=this.accumulatedMoments[n].variable;Fi((()=>{const t=Wi(Go(o,this.decay),Go(ca(i),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,s=Wi(Go(e,this.decay),Go(i,1-this.decay)),u=Eo(Go(i,this.learningRate),La(jo(t,Wi(ca(s),this.epsilon)))),c=Wi(Go(a,this.momentum),u);o.assign(t),e.assign(s),a.assign(c);const l=jo(r,c);r.assign(l)}else{const t=Wi(Go(o,this.decay),Go(ca(i),1-this.decay)),e=Wi(Go(a,this.momentum),Eo(Go(i,this.learningRate),La(Wi(t,this.epsilon))));o.assign(t),a.assign(e);const n=jo(r,e);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ii(this.accumulatedMeanSquares.map((t=>t.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Ii(this.accumulatedMeanGrads.map((t=>t.variable))),null!=this.accumulatedMoments&&Ii(this.accumulatedMoments.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.accumulatedMoments=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}ac.className="RMSProp",Ai(ac);class uc{static sgd(t){return new ic(t)}static momentum(t,e,n=!1){return new oc(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new ac(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new rc(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new ec(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new sc(t,e,n,r,s)}static adagrad(t,e=.1){return new nc(t,e)}}const cc={sgd:uc.sgd,momentum:uc.momentum,adadelta:uc.adadelta,adagrad:uc.adagrad,rmsprop:uc.rmsprop,adamax:uc.adamax,adam:uc.adam},lc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function hc(){return new Promise((t=>lc((()=>t()))))}function dc(t,e){const n=t[0].length;t.forEach(((t,e)=>{R(t.length===n,(()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`))})),R(e>=0&&e<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=t[0];t.forEach(((t,s)=>{for(let i=0;i<n;i++)R(i===e||t[i]===r[i],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function fc(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const pc=30;function mc(t){return t<=pc?t:Y(t,Math.floor(Math.sqrt(t)))}function bc(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function yc(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function gc(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function xc(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function wc(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function vc(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const kc=1.7580993408473768,$c=1.0507009873554805,Nc=.3275911,Cc=.254829592,Ec=-.284496736,Sc=1.421413741,Ac=-1.453152027,Rc=1.061405429;function Tc(...t){lt().getBool("IS_TEST")||console.warn(...t)}function Oc(...t){lt().getBool("IS_TEST")||console.log(...t)}function Fc(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ic(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function _c(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Mc(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Dc(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Lc(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Pc(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const i=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(i),r[s]=Math.sin(i)}return{real:n,imag:r}}function zc(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Vc(t,e,n=0){let r=[];if("number"==typeof e)R(t.shape[n]%e==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(e).fill(t.shape[n]/e);else{R(e.reduce(((t,e)=>(-1===e&&(t+=1),t)),0)<=1,(()=>"There should be only one negative value in split array."));const s=e.indexOf(-1);if(-1!==s){const r=e.reduce(((t,e)=>e>0?t+e:t));e[s]=t.shape[n]-r}R(t.shape[n]===e.reduce(((t,e)=>t+e)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=e}return r}function Bc(t,e){let n,r=!1;for(t<=pc?(n=t,r=!0):n=Y(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Y(t,n+1);return n}function Wc(t,e,n){const r=[],s=t.length;for(let i=0;i<s;i++)i!==e?r.push(t[i]):r.push(n);return r}function Uc(t,e,n,r){const s=e.shape.length,i=t.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>i)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${i}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(t.shape[n]!==e.shape[n])throw new Error(`x.shape[${n}]: ${t.shape[n]} should be equal to indices.shape[${n}]: ${e.shape[n]}.`);const o=t.shape[n],a=[];let u=1,c=1,l=1;for(let e=0;e<r;++e)a.push(t.shape[e]),u*=t.shape[e];for(let e=r;e<n;e++)a.push(t.shape[e]),c*=t.shape[e];for(let t=r;t<s;t++)a.push(e.shape[t]);for(let e=n+1;e<i;e++)a.push(t.shape[e]),l*=t.shape[e];return{batchSize:u,sliceSize:l,outerSize:c,dimSize:o,outputShape:a}}function Gc(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=pa(t.shape),r=qs(t,"float32"),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!G(t.dtype,e))return Jr.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=qs(r,e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=zi(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function jc(t,e){return Jr.makeTensorFromDataId(t.dataId,e,t.dtype)}function Hc(t){try{return t.map((t=>Ar(t)))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function qc(t){return t.map((t=>Sr(t)))}function Xc(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=Hs(t,"int32"),s=Hs([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const i=r.indexToLoc(n[e]),o=e*t.length;s.values.set(i,o)}return s.toTensor()}const Kc={kernelName:mt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(t,su(qs(n,"float32"),-1))}}},Jc={kernelName:bt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ca(qs(n,"float32")),r=La(jo(zi(1),e));return ha(Eo(t,r))}}}},Yc={kernelName:yt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=La(jo(ca(qs(n,"float32")),1));return Eo(t,e)}}}},Zc={kernelName:gt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{let e=t;const r=Ro(n.shape,s);return r.length>0&&(e=Ho(e,r)),io(e,n.shape)},b:()=>{let e=t;const n=Ro(r.shape,s);return n.length>0&&(e=Ho(e,n)),io(e,r.shape)}}}},Qc={kernelName:xt,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach(((e,r)=>{n[r]=()=>t.clone()})),n}},tl={kernelName:kt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>qa(n)}}},el={kernelName:$t,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>qa(n)}}},nl={kernelName:Nt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,La(jo(zi(1),ca(qs(n,"float32")))))}}},rl={kernelName:Ct,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=La(Wi(zi(1),ca(qs(n,"float32"))));return Eo(t,e)}}}},sl={kernelName:At,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=Wi(ca(n),ca(r));let i=Go(t,Eo(r,e));const o=Ro(n.shape,s);return o.length>0&&(i=Ho(i,o)),io(i,n.shape)},b:()=>{const e=Wi(ca(n),ca(r));let i=ha(Go(t,Eo(n,e)));const o=Ro(r.shape,s);return o.length>0&&(i=Ho(i,o)),io(i,r.shape)}}}},il={kernelName:Et,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,Wi(ca(qs(n,"float32")),1))}}},ol={kernelName:St,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,jo(zi(1),ca(qs(n,"float32"))))}}};const al=os({avgPool3dGrad_:function(t,e,n,r,s=[1,1,1],i,o){const a=ss(t,"dy","avgPool3dGrad"),u=ss(e,"input","avgPool3dGrad");let c=a,l=u,h=!1;4===u.rank&&(h=!0,c=io(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),l=io(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),R(5===c.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),R(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),R(ro(r,s),(()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`)),null!=o&&R(M(i),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const d={dy:c,input:l},f={filterSize:n,strides:r,dilations:s,pad:i,dimRoundingMode:o},p=Jr.runKernel(Ft,d,f);return h?io(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ul={kernelName:Ot,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:i,dilations:o,pad:a,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>al(t,r,s,i,c,a,u)}}};const cl=os({avgPoolGrad_:function(t,e,n,r,s){const i=ss(t,"dy","avgPoolGrad"),o=ss(e,"input","avgPoolGrad");R(o.rank===i.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${i.rank})`));let a=o,u=i,c=!1;3===o.rank&&(c=!0,a=io(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=io(i,[1,i.shape[0],i.shape[1],i.shape[2]])),R(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),R(4===a.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`));const l={dy:u,input:a},h={filterSize:n,strides:r,pad:s},d=Jr.runKernel(Tt,l,h);return c?io(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),ll={kernelName:Rt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:i,pad:o}=n;return{x:()=>cl(t,r,s,i,o)}}},hl={kernelName:It,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:i,transposeB:o}=n;return i||o?!i&&o?{a:()=>fu(t,s,!1,!1),b:()=>fu(t,r,!0,!1)}:i&&!o?{a:()=>fu(s,t,!1,!0),b:()=>fu(r,t,!1,!1)}:{a:()=>fu(s,t,!0,!0),b:()=>fu(t,r,!0,!0)}:{a:()=>fu(t,s,!1,!0),b:()=>fu(r,t,!0,!1)}}};const dl=os({spaceToBatchND_:function(t,e,n){const r=ss(t,"x","spaceToBatchND");R(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),R(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),R(r.shape.reduce(((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const s={x:r},i={blockShape:e,paddings:n};return Jr.runKernel(zn,s,i)}}),fl={kernelName:_t,gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>dl(t,r,s)}}},pl={kernelName:"BroadcastTo",gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,i=r.shape,o=Array.from(i);for(let t=s.length-1;t>=0;t--)if(s[t]===i[t])o[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${i}].`);const a=[];for(let t=0;t<o.length;t++)o[t]>1&&a.push(t);return{x:()=>Ho(t,a,!0)}}},ml={kernelName:Dt,gradFunc:t=>({x:()=>t.clone()})},bl={kernelName:Lt,gradFunc:t=>({x:()=>qa(t)})},yl={kernelName:Pt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:i}=n;return{x:()=>Ha(Xo(zo(r,s),zu(r,i)),t,qa(t))}}},gl={kernelName:Vt,inputsToSave:["x"],gradFunc:Kc.gradFunc},xl={kernelName:Bt,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map((t=>t.shape)),{axis:s}=n,i=V(s,e[0].shape)[0],o=r.map((t=>t[i]));return Da(t,o,i).map((t=>()=>t))}},wl={kernelName:Wt,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:i,strides:o,pad:a,dataFormat:u}=n;return R(no(i),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`)),{x:()=>vo(r.shape,t,s,o,a,u),filter:()=>nu(r,t,s.shape,o,a,u)}}},vl={kernelName:Gt,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:i,pad:o,dataFormat:a,dimRoundingMode:u}=n;return{dy:()=>xo(t,s,i,o,a,1,u),filter:()=>nu(t,r,s.shape,i,o,a,u)}}};const kl=os({conv3DBackpropFilter_:function(t,e,n,r,s){let i=t;4===t.rank&&(i=io(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let o=e;4===o.rank&&(o=io(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),R(5===i.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${i.shape}.`)),R(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),R(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),R(i.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${n[3]}.`)),R(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const a={x:i,dy:o},u={strides:r,pad:s,filterShape:n};return Jr.runKernel(Ht,a,u)}});const $l=os({conv3DBackpropInput_:function(t,e,n,r,s){R(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let i=t,o=e,a=!1;4===e.rank&&(a=!0,o=io(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),i=[1,t[0],t[1],t[2],t[3]]);const u=i[4],c=o.shape[4];R(5===i.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`)),R(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),R(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),R(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),R(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const l={dy:o,filter:n},h={pad:s,strides:r,inputShape:i},d=Jr.runKernel(qt,l,h);return a?io(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Nl={kernelName:jt,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:i}=n;R(no(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,a]=e;return{x:()=>$l(o.shape,t,a,s,i),filter:()=>kl(o,t,a.shape,s,i)}}};const Cl=os({sin_:function(t){const e={x:ss(t,"x","sin")};return Jr.runKernel(Fn,e)}}),El={kernelName:Xt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(ha(Cl(qs(n,"float32"))),t)}}};const Sl=os({sinh_:function(t){const e={x:ss(t,"x","sinh")};return Jr.runKernel(In,e)}}),Al={kernelName:Kt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(Sl(qs(n,"float32")),t)}}};const Rl=os({cumsum_:function(t,e=0,n=!1,r=!1){const s={x:ss(t,"x","cumsum")},i={axis:e,exclusive:n,reverse:r};return Jr.runKernel(Jt,s,i)}}),Tl={kernelName:Jt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:i,reverse:o}=n;return{x:()=>{const e=oa([s],r.rank);let n=Rl(t,s,i,!o);return null!=e&&(n=Xa(n,e)),n}}}},Ol={kernelName:te,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:i,dimRoundingMode:o}=n,a=null==r?[1,1]:r;R(no(a),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[u,c]=e;return R(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),R(4===c.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`)),R(u.shape[3]===c.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),R(ro(s,a),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${a}'.`)),null!=o&&R(M(i),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`)),{x:()=>hu(u.shape,t,c,s,i,r,o),filter:()=>lu(u,t,c.shape,s,i,r,o)}}},Fl={kernelName:se,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,i={x:r,filter:s,dy:t},o={x:r,filter:s,dy:t};return{x:()=>Jr.runKernel(ie,i,n),filter:()=>Jr.runKernel(oe,o,n)}}},Il={kernelName:ue,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r={dy:t,y:n};return{x:()=>Jr.runKernel(ce,r)}}},_l={kernelName:le,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Go(Wo(ha(ca(n))),2/Math.sqrt(Math.PI));return{x:()=>Go(t,r)}}},Ml={kernelName:de,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(t,n)}}},Dl={kernelName:fe,inputsToSave:["input"],gradFunc:(t,e)=>{const[n]=e;return{input:()=>io(t,n.shape)}}},Ll={kernelName:pe,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(t,Wo(n))}}},Pl={kernelName:ge,gradFunc:t=>({x:()=>qa(t)})},zl={kernelName:xe,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=Eo(t,qs(r,"float32")),i=Ro(n.shape,s);return i.length>0?io(Ho(e,i),n.shape):e},b:()=>{let e=Go(t,qs(n,"float32"));const i=Ro(r.shape,s);i.length>0&&(e=io(Ho(e,i),r.shape));const o=ca(r);return ha(Eo(e,qs(o,"float32")))}}}};const Vl=os({rsqrt_:function(t){const e={x:ss(t,"x","rsqrt")};return Jr.runKernel(Sn,e)}}),Bl={kernelName:we,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,i,o,a]=e,u=null==a?zi(1):a,c=Ro(i.shape,s.shape),l=[];if(1===i.rank){for(let t=0;t<s.shape.length-1;++t)l.push(s.shape[t]);l.push(1)}const h=jo(s,i),d=Go(t,u),f=Vl(Wi(o,zi(r))),p=Go(Go(Go(f,f),f),zi(-.5));return{x:()=>1===i.rank?io(Go(Go(t,Io(io(f,[1,1,1,i.shape[0]]),l)),u),s.shape):io(Go(Go(t,f),u),s.shape),mean:()=>{let t=Go(Go(f,zi(-1)),d);return 1===i.rank&&(t=Ho(t,c)),io(t,i.shape)},variance:()=>{let t=Go(Go(p,h),d);return 1===i.rank&&(t=Ho(t,c)),io(t,i.shape)},scale:()=>{const e=Go(h,f);let n=Go(t,e);return 1===i.rank&&(n=Ho(n,c)),io(n,i.shape)},offset:()=>{let e=t;return 1===i.rank&&(e=Ho(e,c)),io(e,i.shape)}}}};const Wl=os({unsortedSegmentSum_:function(t,e,n){const r=ss(t,"x","unsortedSegmentSum"),s=ss(e,"segmentIds","unsortedSegmentSum","int32");R(M(n),(()=>"numSegments must be of dtype int"));const i={x:r,segmentIds:s},o={numSegments:n};return Jr.runKernel(tr,i,o)}}),Ul={kernelName:ve,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:i}=n,o=V(i,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,a=e.slice(0,o),u=a.length,c=e.slice(i,e.length).slice(1),l=c.length,h=Gl(0,u),d=Gl(u+1,u+1+l),f=jl([a,[n],c]),p=io(t,f),m=io(s,[n]),b=jl([[u],h,d]),y=Xa(p,b);let g=Wl(y,m,r.shape[o]);const x=aa(b);return g=Xa(g,x),g},indices:()=>s}}};function Gl(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function jl(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Hl={kernelName:Ne,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>qa(n),b:()=>qa(r)}}},ql={kernelName:Ce,gradFunc:t=>({x:()=>qs(t,"float32")})},Xl={kernelName:Ae,gradFunc:t=>({x:()=>qa(t)})},Kl={kernelName:Re,gradFunc:t=>({x:()=>qa(t)})},Jl={kernelName:Te,gradFunc:t=>({x:()=>qa(t)})},Yl={kernelName:Oe,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{alpha:s}=n,i=Po(r,0);return{x:()=>Ha(i,t,Go(t,s))}}},Zl={kernelName:De,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,Wi(n,1))}}},Ql={kernelName:Me,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,qs(n,"float32"))}}},th={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=Wo(r);return jo(t,Go(Ho(t,s,!0),e))}}}};const eh=os({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,i=1,o=.5){const a={x:t,y:e,dy:n},u={depthRadius:r,bias:s,alpha:i,beta:o};return Jr.runKernel(Be,a,u)}}),nh={kernelName:Ve,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:i,bias:o,alpha:a,beta:u}=n;return{x:()=>eh(r,s,t,i,o,a,u)}}};function rh(t,e,n,r){return e.rank<n.rank&&(e=io(e,sa(e.shape,r))),t.rank<n.rank&&(t=io(t,sa(t.shape,r))),{x:()=>Go(t,qs(Oo(n,e),t.dtype))}}const sh={kernelName:We,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,i=e[0],o=rh(t,e[1],i,V(s,i.shape));return{x:()=>o.x()}}};const ih=os({less_:function(t,e){let n=ss(t,"a","less"),r=ss(e,"b","less");[n,r]=Ur(n,r),To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(Fe,s)}}),oh={kernelName:Ue,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Go(t,qs(zo(n,r),"float32")),b:()=>Go(t,qs(ih(n,r),"float32"))}}};const ah=os({maxPool3dGrad_:function(t,e,n,r,s,i=[1,1,1],o,a){const u=ss(t,"dy","maxPool3dGrad"),c=ss(e,"input","maxPool3dGrad"),l=ss(n,"output","maxPool3dGrad");let h=u,d=c,f=l,p=!1;4===c.rank&&(p=!0,h=io(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=io(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),f=io(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),R(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),R(5===d.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`)),R(5===f.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${f.rank}.`)),R(ro(s,i),(()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${i}'`)),null!=a&&R(M(o),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`));const m={dy:h,input:d,output:f},b={filterSize:r,strides:s,dilations:i,pad:o,dimRoundingMode:a},y=Jr.runKernel(qe,m,b);return p?io(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),uh={kernelName:He,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:i,strides:o,dilations:a,pad:u,dimRoundingMode:c}=n,l=null==a?[1,1,1]:a;return{x:()=>ah(t,r,s,i,o,l,u,c)}}};const ch=os({maxPoolGrad_:function(t,e,n,r,s,i,o){const a=ss(t,"dy","maxPoolGrad"),u=ss(e,"input","maxPoolGrad"),c=ss(n,"output","maxPoolGrad");R(u.rank===a.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${a.rank})`)),R(4===a.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`)),R(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),null!=o&&R(M(i),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const l={dy:a,input:u,output:c},h={filterSize:r,strides:s,pad:i,dimRoundingMode:o};return Jr.runKernel(je,l,h)}}),lh={kernelName:Ge,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:i,strides:o,pad:a}=n;return{x:()=>ch(t,r,s,i,o,a)}}},hh={kernelName:Ke,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n,i=V(s,r.shape),o=I(ra(r.shape,i)[1]);return{x:()=>{const e=r.shape.slice();i.forEach((t=>{e[t]=1}));const n=io(t,e);return Eo(Go(n,ma(r.shape,"float32")),o)}}}},dh={kernelName:Je,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[i,o]=e,a=rh(t,o,i,V(s,i.shape));return{x:()=>a.x()}}},fh={kernelName:Ye,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Go(t,qs(zu(n,r),"float32")),b:()=>Go(t,qs(Po(n,r),"float32"))}}},ph={kernelName:Ze,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,i=s.map((t=>t[0]));return{x:()=>Ra(t,i,r.shape)}}},mh={kernelName:Qe,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=Ro(n.shape,s);return e.length>0?io(Ho(t,e),n.shape):t},b:()=>{const e=Go(t,ha(Do(Eo(n,r)))),i=Ro(r.shape,s);return i.length>0?io(Ho(e,i),r.shape):e}}}},bh={kernelName:en,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=Go(t,qs(r,"float32")),i=Ro(n.shape,s);return i.length>0?io(Ho(e,i),n.shape):e},b:()=>{const e=Go(t,qs(n,"float32")),i=Ro(r.shape,s);return i.length>0?io(Ho(e,i),r.shape):e}}}},yh={kernelName:nn,gradFunc:t=>({x:()=>ha(t)})},gh={kernelName:cn,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>pa(n.shape,"float32")}}},xh={kernelName:un,gradFunc:t=>({x:()=>qa(t)})},wh={kernelName:ln,saveAllInputs:!0,gradFunc:(t,e,n)=>{const{axis:r}=n;return Ga(t,r).map((t=>()=>t))}},vh={kernelName:hn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,i=s.map((t=>t[0]));return{x:()=>Ra(t,i,r.shape)}}},kh={kernelName:dn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,i=n,o=r,a=To(i.shape,o.shape);return{a:()=>{const e=qs(o,"float32");let n=Go(t,Go(e,Wu(i,jo(e,zi(1)))));const r=Ro(i.shape,a);return r.length>0&&(n=Ho(n,r)),io(n,i.shape)},b:()=>{const e=Po(i,0),n=Ha(e,Bo(i),qa(i));let r=Go(t,Go(s,n));const u=Ro(o.shape,a);return u.length>0&&(r=Ho(r,u)),io(r,o.shape)}}}},$h={kernelName:fn,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=Po(n,0);return{x:()=>Ha(s,t,Go(t,r)),alpha:()=>{let e=Ha(s,qa(t),Go(t,n));const i=Ro(r.shape,t.shape);return i.length>0&&(e=Ho(e,i)),io(e,r.shape)}}}},Nh={kernelName:ae,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=Eo(t,qs(r,"float32")),i=Ro(n.shape,s);return i.length>0?io(Ho(e,i),n.shape):e},b:()=>{let e=Go(t,qs(n,"float32"));const i=Ro(r.shape,s);i.length>0&&(e=io(Ho(e,i),r.shape));const o=ca(r);return ha(Eo(e,qs(o,"float32")))}}}},Ch={kernelName:yn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,ha(ca(n)))}}},Eh={kernelName:Nn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Go(zu(n,6),su(n));return{x:()=>Go(t,qs(r,"float32"))}}},Sh={kernelName:gn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(t,qs(su(n),"float32"))}}},Ah={kernelName:xn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>io(t,n.shape)}}},Rh={kernelName:kn,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s={dy:t,images:r};return{images:()=>Jr.runKernel($n,s,n)}}},Th={kernelName:wn,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s={dy:t,images:r};return{images:()=>Jr.runKernel(vn,s,n)}}},Oh={kernelName:Cn,gradFunc:(t,e,n)=>{const{dims:r}=n,s=V(r,t.shape);return{x:()=>Ca(t,s)}}},Fh={kernelName:En,gradFunc:t=>({x:()=>qa(t)})},Ih={kernelName:Sn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ha(Eo(t,Go(Wu(n,1.5),2)))}}};const _h=os({logicalNot_:function(t){const e={x:ss(t,"x","logicalNot","bool")};return Jr.runKernel(Pe,e)}}),Mh={kernelName:Rn,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>qs(qa(n),"float32"),t:()=>Go(t,qs(n,t.dtype)),e:()=>Go(t,qs(_h(n),t.dtype))}}},Dh={kernelName:Tn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Po(n,zi(0)),r=zi(kc),s=zi($c),i=Go(t,s),o=Go(Go(t,r),Wo(qs(n,"float32")));return Ha(e,i,o)}}}},Lh={kernelName:Mn,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(t,Go(n,jo(zi(1),n)))}}},Ph={kernelName:_n,gradFunc:t=>({x:()=>qa(t)})};const zh=os({cos_:function(t){const e={x:ss(t,"x","cos")};return Jr.runKernel(Xt,e)}}),Vh={kernelName:Fn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(zh(qs(n,"float32")),t)}}};const Bh=os({cosh_:function(t){const e={x:ss(t,"x","cosh")};return Jr.runKernel(Kt,e)}}),Wh={kernelName:In,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(Bh(qs(n,"float32")),t)}}},Uh={kernelName:On,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:i}=n,o=r.shape,[a,u]=Ni(r,s,i),c=[];for(let e=0;e<t.rank;e++)c.push([a[e],o[e]-a[e]-u[e]]);return{x:()=>ya(t,c)}}},Gh={kernelName:Bn,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,i=Go(t,r);return{logits:()=>jo(i,Go(Ho(i,[s],true),r))}}},jh={kernelName:Dn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(t,Aa(n))}}};const Hh=os({batchToSpaceND_:function(t,e,n){const r=ss(t,"x","batchToSpaceND"),s=e.reduce(((t,e)=>t*e));R(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),R(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),R(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`));const i={x:r},o={blockShape:e,crops:n};return Jr.runKernel(_t,i,o)}}),qh={kernelName:zn,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Hh(t,r,s)}}},Xh={kernelName:Vn,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>po(t,r)}}};const Kh=[Kc,Jc,Yc,Zc,Qc,tl,el,nl,rl,sl,il,ol,ul,ll,hl,fl,pl,ml,bl,yl,gl,xl,vl,wl,Nl,El,Al,Tl,Ol,Fl,Nh,Il,_l,Ml,Dl,Ll,zl,Pl,Bl,Ul,Hl,ql,Xl,Kl,Jl,Yl,Zl,Ql,th,nh,sh,sh,oh,uh,lh,hh,dh,fh,ph,mh,bh,yh,gh,xh,wh,vh,vh,kh,$h,Ch,Eh,Sh,Ah,Rh,Th,Oh,Fh,Ih,Mh,Dh,Lh,Ph,Vh,Wh,Uh,Gh,jh,qh,qh,Xh,Xh,{kernelName:Ln,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,Go(La(qs(n,"float32")),2))}}},{kernelName:Wn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=zi(2);return{a:()=>Go(t,Go(s,jo(n,r))),b:()=>Go(t,Go(s,jo(r,n)))}}},{kernelName:Un,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(t,Go(qs(n,"float32"),2))}}},{kernelName:nr,gradFunc:t=>({x:()=>qa(t)})},{kernelName:Gn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{let e=t;const r=Ro(n.shape,s);return r.length>0&&(e=Ho(e,r)),io(e,n.shape)},b:()=>{let e=t;const n=Ro(r.shape,s);return n.length>0&&(e=Ho(e,n)),io(ha(e),r.shape)}}}},{kernelName:Pn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:i}=n;V(i,r.shape).forEach((t=>{s[t]=1}));const o=io(t,s),a=Go(o,ma(r.shape,"float32"));return{x:()=>a}}},{kernelName:qn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Eo(t,ca(zh(n)))}}},{kernelName:Xn,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(jo(zi(1),ca(n)),t)}}},{kernelName:Kn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=qa(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=Wi(e,Ra(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let i=0;i<s[1];++i)e=Wi(e,Ra(t,[n*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let i=0;i<s[1];++i)for(let o=0;o<s[2];++o)e=Wi(e,Ra(t,[n*r.shape[0],i*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let i=0;i<s[1];++i)for(let o=0;o<s[2];++o)for(let a=0;a<s[3];++a)e=Wi(e,Ra(t,[n*r.shape[0],i*r.shape[1],o*r.shape[2],a*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:Yn,gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,i=aa(s);return{x:()=>Xa(t,i)}}},{kernelName:Qn,gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>za(t,s)}}},{kernelName:tr,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Yo(e,qa(e)),r=Lo(t,n);let s=zo(e,zi(0,"int32"));const i=r.rank-s.rank;for(let t=0;t<i;++t)s=Fo(s,t+1);s=Xo(s,ma(r.shape,"bool"));const o=qa(r);return Ha(s,r,o)}(t,n)}}},{kernelName:er,gradFunc:t=>({x:()=>qa(t)})}];for(const t of Kh)pr(t);Ir.prototype.abs=function(){return this.throwIfDisposed(),Bi(this)};const Jh=os({acos_:function(t){const e={x:ss(t,"x","acos")};return Jr.runKernel(bt,e)}});Ir.prototype.acos=function(){return this.throwIfDisposed(),Jh(this)};const Yh=os({acosh_:function(t){const e={x:ss(t,"x","acosh")};return Jr.runKernel(yt,e)}});Ir.prototype.acosh=function(){return this.throwIfDisposed(),Yh(this)};const Zh=os({mod_:function(t,e){let n=ss(t,"a","mod"),r=ss(e,"b","mod");[n,r]=Ur(n,r);const s={a:n,b:r};return Jr.runKernel(Qe,s)}});const Qh=os({addStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","addStrict"),r=ss(e,"b","addStrict");return T(n.shape,r.shape,"Error in addStrict: "),Wi(n,r)}}),td=os({divStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","div"),r=ss(e,"b","div");return T(n.shape,r.shape,"Error in divideStrict: "),Eo(n,r)}}),ed=os({maximumStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","maximumStrict"),r=ss(e,"b","maximumStrict");return T(n.shape,r.shape,"Error in maximumStrict: "),Yo(n,r)}}),nd=os({minimumStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","minimumStrict"),r=ss(e,"b","minimumStrict");return T(n.shape,r.shape,"Error in minimumStrict: "),ta(n,r)}}),rd=os({modStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","modStrict"),r=ss(e,"b","modStrict");return T(n.shape,r.shape,"Error in modStrict: "),Zh(n,r)}}),sd=os({mulStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","mul"),r=ss(e,"b","mul");return T(n.shape,r.shape,"Error in multiplyStrict: "),Go(n,r)}}),id=os({powStrict_:function(t,e){return Ri("strict variants of ops have been deprecated and will be removed in future"),T(t.shape,e.shape,"Error in powStrict: "),Wu(t,e)}}),od=os({squaredDifferenceStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","squaredDifferenceStrict"),r=ss(e,"b","squaredDifferenceStrict");return T(n.shape,r.shape,"Error in squaredDifferenceStrict: "),Ju(n,r)}}),ad=os({subStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","subStrict"),r=ss(e,"b","subStrict");return T(n.shape,r.shape,"Error in subStrict: "),jo(n,r)}});Ir.prototype.addStrict=function(t){return this.throwIfDisposed(),Qh(this,t)},Ir.prototype.add=function(t){return this.throwIfDisposed(),Wi(this,t)},Ir.prototype.all=function(t,e){return this.throwIfDisposed(),Ui(this,t,e)},Ir.prototype.any=function(t,e){return this.throwIfDisposed(),Gi(this,t,e)},Ir.prototype.argMax=function(t){return this.throwIfDisposed(),ji(this,t)};const ud=os({argMin_:function(t,e=0){const n={x:ss(t,"x","argMin")},r={axis:e};return Jr.runKernel($t,n,r)}});Ir.prototype.argMin=function(t){return this.throwIfDisposed(),ud(this,t)},Ir.prototype.asScalar=function(){return this.throwIfDisposed(),R(1===this.size,(()=>"The array must have only 1 element.")),io(this,[])},Ir.prototype.asType=function(t){return this.throwIfDisposed(),qs(this,t)},Ir.prototype.as1D=function(){return this.throwIfDisposed(),io(this,[this.size])},Ir.prototype.as2D=function(t,e){return this.throwIfDisposed(),io(this,[t,e])},Ir.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),io(this,[t,e,n])},Ir.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),io(this,[t,e,n,r])},Ir.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),io(this,[t,e,n,r,s])};const cd=os({asin_:function(t){const e={x:ss(t,"x","asin")};return Jr.runKernel(Nt,e)}});Ir.prototype.asin=function(){return this.throwIfDisposed(),cd(this)};const ld=os({asinh_:function(t){const e={x:ss(t,"x","asinh")};return Jr.runKernel(Ct,e)}});Ir.prototype.asinh=function(){return this.throwIfDisposed(),ld(this)};const hd=os({atan_:function(t){const e={x:ss(t,"x","atan")};return Jr.runKernel(Et,e)}});Ir.prototype.atan=function(){return this.throwIfDisposed(),hd(this)};const dd=os({atan2_:function(t,e){let n=ss(t,"a","atan2"),r=ss(e,"b","atan2");[n,r]=Ur(n,r);const s={a:n,b:r};return Jr.runKernel(At,s)}});Ir.prototype.atan2=function(t){return this.throwIfDisposed(),dd(this,t)};const fd=os({atanh_:function(t){const e={x:ss(t,"x","atanh")};return Jr.runKernel(St,e)}});Ir.prototype.atanh=function(){return this.throwIfDisposed(),fd(this)},Ir.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),oo(this,t,e,n,r)},Ir.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),Hh(this,t,e)},Ir.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),uo(this,t,e,n,r,s)},Ir.prototype.broadcastTo=function(t){return this.throwIfDisposed(),ja(this,t)},Ir.prototype.cast=function(t){return this.throwIfDisposed(),qs(this,t)};const pd=os({ceil_:function(t){const e={x:ss(t,"x","ceil")};return Jr.runKernel(Lt,e)}});Ir.prototype.ceil=function(){return this.throwIfDisposed(),pd(this)},Ir.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),fo(this,t,e)},Ir.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof Ir&&(t=[t]),po([this,...t],e)},Ir.prototype.conv1d=function(t,e,n,r,s,i){return this.throwIfDisposed(),wo(this,t,e,n,r,s,i)},Ir.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),ko(this,t,e,n,r,s)},Ir.prototype.conv2d=function(t,e,n,r,s,i){return this.throwIfDisposed(),xo(this,t,e,n,r,s,i)},Ir.prototype.cos=function(){return this.throwIfDisposed(),zh(this)},Ir.prototype.cosh=function(){return this.throwIfDisposed(),Bh(this)},Ir.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Rl(this,t,e,n)};const md=os({depthToSpace_:function(t,e,n="NHWC"){const r=ss(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],i="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];R(s*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`)),R(i*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${i} and ${e} for depthToSpace with input shape\n        ${r.shape}`)),R(o%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${o} for depthToSpace with input shape ${r.shape}`));const a={x:r},u={blockSize:e,dataFormat:n};return Jr.runKernel(Qt,a,u)}});Ir.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),md(this,t,e)},Ir.prototype.depthwiseConv2D=function(t,e,n,r,s,i){return Ri("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),No(this,t,e,n,r,s,i)},Ir.prototype.depthwiseConv2d=function(t,e,n,r,s,i){return this.throwIfDisposed(),No(this,t,e,n,r,s,i)};const bd=os({dilation2d_:function(t,e,n,r,s=[1,1],i="NHWC"){const o=ss(t,"x","dilation2d"),a=ss(e,"filter","dilation2d");R(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),R(3===a.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`)),R("NHWC"===i,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${i}`));let u=o,c=!1;3===o.rank&&(u=io(o,[1,o.shape[0],o.shape[1],o.shape[2]]),c=!0);const l={x:u,filter:a},h={strides:n,pad:r,dilations:s},d=Jr.runKernel(se,l,h);return c?io(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});Ir.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),bd(this,t,e,n,r,s)};const yd=os({divNoNan_:function(t,e){let n=ss(t,"a","div"),r=ss(e,"b","div");[n,r]=Ur(n,r);const s=Eo(n,r),i=qa(s),o=Oo(r,i);return Ha(o,i,s)}});Ir.prototype.divNoNan=function(t){return this.throwIfDisposed(),yd(this,t)},Ir.prototype.divStrict=function(t){return this.throwIfDisposed(),td(this,t)},Ir.prototype.div=function(t){return this.throwIfDisposed(),Eo(this,t)};const gd=os({dot_:function(t,e){const n=ss(t,"t1","dot"),r=ss(e,"t2","dot");R(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],i=1===r.rank?r.size:r.shape[0];if(R(s===i,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${i}.`)),1===n.rank&&1===r.rank){const t=io(n,[1,-1]),e=io(r,[-1,1]),s=fu(t,e);return io(s,[])}if(1===n.rank&&2===r.rank){const t=io(n,[1,-1]),e=io(r,[r.shape[0],r.shape[1]]),s=fu(t,e);return io(s,[s.size])}if(2===n.rank&&1===r.rank){const t=io(r,[-1,1]),e=fu(n,t);return io(e,[e.size])}{const t=io(r,[r.shape[0],r.shape[1]]);return fu(n,t)}}});Ir.prototype.dot=function(t){return this.throwIfDisposed(),gd(this,t)},Ir.prototype.elu=function(){return this.throwIfDisposed(),So(this)};const xd=os({equalStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","equalStrict"),r=ss(e,"b","equalStrict");return T(n.shape,r.shape,"Error in equalStrict: "),Oo(n,r)}}),wd=os({greaterEqualStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","greaterEqualStrict"),r=ss(e,"b","greaterEqualStrict");return T(n.shape,r.shape,"Error in greaterEqualStrict: "),zo(n,r)}}),vd=os({greaterStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","greaterStrict"),r=ss(e,"b","greaterStrict");return T(n.shape,r.shape,"Error in greaterStrict: "),Po(n,r)}}),kd=os({lessEqualStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","lessEqualStrict"),r=ss(e,"b","lessEqualStrict");return T(n.shape,r.shape,"Error in lessEqualStrict: "),zu(n,r)}}),$d=os({lessStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","lessStrict"),r=ss(e,"b","lessStrict");return T(n.shape,r.shape,"Error in lessStrict: "),ih(n,r)}}),Nd=os({notEqualStrict_:function(t,e){Ri("strict variants of ops have been deprecated and will be removed in future");const n=ss(t,"a","notEqualStrict"),r=ss(e,"b","notEqualStrict");return T(n.shape,r.shape,"Error in notEqualStrict: "),da(n,r)}});Ir.prototype.equalStrict=function(t){return this.throwIfDisposed(),xd(this,t)},Ir.prototype.equal=function(t){return this.throwIfDisposed(),Oo(this,t)};const Cd=os({erf_:function(t){let e=ss(t,"x","erf");R("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=qs(e,"float32"));const n={x:e};return Jr.runKernel(le,n)}});Ir.prototype.erf=function(){return this.throwIfDisposed(),Cd(this)},Ir.prototype.exp=function(){return this.throwIfDisposed(),Wo(this)},Ir.prototype.expandDims=function(t){return this.throwIfDisposed(),Fo(this,t)};const Ed=os({expm1_:function(t){const e={x:ss(t,"x","expm1")};return Jr.runKernel(pe,e)}});Ir.prototype.expm1=function(){return this.throwIfDisposed(),Ed(this)},Ir.prototype.fft=function(){return this.throwIfDisposed(),Za(this)},Ir.prototype.flatten=function(){return this.throwIfDisposed(),io(this,[this.size])},Ir.prototype.floor=function(){return this.throwIfDisposed(),Do(this)},Ir.prototype.floorDiv=function(t){return this.throwIfDisposed(),Co(this,t)},Ir.prototype.gather=function(t,e){return this.throwIfDisposed(),Lo(this,t,e)},Ir.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),wd(this,t)},Ir.prototype.greaterEqual=function(t){return this.throwIfDisposed(),zo(this,t)},Ir.prototype.greaterStrict=function(t){return this.throwIfDisposed(),vd(this,t)},Ir.prototype.greater=function(t){return this.throwIfDisposed(),Po(this,t)},Ir.prototype.ifft=function(){return this.throwIfDisposed(),tu(this)},Ir.prototype.irfft=function(){return this.throwIfDisposed(),eu(this)};const Sd=os({isFinite_:function(t){const e={x:ss(t,"x","isFinite")};return Jr.runKernel(Ae,e)}});Ir.prototype.isFinite=function(){return this.throwIfDisposed(),Sd(this)};const Ad=os({isInf_:function(t){const e={x:ss(t,"x","isInf")};return Jr.runKernel(Re,e)}});Ir.prototype.isInf=function(){return this.throwIfDisposed(),Ad(this)};const Rd=os({isNaN_:function(t){const e={x:ss(t,"x","isNaN")};return Jr.runKernel(Te,e)}});Ir.prototype.isNaN=function(){return this.throwIfDisposed(),Rd(this)},Ir.prototype.leakyRelu=function(t){return this.throwIfDisposed(),Vo(this,t)},Ir.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),kd(this,t)},Ir.prototype.lessEqual=function(t){return this.throwIfDisposed(),zu(this,t)},Ir.prototype.lessStrict=function(t){return this.throwIfDisposed(),$d(this,t)},Ir.prototype.less=function(t){return this.throwIfDisposed(),ih(this,t)};const Td=os({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const i=ss(t,"x","localResponseNormalization");R(4===i.rank||3===i.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${i.rank}.`)),R(M(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let o=i,a=!1;3===i.rank&&(a=!0,o=io(i,[1,i.shape[0],i.shape[1],i.shape[2]]));const u={x:o},c={depthRadius:e,bias:n,alpha:r,beta:s},l=Jr.runKernel(Ve,u,c);return a?io(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});Ir.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),Td(this,t,e,n,r)};const Od=os({logSigmoid_:function(t){const e=ss(t,"x","logSigmoid");return Pi((t=>({value:ha(Ma(ha(t))),gradFunc:e=>Go(e,Aa(ha(t)))})))(e)}});Ir.prototype.logSigmoid=function(){return this.throwIfDisposed(),Od(this)},Ir.prototype.logSoftmax=function(t){return this.throwIfDisposed(),qo(this,t)},Ir.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Zu(this,t,e)},Ir.prototype.log=function(){return this.throwIfDisposed(),Bo(this)},Ir.prototype.log1p=function(){return this.throwIfDisposed(),Yu(this)},Ir.prototype.logicalAnd=function(t){return this.throwIfDisposed(),Xo(this,t)},Ir.prototype.logicalNot=function(){return this.throwIfDisposed(),_h(this)};const Fd=os({logicalOr_:function(t,e){const n=ss(t,"a","logicalOr","bool"),r=ss(e,"b","logicalOr","bool");To(n.shape,r.shape);const s={a:n,b:r};return Jr.runKernel(ze,s)}});Ir.prototype.logicalOr=function(t){return this.throwIfDisposed(),Fd(this,t)};const Id=os({logicalXor_:function(t,e){const n=ss(t,"a","logicalXor","bool"),r=ss(e,"b","logicalXor","bool");return To(n.shape,r.shape),Xo(Fd(t,e),_h(Xo(t,e)))}});Ir.prototype.logicalXor=function(t){return this.throwIfDisposed(),Id(this,t)},Ir.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),fu(this,t,e,n)},Ir.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),Ko(this,t,e,n,r)},Ir.prototype.max=function(t,e){return this.throwIfDisposed(),Uo(this,t,e)},Ir.prototype.maximumStrict=function(t){return this.throwIfDisposed(),ed(this,t)},Ir.prototype.maximum=function(t){return this.throwIfDisposed(),Yo(this,t)},Ir.prototype.mean=function(t,e){return this.throwIfDisposed(),Zo(this,t,e)},Ir.prototype.min=function(t,e){return this.throwIfDisposed(),Qo(this,t,e)},Ir.prototype.minimumStrict=function(t){return this.throwIfDisposed(),nd(this,t)},Ir.prototype.minimum=function(t){return this.throwIfDisposed(),ta(this,t)};const _d=os({mirrorPad_:function(t,e,n){R("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=ss(t,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");R(e.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`));const s="reflect"===n?1:0;for(let t=0;t<r.rank;t++)R(2===e[t].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),R(e[t][0]>=0&&e[t][0]<=r.shape[t]-s&&e[t][1]>=0&&e[t][1]<=r.shape[t]-s,(()=>`Padding in dimension ${t} cannot be greater than or equal to ${r.shape[t]-s} or less than 0 for input of shape ${r.shape}`));const i={paddings:e,mode:n},o={x:r};return Jr.runKernel(Ze,o,i)}});Ir.prototype.mirrorPad=function(t,e){return this.throwIfDisposed(),_d(this,t,e)},Ir.prototype.modStrict=function(t){return this.throwIfDisposed(),rd(this,t)},Ir.prototype.mod=function(t){return this.throwIfDisposed(),Zh(this,t)},Ir.prototype.mulStrict=function(t){return this.throwIfDisposed(),sd(this,t)},Ir.prototype.mul=function(t){return this.throwIfDisposed(),Go(this,t)},Ir.prototype.neg=function(){return this.throwIfDisposed(),ha(this)},Ir.prototype.norm=function(t,e,n){return this.throwIfDisposed(),Gu(this,t,e,n)},Ir.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),Nd(this,t)},Ir.prototype.notEqual=function(t){return this.throwIfDisposed(),da(this,t)},Ir.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),fa(this,t,e,n)},Ir.prototype.onesLike=function(){return this.throwIfDisposed(),ba(this)},Ir.prototype.pad=function(t,e){return this.throwIfDisposed(),ya(this,t,e)};const Md=os({pool_:function(t,e,n,r,s,i){null==s&&(s=[1,1]),null==i&&(i=1),0===r&&(r="valid");const o=ss(t,"x","maxPool");let a=o,u=!1;3===o.rank&&(u=!0,a=io(o,[1,o.shape[0],o.shape[1],o.shape[2]])),R(ro(i,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${s}'`));const c=qi(a.shape,e,i,s,r),l=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),r=n.map((t=>Math.floor(t/2))),s=n.map(((t,e)=>t-r[e]));return n.map(((t,e)=>[r[e],s[e]]))}([c.filterHeight,c.filterWidth],l):[[0,0],[0,0]];const d=1===l[0]&&1===l[1],[f,p]=function(t,e,n){const r=n.map((t=>t[0])),s=n.map((t=>t[1])),i=t.concat(r,s),o=e.map(((t,e)=>(t-i[e]%t)%t)),a=s.map(((t,e)=>t+o[e])),u=e.map(((t,e)=>[r[e],a[e]])),c=e.map(((t,e)=>[0,o[e]]));return[u,c]}([c.inHeight,c.inWidth],l,h),m=d?r:"valid",b=d?a:dl(a,l,f),y=("avg"===n?()=>oo(b,e,i,m):()=>Ko(b,e,i,m))(),g=d?y:Hh(y,l,p);return u?io(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});Ir.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),Md(this,t,e,n,r,s)},Ir.prototype.powStrict=function(t){return this.throwIfDisposed(),id(this,t)},Ir.prototype.pow=function(t){return this.throwIfDisposed(),Wu(this,t)},Ir.prototype.prelu=function(t){return this.throwIfDisposed(),ga(this,t)};const Dd=os({prod_:function(t,e=null,n=!1){let r=ss(t,"x","prod");"bool"===r.dtype&&(r=qs(r,"int32"));const s={x:r},i={axis:e,keepDims:n};return Jr.runKernel(pn,s,i)}});Ir.prototype.prod=function(t,e){return this.throwIfDisposed(),Dd(this,t,e)};const Ld=os({reciprocal_:function(t){const e={x:ss(t,"x","reciprocal")};return Jr.runKernel(yn,e)}});Ir.prototype.reciprocal=function(){return this.throwIfDisposed(),Ld(this)},Ir.prototype.relu=function(){return this.throwIfDisposed(),Na(this)},Ir.prototype.relu6=function(){return this.throwIfDisposed(),ru(this)},Ir.prototype.reshapeAs=function(t){return this.throwIfDisposed(),io(this,t.shape)},Ir.prototype.reshape=function(t){return this.throwIfDisposed(),io(this,t)},Ir.prototype.resizeBilinear=function(t,e,n){return this.throwIfDisposed(),Lu(this,t,e,n)},Ir.prototype.resizeNearestNeighbor=function(t,e,n){return this.throwIfDisposed(),Pu(this,t,e,n)},Ir.prototype.reverse=function(t){return this.throwIfDisposed(),Ca(this,t)},Ir.prototype.rfft=function(){return this.throwIfDisposed(),Qa(this)};const Pd=os({round_:function(t){const e={x:ss(t,"x","round")};return Jr.runKernel(En,e)}});Ir.prototype.round=function(){return this.throwIfDisposed(),Pd(this)},Ir.prototype.rsqrt=function(){return this.throwIfDisposed(),Vl(this)},Ir.prototype.selu=function(){return this.throwIfDisposed(),Ea(this)},Ir.prototype.separableConv2d=function(t,e,n,r,s,i){return this.throwIfDisposed(),Sa(this,t,e,n,r,s,i)},Ir.prototype.sigmoid=function(){return this.throwIfDisposed(),Aa(this)};const zd=os({sign_:function(t){const e={x:ss(t,"x","sign")};return Jr.runKernel(_n,e)}});Ir.prototype.sign=function(){return this.throwIfDisposed(),zd(this)},Ir.prototype.sin=function(){return this.throwIfDisposed(),Cl(this)},Ir.prototype.sinh=function(){return this.throwIfDisposed(),Sl(this)},Ir.prototype.slice=function(t,e){return this.throwIfDisposed(),Ra(this,t,e)},Ir.prototype.softmax=function(t){return this.throwIfDisposed(),_a(this,t)},Ir.prototype.softplus=function(){return this.throwIfDisposed(),Ma(this)},Ir.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),dl(this,t,e)},Ir.prototype.split=function(t,e){return this.throwIfDisposed(),Da(this,t,e)},Ir.prototype.sqrt=function(){return this.throwIfDisposed(),La(this)},Ir.prototype.square=function(){return this.throwIfDisposed(),ca(this)},Ir.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Ju(this,t)},Ir.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),od(this,t)},Ir.prototype.squeeze=function(t){return this.throwIfDisposed(),Pa(this,t)},Ir.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof Ir?[this,t]:[this,...t];return za(n,e)},Ir.prototype.step=function(t){return this.throwIfDisposed(),su(this,t)};const Vd=os({stridedSlice_:function(t,e,n,r,s=0,i=0,o=0,a=0,u=0){const c={x:ss(t,"x","stridedSlice")},l={begin:e,end:n,strides:r,beginMask:s,endMask:i,ellipsisMask:o,newAxisMask:a,shrinkAxisMask:u};return Jr.runKernel(Hn,c,l)}});Ir.prototype.stridedSlice=function(t,e,n,r,s,i,o,a){return this.throwIfDisposed(),Vd(this,t,e,n,r,s,i,o,a)},Ir.prototype.subStrict=function(t){return this.throwIfDisposed(),ad(this,t)},Ir.prototype.sub=function(t){return this.throwIfDisposed(),jo(this,t)},Ir.prototype.sum=function(t,e){return this.throwIfDisposed(),Ho(this,t,e)};const Bd=os({tan_:function(t){const e={x:ss(t,"x","tan")};return Jr.runKernel(qn,e)}});Ir.prototype.tan=function(){return this.throwIfDisposed(),Bd(this)},Ir.prototype.tanh=function(){return this.throwIfDisposed(),Va(this)},Ir.prototype.tile=function(t){return this.throwIfDisposed(),Io(this,t)},Ir.prototype.toBool=function(){return this.throwIfDisposed(),qs(this,"bool")},Ir.prototype.toFloat=function(){return this.throwIfDisposed(),qs(this,"float32")},Ir.prototype.toInt=function(){return this.throwIfDisposed(),qs(this,"int32")};const Wd=os({topk_:function(t,e=1,n=!0){const r=ss(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const i={x:r},o={k:e,sorted:n},[a,u]=Jr.runKernel(Jn,i,o);return{values:a,indices:u}}});Ir.prototype.topk=function(t,e){return this.throwIfDisposed(),Wd(this,t,e)},Ir.prototype.transpose=function(t){return this.throwIfDisposed(),Xa(this,t)};const Ud=os({unique_:function(t,e=0){const n=ss(t,"x","unique","string_or_numeric");R(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:e},[i,o]=Jr.runKernel(Zn,r,s);return{values:i,indices:o}}});let Gd;function jd(){return null==Gd&&(Gd=Jr.backend.epsilon()),Gd}Ir.prototype.unique=function(t){return this.throwIfDisposed(),Ud(this,t)},Ir.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),Wl(this,t,e)},Ir.prototype.unstack=function(t){return this.throwIfDisposed(),Ga(this,t)},Ir.prototype.where=function(t,e){return this.throwIfDisposed(),Ha(t,this,e)},Ir.prototype.zerosLike=function(){return this.throwIfDisposed(),qa(this)};class Hd extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Hd.prototype)}}class qd extends Error{constructor(t){super(t),Object.setPrototypeOf(this,qd.prototype)}}class Xd extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Xd.prototype)}}class Kd extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Kd.prototype)}}class Jd extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Jd.prototype)}}Error;function Yd(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Zd(t,e){if(!t)throw new Jd(e)}function Qd(t,e){let n=0;for(const r of t)r===e&&n++;return n}function tf(t){return 1===t.length?t[0]:t}function ef(t){return Array.isArray(t)?t:[t]}function nf(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function rf(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,((t,e)=>e.toUpperCase()))}let sf={};function of(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function af(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach((t=>af(t)));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&"object"==typeof e&&(Array.isArray(e)||"ndarray"!==e.type||"number"!=typeof e.value?af(e):t[n]=e.value)}}}function uf(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let i;if(s in n)i=n[s];else if(s in sf)i=sf[s];else if(i=e[s],null==i)throw new Xd(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}{const i=t;if(null==i.className||null==i.config)throw new Xd(`${r}: Improper config format: ${JSON.stringify(i)}.\n'className' and 'config' must set.`);const o=i.className;let a,u;if(o in n?[a,u]=n[o]:o in sf?[a,u]=sf.className:o in e&&([a,u]=e[o]),null==a)throw new Xd(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const t={};for(const e of Object.keys(sf))t[e]=sf[e];for(const e of Object.keys(n))t[e]=n[e];i.config.customObjects=t;const e=Object.assign({},sf);for(const t of Object.keys(n))sf[t]=n[t];af(i.config);const r=u(a,i.config,n,s);return sf=Object.assign({},e),r}{const t=Object.assign({},sf);for(const t of Object.keys(n))sf[t]=n[t];const e=new a(i.config);return sf=Object.assign({},t),e}}}function cf(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function lf(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function hf(t){if(null==t)throw new Xd(`Invalid value in obj: ${JSON.stringify(t)}`);for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function df(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new Xd(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function ff(t,e,n=0,r=1/0){return Zd(n>=0),Zd(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every((t=>typeof t===e))}function pf(t,e){Array.isArray(t)?(R(t.length>0,(()=>`${e} is unexpectedly an empty array.`)),t.forEach(((t,n)=>pf(t,`element ${n+1} of ${e}`)))):R(Number.isInteger(t)&&t>0,(()=>`Expected ${e} to be a positive integer, but got ${mf(t)}.`))}function mf(t){return null===t?"null":Array.isArray(t)?"["+t.map((t=>mf(t))).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}function bf(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function yf(t,e){return Fi((()=>La(Ho(Go(t,t),e,!0))))}class gf extends Ei{getConfig(){return{}}}class xf extends gf{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Fi((()=>{const e=yf(t,this.axis),n=fo(e,0,this.maxValue);return Go(t,Eo(n,Wi(jd(),e)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}xf.className="MaxNorm",Ai(xf);class wf extends gf{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Fi((()=>Eo(t,Wi(jd(),yf(t,this.axis)))))}getConfig(){return{axis:this.axis}}}wf.className="UnitNorm",Ai(wf);class vf extends gf{apply(t){return Na(t)}}vf.className="NonNeg",Ai(vf);class kf extends gf{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Fi((()=>{const e=yf(t,this.axis),n=Wi(Go(this.rate,fo(e,this.minValue,this.maxValue)),Go(1-this.rate,e));return Go(t,Eo(n,Wi(jd(),e)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}kf.className="MinMaxNorm",Ai(kf);const $f={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Nf(t){return of(t)}function Cf(t,e={}){return uf(t,Si.getMap().classNameMap,e,"constraint")}function Ef(t){if(null==t)return null;if("string"==typeof t){return Cf({className:t in $f?$f[t]:t,config:{}})}return t instanceof gf?t:Cf(t)}const Sf=["channelsFirst","channelsLast"],Af=["nearest","bilinear"],Rf=["valid","same","causal"],Tf=["max","avg"],Of=["sum","mul","concat","ave"],Ff=new Map;function If(t){df(Sf,"DataFormat",t)}function _f(t){df(Rf,"PaddingMode",t)}function Mf(t){df(Tf,"PoolMode",t)}const Df=[];function Lf(t,e){Df.push(t);try{const t=e();return Df.pop(),t}catch(t){throw Df.pop(),t}}function Pf(t){if(!Bf(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===Df.length?"":Df.join("/")+"/")+t}function zf(t){if(!Bf(t))throw new Error("Not a valid tensor name: '"+t+"'");Ff.has(t)||Ff.set(t,0);const e=Ff.get(t);if(Ff.set(t,Ff.get(t)+1),e>0){const n=`${t}_${e}`;return Ff.set(n,1),n}return t}const Vf=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Bf(t){return!!t.match(Vf)}function Wf(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function Uf(t){return Ba(t=Array.isArray(t)?new Float32Array(t):t)}function Gf(t){return Qo(Uf(t)).dataSync()[0]}function jf(t){return Uo(Uf(t)).dataSync()[0]}function Hf(t,e){if(e<t)throw new Xd(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function qf(t,e){return t.asType(e)}function Xf(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function Kf(t,e,n){return Fi((()=>{switch(t.rank){case 1:return Ta(t,e,n);case 2:return Oa(t,[e,0],[n,t.shape[1]]);case 3:return Fa(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Ia(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return Ra(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return Ra(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new Xd(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Jf(t,e,n){return Fi((()=>{switch(t.rank){case 1:return Ta(t,e,n);case 2:return Oa(t,[0,e],[t.shape[0],n]);case 3:return Fa(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Ia(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new Xd(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Yf(t,e,n,r){return Fi((()=>{switch(t.rank){case 1:return Ta(t,e,n);case 2:switch(r){case 1:return Kf(t,e,n);case 2:return Jf(t,e,n);default:throw new Xd(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return Kf(t,e,n);case 2:return Fa(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return Jf(t,e,n);default:throw new Xd(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return Kf(t,e,n);case 2:return Ia(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Ia(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return Jf(t,e,n);default:throw new Xd(`The axis is not within the rank of the tensor ${r}`)}default:throw new Xd(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Zf(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),po(t,e)}function Qf(t,e){switch(t.rank){case 1:return mo([t,e]);case 2:return bo([t,e],0);case 3:return yo([t,e],0);case 4:return go([t,e],0);default:throw new Xd(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}function tp(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new Xd(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return Io(t,e)}function ep(t,e=0,n=1,r,s){return ka(t,e,n,r,s)}function np(t,e,n,r){if(t.rank<2||e.rank<2)throw new Kd(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new Kd(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${e.shape}`)}if(2===t.rank&&2===e.rank){return pu({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?ip(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),i=s.pop();t=t.reshape([-1,i]);const o=e.shape.slice(),a=o.pop(),u=o.pop(),c=[...o,a],l=Array.from({length:e.rank},((t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n));e=e.transpose(l).reshape([u,-1]);const h=[...s,...c];return pu({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?ip(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function rp(t,e,n){return Fi((()=>(e=Array.isArray(e)?Ba(e,"int32"):e.toInt(),Lo(t,e,n))))}function sp(t){return Go(t,t)}function ip(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new Xd(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${t}`);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new Xd(`Unsupported input rank by biasAdd: ${e.rank}`)}function op(t,e,n){return Fi((()=>(null==n&&(n="channelsLast"),If(n),t.add(ip(t.rank,e,n)))))}function ap(t,e,n,r){return Fi((()=>Ka(t,e,n,r)))}function up(t,e,n=!1){return n?t():e()}const cp=["fanIn","fanOut","fanAvg"],lp=["normal","uniform","truncatedNormal"];class hp extends Ei{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class dp extends hp{apply(t,e){return pa(t,e)}}dp.className="Zeros",Ai(dp);class fp extends hp{apply(t,e){return ma(t,e)}}fp.className="Ones",Ai(fp);class pp extends hp{constructor(t){if(super(),"object"!=typeof t)throw new Xd(`Expected argument of type ConstantConfig but got ${t}`);if(void 0===t.value)throw new Xd(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return Fi((()=>Go(zi(this.value),ma(t,e))))}getConfig(){return{value:this.value}}}pp.className="Constant",Ai(pp);class mp extends hp{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return $a(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}mp.className="RandomUniform",Ai(mp);class bp extends hp{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Kd(`randomNormal does not support dType ${e}.`);return ep(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}bp.className="RandomNormal",Ai(bp);class yp extends hp{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Kd(`truncatedNormal does not support dType ${e}.`);return Ua(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}yp.className="TruncatedNormal",Ai(yp);class gp extends hp{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Fi((()=>{if(2!==t.length||t[0]!==t[1])throw new Xd("Identity matrix initializer can only be used for 2D square matrices.");return Go(this.gain,_o(t[0]))}))}getConfig(){return{gain:this.gain}}}gp.className="Identity",Ai(gp);class xp extends hp{constructor(t){if(super(),t.scale<0)throw new Xd(`scale must be a positive float. Got: ${t.scale}`);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,df(cp,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){df(lp,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(If(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=Wf(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=Wf(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=Wf(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let i=this.scale;if("fanIn"===this.mode?i/=Math.max(1,r):"fanOut"===this.mode?i/=Math.max(1,s):i/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(i);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Kd(`${this.getClassName()} does not support dType ${e}.`);return Ua(t,0,n,e,this.seed)}{const n=Math.sqrt(3*i);return $a(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}xp.className="VarianceScaling",Ai(xp);class wp extends xp{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return xp.className}}wp.className="GlorotUniform",Ai(wp);class vp extends xp{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return xp.className}}vp.className="GlorotNormal",Ai(vp);class kp extends xp{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return xp.className}}kp.className="HeNormal",Ai(kp);class $p extends xp{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return xp.className}}$p.className="HeUniform",Ai($p);class Np extends xp{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return xp.className}}Np.className="LeCunNormal",Ai(Np);class Cp extends xp{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return xp.className}}Cp.className="LeCunNormal",Ai(Cp);class Ep extends hp{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new Kd("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Fi((()=>{if(t.length<2)throw new Kd("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=ep(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=tc.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),Go(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Ep.className="Orthogonal",Ai(Ep);const Sp={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Ap(t,e={}){return uf(t,Si.getMap().classNameMap,e,"initializer")}function Rp(t){return of(t)}function Tp(t){if("string"==typeof t){const e=t in Sp?Sp[t]:t;if("GlorotNormal"===e)return new vp;if("GlorotUniform"===e)return new wp;if("HeNormal"===e)return new kp;if("HeUniform"===e)return new $p;if("LeCunNormal"===e)return new Np;if("LeCunUniform"===e)return new Cp;{const t={};return t.className=e,t.config={},Ap(t)}}return t instanceof hp?t:Ap(t)}let Op=0;function Fp(){return Op++}const Ip={};function _p(t=""){return t in Ip||(Ip[t]=0),Ip[t]+=1,t+Ip[t].toString()}function Mp(t){return Array.isArray(t)&&Array.isArray(t[0])}function Dp(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function Lp(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new Xd(`Expected Tensor length to be 1; got ${t.length}`);e=t[0]}else e=t;return e}function Pp(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new Xd(`Expected exactly 1 Shape; got ${t.length}`)}return t}function zp(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce(((t,e)=>t*e));return e}const Vp="Variable";class Bp{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Fp(),n=null==n?Vp:n,this.originalName=Pf(n),this.name=zf(this.originalName),this.trainable_=r,this.constraint=s,this.val=function(t,e=!0,n,r){return Jr.makeVariable(t,e,n,r)}(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Wp(t){return t.map((t=>t.read()))}function Up(t){t.forEach((t=>{t[0].write(t[1])}))}class Gp{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class jp{constructor(t,e,n,r,s,i,o){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=o,this.id=Fp(),null!=i&&(this.originalName=Pf(i),this.name=zf(this.originalName)),this.rank=e.length}}let Hp=0;class qp{constructor(t,e){this.callArgs=e,this.id=Hp++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Xp=0;class Kp extends Ei{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Xp++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=nf(t)+"_"+_p(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new qd(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new Xd(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return tf(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return tf(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Hd(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Hd(`Layer ${this.name} is not connected, no input to return.`);return tf(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Hd(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Hd(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return tf(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((t=>t()))}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach((e=>e.trainable=t)),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((t=>t.trainable)):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((t=>!t.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=ef(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=ef(this.inputSpec);if(t.length!==e.length)throw new Xd(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const i=r.rank;if(null!=s.ndim&&i!==s.ndim)throw new Xd(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(null!=s.maxNDim&&i>s.maxNDim)throw new Xd(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(null!=s.minNDim&&i<s.minNDim)throw new Xd(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Xd(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),i=s.axes[e],o=r>=0?t[r]:t[t.length+r];if(null!=i&&-1===[i,null].indexOf(o))throw new Xd(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${i} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],i=r.shape[t];if(null!=e&&null!=i&&e!==i)throw new Xd(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=ef(t);let r=!0;for(const t of n)if(!(t instanceof jp)){r=!1;break}let s=!0;for(const t of n)if(t instanceof jp){s=!1;break}if(r===s)throw new Xd("Arguments to apply() must be all SymbolicTensors or all Tensors");return Lf(this.name,(()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of ef(t))e.push(n.shape);this.build(tf(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=ef(r),i=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),i.push(t);if(r=tf(i),null!=this.activityRegularizer)throw new Kd("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=ef(t);const e=[];for(const n of t)e.push(n.shape);return tf(e)}(t),r=this.computeOutputShape(n);let s;const i="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new jp(i,n,this,ef(t),e,this.name,r))):new jp(i,r,this,ef(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new Kd("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)})),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Hd(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new Hd(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new qd(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return zp(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Wp(t?this.trainableWeights:this.weights)}setWeights(t){Fi((()=>{const e=this.weights;if(e.length!==t.length)throw new Xd(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=Wp(e);for(let s=0;s<r.length;++s){const i=r[s],o=e[s],a=t[s];if(!_(i.shape,a.shape))throw new Xd(`Layer weight shape ${i.shape} not compatible with provided weight shape ${a.shape}`);n.push([o,a])}Up(n)}))}addWeight(t,e,n,r,s,i,o){if(-1!==this._addedWeightNames.indexOf(t))throw new Xd(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Tp("zeros"));const a=r.apply(e,n),u=new Bp(a,n,t,i,o);return a.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==i&&(i=!0),i?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=ef(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach((t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return e}addInboundNode(t,e,n,r,s,i,o=null){const a=ef(t);e=ef(e),n=ef(n),r=ef(r),s=Dp(s),i=Dp(i);const u=[],c=[],l=[];for(const t of a)u.push(t.sourceLayer),c.push(t.nodeIndex),l.push(t.tensorIndex);new qp({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:l,inputTensors:a,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:i},o);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach((t=>t.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Jp(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const r=Jp(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of r)-1===e.indexOf(t)&&e.push(t)}return e}}}class Yp extends Kp{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:_p("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new Xd("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new Xd("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new Xd("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new jp(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new qp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new Xd(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function Zp(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const i=t[s];if("number"!=typeof i){const t=i;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Ii(r)}}function Qp(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var tm;Yp.className="InputLayer",Ai(Yp),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(tm||(tm={}));class em{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class nm{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class rm extends em{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=Fi((()=>Wi(this.totals[t],Go(r,n))));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Fi((()=>{const n=Go(Eo(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),_i(e[t])})))}}class sm extends em{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let i=0;i<s.length;++i)if("number"!=typeof s[i]){const o=s[i];t.push(o.data()),e.push(r),n.push(i)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class im extends em{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");X(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=Er();return(...s)=>{const i=Er();return i-r<e||(r=i,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Zp(n),r.push(this.yield(t,e,n))),r.push(hc()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Zp(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Zp(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(hc()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Zp(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Zp(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(hc()):X(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Zp(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Zp(t),await this.trainEnd(t))}}function om(t,e){if(null==t&&(t={}),t instanceof em)return[t];if(Array.isArray(t)&&t[0]instanceof em)return t;return ef(t).map((t=>new im(t,e)))}class am{constructor(){}static registerCallbackConstructor(t,e){R(t>=0&&Number.isInteger(t),(()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`)),am.checkForDuplicate(e),null==am.constructors[t]&&(am.constructors[t]=[]),am.constructors[t].push(e)}static checkForDuplicate(t){for(const e in am.constructors){am.constructors[+e].forEach((e=>{if(e===t)throw new Xd("Duplicate callback constructor.")}))}}static clear(){am.constructors={}}static createCallbacks(t){const e=[];for(const n in am.constructors){const r=+n;t>=r&&e.push(...am.constructors[r])}return e.map((t=>new t))}}function um(t,e,n,r,s,i,o,a,u){const c=new sm,l=[new rm,...am.createCallbacks(e)];null!=t&&l.push(...t),l.push(c);const h=new nm(l);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:i,batchSize:o,verbose:e,doValidation:a,metrics:u}),{callbackList:h,history:c}}function cm(t,e={},n=!1){return uf(t,Si.getMap().classNameMap,e,"layer",n)}function lm(t,e){return Fi((()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=Ho(sp(t),e,!0),r=Mo(n.shape,jd()),s=La(Yo(n,r));return Eo(t,s)}))}function hm(t,e){return Fi((()=>Zo(sp(jo(e,t)),-1)))}function dm(t,e){return Fi((()=>Zo(Bi(jo(e,t)),-1)))}function fm(t,e){return Fi((()=>{const n=jo(t,e),r=fo(Bi(t),jd(),Number.MAX_VALUE),s=Bi(Eo(n,r));return Go(100,Zo(s,-1))}))}function pm(t,e){return Fi((()=>{const n=fo(e,jd(),Number.MAX_VALUE),r=Bo(Wi(1,n)),s=fo(t,jd(),Number.MAX_VALUE),i=Bo(Wi(1,s));return Zo(sp(jo(r,i)),-1)}))}function mm(t,e,n=!1){return Fi((()=>{if(n)e=_a(e);else{const t=Ho(e,e.shape.length-1,!0);e=Eo(e,t)}return e=fo(e,jd(),1-jd()),ha(Ho(Go(t.toFloat(),Bo(e)),e.shape.length-1))}))}function bm(t,e,n=!1){return Fi((()=>{const r=Do(function(t){const e=[Wf(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=fo(e,jd(),1-jd())).shape;return mm(fa(r,s[s.length-1]).reshape(s),e,n)}))}function ym(t,e){return Fi((()=>{let n;return n=fo(e,jd(),1-jd()),n=Bo(Eo(n,jo(1,n))),Zo(function(t,e){if(!_(t.shape,e.shape))throw new Xd(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Fi((()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())}))}(t,n),-1)}))}function gm(t,e){return Fi((()=>{const n=fo(t,jd(),1),r=fo(e,jd(),1);return Ho(Go(t,Bo(Eo(n,r))),-1)}))}function xm(t,e){return Fi((()=>{const n=lm(t,-1),r=lm(e,-1),s=Go(n,r);return ha(Ho(s,-1))}))}am.constructors={};const wm={meanSquaredError:hm,meanAbsoluteError:dm,meanAbsolutePercentageError:fm,meanSquaredLogarithmicError:pm,squaredHinge:function(t,e){return Fi((()=>{const n=Yo(0,jo(1,Go(t,e)));return Zo(sp(n),-1)}))},hinge:function(t,e){return Fi((()=>{const n=Yo(0,jo(1,Go(t,e)));return Zo(n,-1)}))},categoricalHinge:function(t,e){return Fi((()=>{const n=Ho(Go(t,e),-1),r=Uo(Go(jo(1,t),e),-1);return Yo(0,Wi(1,jo(r,n)))}))},logcosh:function(t,e){return Fi((()=>{const n=Math.log(2),r=jo(e,t),s=jo(Wi(r,Ma(Go(-2,r))),n);return Zo(s,-1)}))},categoricalCrossentropy:mm,sparseCategoricalCrossentropy:bm,binaryCrossentropy:ym,kullbackLeiblerDivergence:gm,poisson:function(t,e){return Fi((()=>{const n=Bo(Wi(jd(),e));return Zo(jo(e,Go(t,n)),-1)}))},cosineProximity:xm};function vm(t){if("string"==typeof t){if(t in wm)return wm[t];let e=`Unknown loss ${t}`;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Xd(e)}return t}function km(t,e){return Fi((()=>{const n=Go(.5,ba(e)),r=qf(Po(e,n),t.dtype);return Zo(Oo(t,r),-1)}))}function $m(t,e){return Fi((()=>qf(Oo(ji(t,-1),ji(e,-1)),"float32")))}function Nm(t,e){return Fi((()=>Xo(t.equal(1),e.equal(1)).sum().cast("float32")))}function Cm(t,e){return ym(t,e)}function Em(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Oo(t,e).asType("float32")}const Sm=mm,Am=bm,Rm={binaryAccuracy:km,categoricalAccuracy:$m,precision:function(t,e){return Fi((()=>{const n=Nm(t,e),r=function(t,e){return Fi((()=>Xo(t.equal(0),e.equal(1)).sum().cast("float32")))}(t,e),s=n.add(r);return Ha(Po(s,0),n.div(s),0).cast("float32")}))},categoricalCrossentropy:Sm,sparseCategoricalCrossentropy:Am,mse:hm,MSE:hm,mae:dm,MAE:dm,mape:fm,MAPE:fm,cosine:xm};function Tm(t){if("string"==typeof t&&t in Rm)return Rm[t];if("string"!=typeof t&&null!=t)return t;throw new Xd(`Unknown metric ${t}`)}function Om(t){if(Zd(null!==t,`Unknown LossOrMetricFn ${t}`),"string"==typeof t)return t;{let e;for(const n of Object.keys(wm))if(wm[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Rm))if(Rm[n]===t){e=n;break}return void 0!==e?e:t.name}}const Fm=1048576;function Im(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!_m(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>Fm&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function _m(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if("string"!=typeof n)return!1;if(!_m(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!_m(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}function Mm(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),i=["Layer (type)","Output shape","Param #"];let o;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((t=>Math.floor(e*t)))),!s){i.push("Receives inputs"),o=[];for(const e in t.nodesByDepth)o.push(...t.nodesByDepth[e])}r("_".repeat(e)),Dm(i,n,r),r("=".repeat(e));const a=t.layers;for(let t=0;t<a.length;++t)s?Lm(a[t],n,r):Pm(a[t],n,o,r),r((t===a.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const u=function(t){let e;e=null!=t.collectedTrainableWeights?zp(t.collectedTrainableWeights):zp(t.trainableWeights);return e}(t),c=zp(t.nonTrainableWeights);r(`Total params: ${u+c}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${c}`),r("_".repeat(e))}function Dm(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function Lm(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}Dm([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function Pm(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const i=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];i.push(`${n}[${r}][${s}]`)}const o=t.name,a=t.getClassName(),u=0===i.length?"":i[0];Dm([`${o} (${a})`,s,t.countParams().toString(),u],e,r);for(let t=1;t<i.length;++t)Dm(["","","",i[t]],e,r)}function zm(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function Vm(t,e){if(null===t)return null;if("string"==typeof t)return rf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];zm(e,s,r)?n.push(r):n.push(Vm(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=rf(n);e[t]=Vm(r,t)}}return e}}function Bm(t,e){if(null==t)return null;if("string"==typeof t)return nf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];zm(e,s,r)?n.push(r):n.push(Bm(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n],s=nf(n);e[s]="name"!==n&&"className"!==n||"string"!=typeof r?Bm(r,n):r}return e}}class Wm{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Wm)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new Xd(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return qs(e,t.dtype)}catch(n){throw new Xd(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof jp){if(null==this.id2Value[t.id])throw new Xd(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new Xd(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof jp){if(null==this.id2Value[t.id])throw new Xd(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new Xd(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Ii(this.id2Mask)}}const Um={},Gm={};function jm(t,e,n,r){const s=null!=n&&n.training,i=Array.isArray(t),o=i?t:[t],a=o.map((t=>t.name)),u=[],c=e.names();for(const t of a)-1!==c.indexOf(t)?u.push(e.getValue(t)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const l=a.join(",")+"|"+e.names().join(",");let h,d;if(null==Um[l]){const t=function(t,e){R(null!=t&&t.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===t.length){const s=qm(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const i of t){const{sorted:t,recipientMap:o}=qm(i,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in o)null==r[t]&&(r[t]=new Set),o[t].forEach((e=>r[t].add(e)))}}return{sorted:n,recipientCounts:Hm(r)}}(o,e);h=t.sorted,d=t.recipientCounts,Um[l]=h,Gm[l]=d}h=Um[l],d={},s||Object.assign(d,Gm[l]);const f=new Wm(e);for(let t=0;t<h.length;++t){if(null!=r){const t=Oi().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const i=h[t],o=i.sourceLayer;if(o instanceof Yp)continue;const c=[],l=[],p=[];let m=!1;for(const t of i.inputs){const n=f.getValue(t),r=f.getMask(t);c.push(n),l.push(r),null!=r&&(m=!0),s||(d[t.name]--,0!==d[t.name]||e.hasKey(t)||-1!==a.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||p.push(n))}m&&((n=n||{}).mask=l[0]);const b=ef(o.apply(c,n));let y=null;o.supportsMasking&&(y=o.computeMask(c,l));const g=Xm(i),x=Array.isArray(g)?g:[g];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],b[t],Array.isArray(y)?y[0]:y);const e=a.indexOf(x[t].name);-1!==e&&(u[e]=b[t])}s||Ii(p)}return f.disposeMasks(),i?u:u[0]}function Hm(t){const e={};for(const n in t)e[n]=t[n].size;return e}function qm(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const i=[],o=[];for(i.push(t);i.length>0;){const t=i[i.length-1];if(n.has(t.name)){i.pop();continue}const e=o[o.length-1]===i.length-1;if(0===t.inputs.length||e)i.pop(),r.push(t),n.add(t.name),e&&o.pop();else{o.push(i.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||i.push(e)}}return{sorted:r,recipientMap:s}}function Xm(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class Km extends Kp{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=_p(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],lf(this.inputs).length!==this.inputs.length)throw new Xd(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((t=>t.name))}`);lf(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((t=>t.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;Zd(0===n,"input layer has >1 nodes"),Zd(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Yp))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map((t=>t.shape)),this.internalOutputShapes=this.outputs.map((t=>t.shape));const e={},n={},r={},s={},i={},o=[],a=(t,e,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=t.sourceLayer,s=t.nodeIndex,u=t.tensorIndex);const c=r.inboundNodes[s];if(-1!==n.indexOf(c))throw new qd(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(c))return;this.containerNodes.add(Km.nodeKey(r,s)),r.id in i||(i[r.id]=Object.keys(i).length),-1===n.indexOf(c)&&n.push(c);const l=c.inboundLayers.length;for(let t=0;t<l;t++){const r=c.inputTensors[t],s=c.inboundLayers[t],i=c.nodeIndices[t],o=c.tensorIndices[t];a(r,e,n,s,i,o)}for(e.push(c);n.indexOf(c)>=0;)n.splice(n.indexOf(c),1);o.push(c)},u=[],c=[];for(const t of this.outputs)a(t,u,c);const l=o.slice().reverse();for(const t of l){n[t.id]=t,t.id in e||(e[t.id]=0);let i=e[t.id];const o=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];i=Math.max(i,o),r[t.outboundLayer.id]=i,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=i;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],o=t.nodeIndices[r],a=s.inboundNodes[o],u=null==e[a.id]?0:e[a.id];e[a.id]=Math.max(i+1,u),n[a.id]=a}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const d={};for(const t in r){const e=r[t];e in d||(d[e]=[]),d[e].push(s[t])}let f=Object.keys(d).map((t=>parseInt(t,10))).sort(cf);this.layers=[];for(const t of f){const e=d[t];e.sort(((t,e)=>{const n=i[t.id],r=i[e.id];return n<r?-1:n>r?1:0}));for(const t of e)t instanceof Km&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,f=Object.keys(h).map((t=>parseInt(t,10))).sort(cf);const p=this.inputs.slice(),m=[];for(const t of f)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===p.indexOf(n))throw new qd(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${t.name}". The following previous layers were accessed without issue: ${m}`);for(const t of e.outputTensors)p.push(t);m.push(t.name)}}this.nodesByDepth=h;const b=this.layers.map((t=>t.name));for(const t of b){const e=b.filter((e=>e===t)).length;if(1!==e)throw new qd(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(b))}this.outboundNodes=[],this.inboundNodes=[],new qp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((t=>null)),outputMasks:this.outputs.map((t=>null)),inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs.map((t=>t.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach((e=>{e._trainableWeights.forEach((e=>e.trainable=t))})),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new Xd("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new Xd(`Duplicate weight name: ${e.originalName}`);n[e.originalName]=e,r++}const s=[];for(const r in t){let i=r;if(null==n[r]){const t=r.split("/");i=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[i])s.push([n[i],t[r]]);else if(e)throw new Xd(`Provided weight data has no target variable: ${r}`);delete n[i]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new Xd(`${t.length} of ${r} weights are not set: ${t}`)}Up(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.8.3",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=Bm(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Fi((()=>{t=ef(t);const n=new Wm;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return jm(this.outputs,n,e)}))}computeMask(t,e){return Fi((()=>{let n;return t=ef(t),n=null==e?Yd(null,t.length):ef(e),this.runInternalGraph(t,n)[1]}))}computeOutputShape(t){const e=Dp(t);if(e.length!==this.inputLayers.length)throw new Xd(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(cf);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((t=>t.id)).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],i=t.nodeIndices[e],o=t.tensorIndices[e],a=n[`${s.name}_${i}_${o}`];r.push(a)}const s=Dp(e.computeOutputShape(tf(r))),i=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${i}_${t}`]=s[t]}}}const s=[],i=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;i.push(s)}for(let t=0;t<i.length;t++){const e=i[t];Zd(e in n),s.push(n[e])}return tf(s)}runInternalGraph(t,e){null==e&&(e=Yd(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],i=t[r],o=e[r];n[s.id]=[i,o]}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(cf);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,i=new Array;for(const t of r)t.id in n&&i.push(n[t.id]);if(i.length===r.length){let r,o,a,u,c={};if(null!=t.callArgs&&(c=t.callArgs),1===i.length){const[t,n]=i[0];null==c.mask&&(c.mask=n),a=ef(e.call(t,c)),u=ef(e.computeMask(t,n)),r=[t],o=[n]}else r=i.map((t=>t[0])),o=i.map((t=>t[1])),null==c.mask&&(c.mask=o),a=ef(e.call(r,c)),u=ef(e.computeMask(r,o));if(e.activityRegularizer)throw new Kd("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=a[t],i=u[t];n[e.id]=[r,i]}}}}const s=[],i=[],o=[];for(const t of this.outputs){Zd(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];o.push(e.shape),s.push(e),i.push(r)}return[s,i,o]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof Km?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=Km.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new Xd(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new Xd("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new Xd(`No such layer: ${t}`)}calculateLosses(){return Fi((()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=Km.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t}))}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),i=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=Km.nodeKey(t,n);let o={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],i=r.nodeIndices[n],a=r.tensorIndices[n];let u=e[Km.nodeKey(s,i)];null==u&&(u=0),t.push([s.name,u,a,o])}i.push(t)}}}const o={};o.name=t.name,o.className=r,o.config=s,o.inboundNodes=i,n.push(o)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],i=Km.nodeKey(n,s);if(!this.containerNodes.has(i))continue;let o=e[i];null==o&&(o=0);const a=this.inputLayersTensorIndices[t];r.push([n.name,o,a])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],i=Km.nodeKey(n,r);if(!this.containerNodes.has(i))continue;let o=e[i];null==o&&(o=0);const a=this.outputLayersTensorIndices[t];s.push([n.name,o,a])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},i={};function o(t,e){t.name in i?i[t.name].push(e):i[t.name]=[e]}function a(t,e){const n=[];let r;for(const i of e){const a=i[0],u=i[1],c=i[2];if(r=null==i[3]?{}:i[3],!(a in s))return void o(t,e);const l=s[a];if(l.inboundNodes.length<=u)return void o(t,e);const h=l.inboundNodes[u];n.push(h.outputTensors[c])}n.length>0&&t.apply(tf(n),r)}function u(t){const n=t.name,i=cm(t,null!=e.customObjects?e.customObjects:{});i.setFastWeightInitDuringBuild(r),s[n]=i;t.inboundNodes.forEach((t=>{if(!(t instanceof Array))throw new Xd(`Corrupted configuration, expected array for nodeData: ${t}`);o(i,t)}))}const c=e.name,l=e.layers;for(const t of l)u(t);for(;!hf(i);)for(const t of l){const e=s[t.name];if(e.name in i){const t=i[e.name];delete i[e.name];for(const n of t)a(e,n)}}const h=[],d=[],f=e.inputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];Zd(e in s);const i=s[e].inboundNodes[n].outputTensors;h.push(i[r])}const p=e.outputLayers;for(const t of p){const e=t[0],n=t[1],r=t[2];Zd(e in s);const i=s[e].inboundNodes[n].outputTensors;d.push(i[r])}return new t({inputs:h,outputs:d,name:c})}get stateful(){if(this._stateful)throw new Xd("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Fi((()=>{this.layers.forEach((t=>{t.stateful&&t.resetStates()}))}))}}function Jm(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>null));if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach((e=>{e in t?n.push(t[e]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}function Ym(t,e){return Jm(t,e,"classWeight")}async function Zm(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Fi((()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await e.data());Ii(e);const s=[];return r.forEach((t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])})),Ba(s,"float32")}return null}function Qm(t,e){return Go(t,e)}function tb(t,e){let n,r;const s=e;n=s.xs,r=s.ys,R(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`));const i=eb("input",t.inputNames,n),o=eb("output",t.outputNames,r),a=i[0].shape[0];R(i.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`)),R(o.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`));for(let e=0;e<i.length;e++)R(i[e].shape[0]===a,(()=>`Batch size mismatch: input ${t.inputNames[e]} has ${i[e].shape[0]}; expected  ${a} based on input ${t.inputNames[0]}.`));for(let e=0;e<o.length;e++)R(o[e].shape[0]===a,(()=>`Batch size mismatch: output ${t.outputNames[e]} has ${o[e].shape[0]}; expected  ${a} based on input ${t.inputNames[0]}.`));return{xs:i,ys:o}}function eb(t,e,n){if(n instanceof Ir)return[n];if(Array.isArray(n))return R(n.length===e.length,(()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`)),n;{const r=[];for(const s of e){if(null==n[s])throw new Xd(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function nb(t,e,n){const r=null!=n.batchesPerEpoch;if(R(null!=t.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),R(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),R(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),R(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),R(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let i,o;if(s)if(rb(n.validationData))R(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const t=function(t){if(3===t.length)throw new Kd("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);i=t.xs,o=t.ys}const a=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let c;c=s?u.slice().concat(u.map((t=>"val_"+t))):u.slice();const l=om(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=um(l,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,c);d.setModel(t),t.history=f,await d.onTrainBegin(),t.stopTraining_=!1;let p=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;p<n.epochs;){const c={};await d.onEpochBegin(p);let l=0,h=0;for(r||(m=await e.iterator());!r||l<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${l} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=tb(t,e.value),i={};i.batch=h,i.size=r[0].shape[0],await d.onBatchBegin(h,i);const o=[];if(null!=n.classWeight){const e=Ym(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)o.push(await Zm(s[t],null,e[t]))}const c=r.concat(s).concat(o),f=a(c);Ii(c);for(let t=0;t<u.length;++t){const e=u[t],n=f[t];i[e]=n,_i(n)}await d.onBatchEnd(h,i),Qp(i),h++,l++}if(r?l>=n.batchesPerEpoch:e.done){if(s){let e;e=rb(n.validationData)?ef(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):ef(t.evaluate(i,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)c[`val_${t.metricsNames[n]}`]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(p,c),p++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function rb(t){return"function"==typeof t.iterator}function sb(t){R(t>0&&Number.isInteger(t),(()=>`batchSize is required to be a positive integer, but got ${t}`))}function ib(t,e,n){return null==t?[null]:Array.isArray(t)?t.map((t=>Kf(t,e,n-e))):Kf(t,e,n-e)}function ob(t,e){return Fi((()=>null==t?null:Array.isArray(t)?t.map((t=>ob(t,e))):rp(t,"int32"===e.dtype?e:e.toInt())))}function ab(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function ub(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,i,o,a,u,c,l;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;sb(h);const d=!1,f=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,d,h);s=f[0],i=f[1],l=f[2];let p,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Kd("validationData including sample weights is not supported yet."):new Xd(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);o=r.validationData[0],a=r.validationData[1];const e=!0,n=await t.standardizeUserData(o,a,null,null,e,h);u=n[0],c=n[1],p=u.concat(c)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];u=ib(s,t,e),s=ib(s,0,t),c=ib(i,t,e),i=ib(i,0,t),p=u.concat(c)}else null!=r.validationSteps&&(m=!0);const b=s.concat(i).concat(l);t.checkTrainableWeightsConsistency();const y=t.makeTrainFunction(),g=t.getDedupedMetricsNames();let x,w;m?(t.makeTestFunction(),x=t.testFunction,w=g.slice().concat(g.map((t=>"val_"+t)))):(x=null,p=[],w=g.slice());const v=om(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,i,o,a,u,c,l,h,d,f,p){null==s&&(s=32),null==i&&(i=1),null==l&&(l=!0),null==d&&(d=0);let m=!1;if(null!=u&&null!=c&&(m=!0),null!=p&&(m=!0,null==f))throw new Xd("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const b=t.checkNumSamples(n,s,f,"steps_per_epoch");let y;null!=b&&(y=Hf(0,b)),null==o&&(o=1);const{callbackList:g,history:x}=um(a,o,i,d,b,f,s,m,h);g.setModel(t),t.history=x,await g.onTrainBegin(),t.stopTraining_=!1;for(let o=d;o<i;++o){await g.onEpochBegin(o);const i={};if(null!=f)throw new Kd("stepsPerEpoch mode is not implemented yet.");{if("batch"===l)throw new Kd("batch shuffling is not implemneted yet");l&&E(y);const o=Ba(y),a=ab(b,s);for(let l=0;l<a.length;++l){const h={};if(await g.onBatchBegin(l,h),Fi((()=>{const d=a[l][0],f=a[l][1],p=Kf(o,d,f-d);h.batch=l,h.size=f-d;const b=ob(n,p),y=e(b);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,_i(n)}if(l===a.length-1&&m){const e=t.testLoop(u,c,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];_i(s),i["val_"+n]=s}}})),await g.onBatchEnd(l,h),Qp(h),t.stopTraining_)break}o.dispose()}if(await g.onEpochEnd(o,i),t.stopTraining_)break}return await g.onTrainEnd(),await t.history.syncData(),t.history}(t,y,b,g,h,r.epochs,r.verbose,v,x,p,r.shuffle,w,r.initialEpoch,null,null)}finally{t.isTraining=!1,lb(s,e),lb(i,n),lb(u,o),lb(c,a),null!=l&&Ii(l)}}function cb(t){const e=[];t instanceof Ir&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(Xf(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function lb(t,e){if(null==t)return;const n=[];if(e instanceof Ir)n.push(e.id);else if(Array.isArray(e))e.forEach((t=>n.push(t.id)));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof Ir)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach((t=>{-1===n.indexOf(t.id)&&r.push(t)}));else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((t=>{t.isDisposed||t.dispose()}))}function hb(t){return Array.isArray(t)}function db(t){return!function(t){return t instanceof Ir}(t)&&!hb(t)}function fb(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(hb(t)&&t.length>0)e=!0;else if(db(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new Xd(`Error when checking model ${s} expected no data, but got ${t}`)}return[]}if(null==t)return e.map((t=>null));let i;if(db(t)){t=t,i=[];for(const n of e){if(null==t[n])throw new Xd(`No data provided for "${n}". Need data for each key in: ${e}`);i.push(t[n])}}else if(hb(t)){if((t=t).length!==e.length)throw new Xd(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${t}`);i=t}else{if(t=t,e.length>1)throw new Xd(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${t.shape}`);i=[t]}if(i=cb(i),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const o=i[t];if(o.shape.length!==n[t].length)throw new Xd(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape ${o.shape}`);for(let i=0;i<n[t].length;++i){if(0===i&&!r)continue;const a=o.shape[i],u=n[t][i];if(null!=u&&u>=0&&a!==u)throw new Xd(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${o.shape}].`)}}return i}function pb(t,e,n,r=!0,s=""){let i;if(Array.isArray(t)){if(t.length!==e.length)throw new Xd(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);i=t}else{if(e.length>1)throw new Xd(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(t.shape)}.`);i=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const o=i[t];if(o.shape.length!==n[t].length)throw new Xd(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let i=0;i<n[t].length;++i){if(0===i&&!r)continue;const a=o.shape[i],u=n[t][i];if(null!=u&&u!==a)throw new Xd(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class mb extends Km{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new Xd("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Mm(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>cc.adagrad(.01),Adadelta:()=>cc.adadelta(1,.95,jd()),Adam:()=>cc.adam(.001,.9,.999,jd()),Adamax:()=>cc.adamax(.002,.9,.999,jd(),0),RMSProp:()=>cc.rmsprop(.001,.9,0,jd()),SGD:()=>cc.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new Xd(`Unknown Optimizer ${t}`)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof Vi))throw new Xd("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new Xd(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map((t=>vm(t)))}else{const n=vm(t.loss);this.outputs.forEach((t=>{e.push(n)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new Xd(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(vm(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Lf("loss",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}}));const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>[]));let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${t}`);n=t}if(Array.isArray(n))return e.map((t=>n));{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};Lf("metric",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,i;for(const o of e){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===ym?-1!==["accuracy","acc"].indexOf(o)?r=km:-1!==["crossentropy","ce"].indexOf(o)&&(r=Cm):this.lossFunctions[t]===bm?-1!==["accuracy","acc"].indexOf(o)?r=Em:-1!==["crossentropy","ce"].indexOf(o)&&(r=Am):-1!==["accuracy","acc"].indexOf(o)?r=$m:-1!==["crossentropy","ce"].indexOf(o)&&(r=Sm),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),i=r,n=""+s}else{const t=Tm(o);i=t,n=""+Om(o)}let e;Lf(n,(()=>{e=i})),s(t,n,e)}})(r[t])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;sb(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const i=s[0].concat(s[1]);this.makeTestFunction();const o=this.testFunction;return tf(this.testLoop(o,i,r,n.verbose,n.steps))}finally{lb(s[0],t),lb(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let i=[];if(n.verbose>0)throw new Kd("Verbose mode is not implemented yet.");R(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof e.next?e:await e.iterator();let a=0,u=0;for(;!r||u<n.batches;){const e=await o.next();if(i=Fi((()=>{if(e.value){const{xs:n,ys:r}=tb(t,e.value),o=n.concat(r),c=Fi((()=>s(o)));if(Ii(o),0===u)for(let t=0;t<c.length;++t)i.push(zi(0));const l=o[0].shape[0];for(let t=0;t<c.length;++t){const e=c[t],n=i[t];i[t]=Fi((()=>Wi(i[t],Go(l,e)))),u>0&&Ii(n)}Ii(c),a+=l,++u}return i})),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<i.length;++t){const e=i[t];i[t]=Eo(i[t],a),Ii(e)}return tf(i)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new Xd(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else{if(null==t)throw new Xd(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new Xd("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),i=new Wm;if(t instanceof Ir&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new Xd(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)i.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new Xd(`No value is provided for the model's input ${e.name}`);i.add(e,n)}const o=jm(s,i);return n?o:o[0]}retrieveSymbolicTensors(t){const e=Yd(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],i=s.map((t=>t.name));for(let r=0;r<t.length;++r){const o=i.indexOf(t[r]);if(-1!==o&&(e[r]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach(((e,r)=>{null==e&&n.push(t[r])})),new Xd(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,n=!1){return Fi((()=>{const r=this.checkNumSamples(t);if(n)throw new Kd("Verbose predictLoop() is not implemented yet.");const s=ab(r,e),i=this.outputs.map((t=>[]));for(let e=0;e<s.length;++e){Fi((()=>{const n=s[e][0],r=s[e][1],i=ib(t,n,r),o=[];if(Array.isArray(i))for(let t=0;t<i.length;++t)o.push({key:this.inputs[t],value:i[t]});else o.push({key:this.inputs[0],value:i});const a=new Wm(o);return jm(this.outputs,a)})).forEach(((t,e)=>i[e].push(t)))}return tf(i.map((t=>po(t,0))))}))}predict(t,e={}){const n=cb(t);pb(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return sb(r),this.predictLoop(n,r)}finally{lb(n,t)}}predictOnBatch(t){pb(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new qd("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===bm?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=lf(t.map((t=>t.shape[0])));r.sort();const s=lf(e.map((t=>t.shape[0])));if(s.sort(),r.length>1)throw new Xd(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((t=>t.shape)))}`);if(s.length>1)throw new Xd(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((t=>t.shape)))}`);if(r.length>0&&s.length>0&&!_(r,s))throw new Xd(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=fb(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=fb(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[hm,ym,mm];for(let s=0;s<t.length;++s){const i=t[s],o=e[s],a=n[s];if(null!=o){if(o===mm&&1===i.shape[i.shape.length-1])throw new Xd(`You are passing a target array of shape ${i.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const t=i.shape.slice(1),e=a.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new Xd(`A target Tensor with shape ${i.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new Xd(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,i){const[o,a]=this.standardizeUserDataXY(t,e,s,i);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const t=Ym(r,this.outputNames);u=[];for(let e=0;e<t.length;++e)u.push(await Zm(a[e],null,t[e]))}return[o,a,u]}testLoop(t,e,n,r=0,s){return Fi((()=>{const i=this.checkNumSamples(e,n,s,"steps"),o=[];if(r>0)throw new Kd("Verbose mode is not implemented yet.");if(null!=s)throw new Kd("steps mode in testLoop() is not implemented yet");{const r=ab(i,n),s=Ba(Hf(0,i));for(let n=0;n<r.length;++n){const i=r[n][0],a=r[n][1],u=Kf(s,i,a-i),c=ob(e,u),l=t(c);if(0===n)for(let t=0;t<l.length;++t)o.push(zi(0));for(let t=0;t<l.length;++t){const e=l[t];o[t]=Wi(o[t],Go(a-i,e))}}for(let t=0;t<o.length;++t)o[t]=Eo(o[t],i)}return o}))}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(Qd(t,r)>1){s+=`_${Qd(t.slice(0,n),r)}`}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],o=this.collectedTrainableWeights.map((t=>t.read()));return[this.optimizer_.minimize((()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const o=new Wm(t),a=jm(this.outputs,o,{training:!0});let u;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],a[t]);null!=s[t]&&(n=Qm(n,s[t]));const i=Zo(n);e.push(i),u=0===t?n:Wi(u,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=Zo(e(r[s],a[s]))}_i(n),i.push(n)}return u=Zo(u),this.calculateLosses().forEach((t=>{u=Wi(u,t)})),u}),!0,o)].concat(i)}}makeTestFunction(){this.testFunction=t=>Fi((()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let t=0;t<this.inputs.length;++t)i.push({key:this.inputs[t],value:r[t]});const o=new Wm(i),a=jm(this.outputs,o);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],i=Zo(r(s[t],a[t]));n=0===t?i:Wi(n,i),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],i=Zo(n(s[r],a[r]));e.push(i)}return e}))}async fit(t,e,n={}){return ub(this,t,e,n)}async fitDataset(t,e){return nb(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],i=this.makeTrainFunction()(r.concat(s)),o=[];for(const t of i){const e=await t.data();o.push(e[0])}return Ii(i),tf(o)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Oi().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Oi().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=nf(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map((t=>nf(t)))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=nf(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[nf(Om(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((t=>nf(Om(t))));{const t={};for(const e in this.metrics)t[e]=nf(Om(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=cm(Vm(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=rf(t.loss);else if(Array.isArray(t.loss))n=t.loss.map((t=>rf(t)));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=rf(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map((t=>rf(t)));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=rf(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=xs(t);if(0===e.length)throw new Xd(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Xd(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Xd("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await hs(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.8.3",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await hs(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=ms([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Im(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){Im(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}mb.className="Model",Ai(mb);class bb extends mb{}bb.className="Functional",Ai(bb);class yb extends mb{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:_p("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some((t=>t<0)))throw new Xd(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){const e=t instanceof yb||t instanceof mb;let n;if(e){if(n=t,1!==n.outputs.length)throw new Xd("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Xd("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new Xd("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=function(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new Xd("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new Yp({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new Xd(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new Xd("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=Jp(this.outputs[0])}this.inboundNodes=[],new qp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Yd(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(Pp(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new mb({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new qd("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new qd("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new qd("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new qd("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,i={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new Xd("Legacy serialization format not supported yet.");s=e}else R(null!=e.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=e.layers,delete e.layers,i=e;const o=new t(i);if(!(o instanceof yb))throw new Kd(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const t of s){const e=cm(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),o.add(e)}return o}set stopTraining(t){if(null==this.model)throw new Xd("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new Xd("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}yb.className="Sequential",Ai(yb);class gb extends Ei{getConfig(){return{}}}class xb extends gb{apply(t,e=1){return function(t,e=1){if(1!==e)throw new Kd(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return So(t)}(t,e)}}xb.className="elu",Ai(xb);class wb extends gb{apply(t){return Ea(t)}}wb.className="selu",Ai(wb);class vb extends gb{apply(t){return Na(t)}}vb.className="relu",Ai(vb);class kb extends gb{apply(t){return Fi((()=>ta(6,Na(t))))}}kb.className="relu6",Ai(kb);class $b extends gb{apply(t){return t}}$b.className="linear",Ai($b);class Nb extends gb{apply(t){return Aa(t)}}Nb.className="sigmoid",Ai(Nb);class Cb extends gb{apply(t){return function(t){return Fi((()=>{const e=Wi(.5,Go(.2,t));return fo(e,0,1)}))}(t)}}Cb.className="hardSigmoid",Ai(Cb);class Eb extends gb{apply(t){return Ma(t)}}Eb.className="softplus",Ai(Eb);class Sb extends gb{apply(t){return function(t){return Fi((()=>Eo(t,Bi(t).add(1))))}(t)}}Sb.className="softsign",Ai(Sb);class Ab extends gb{apply(t){return Va(t)}}Ab.className="tanh",Ai(Ab);class Rb extends gb{apply(t,e=-1){return _a(t,e)}}Rb.className="softmax",Ai(Rb);class Tb extends gb{apply(t,e=-1){return qo(t,e)}}Tb.className="logSoftmax",Ai(Tb);class Ob extends gb{apply(t,e=1){return Fi((()=>Aa(t.mul(e)).mul(t)))}}function Fb(t){return t.getClassName()}function Ib(t,e={}){return uf(t,Si.getMap().classNameMap,e,"activation")}function _b(t){if(null==t){const t={className:"linear",config:{}};return Ib(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},Ib(e)}return t instanceof gb?t:Ib(t)}function Mb(t){if(null!=t&&"object"!=typeof t)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${t}`)}Ob.className="swish",Ai(Ob);class Db extends Ei{}class Lb extends Db{constructor(t){super(),Mb(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Fi((()=>{let e=pa([1]);return this.hasL1&&(e=Wi(e,Ho(Go(this.l1,Bi(t))))),this.hasL2&&(e=Wi(e,Ho(Go(this.l2,sp(t))))),e.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}Lb.className="L1L2",Ai(Lb);const Pb={l1l2:"L1L2"};function zb(t){return of(t)}function Vb(t,e={}){return uf(t,Si.getMap().classNameMap,e,"regularizer")}function Bb(t){if(null==t)return null;if("string"==typeof t){return Vb({className:t in Pb?Pb[t]:t,config:{}})}return t instanceof Db?t:Vb(t)}class Wb extends Kp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=Lp(t);let n=Na(t);return null!=this.maxValue&&(n=fo(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}Wb.className="ReLU",Ai(Wb);class Ub extends Kp{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Lp(t);return Vo(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Ub.className="LeakyReLU",Ai(Ub);class Gb extends Kp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Tp(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Bb(t.alphaRegularizer),this.alphaConstraint=Ef(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new Xd(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=Pp(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new Gp({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=Lp(t),ga(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Rp(this.alphaInitializer),alphaRegularizer:zb(this.alphaRegularizer),alphaConstraint:Nf(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Gb.className="PReLU",Ai(Gb);class jb extends Kp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new Kd(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Lp(t);return So(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}jb.className="ELU",Ai(jb);class Hb extends Kp{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=Lp(t);return n.mul(qf(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}Hb.className="ThresholdedReLU",Ai(Hb);class qb extends Kp{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Rb).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=Lp(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Xb(t,e,n){if("number"==typeof t)return Yd(t,e);if(t.length!==e)throw new Xd(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const i=t[s];if((r=i)!==parseInt(r.toString(),10))throw new Xd(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number ${i}`)}return t;var r}function Kb(t,e,n,r,s=1){if(null==t)return t;let i;return i="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((i+r-1)/r)}function Jb(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+jf([n-e,0]);else{if("same"!==r)throw new Xd(`Unsupport padding mode: ${r}.`);t*=e}return t}function Yb(t,e){return Fi((()=>(If(e),"channelsFirst"===e?Xa(t,[0,2,3,1]):t)))}function Zb(t,e){return Fi((()=>(If(e),"channelsFirst"===e?Xa(t,[0,2,3,4,1]):t)))}function Qb(t,e,n,r=1,s="valid",i,o=1){return Fi((()=>{if(null==i&&(i="channelsLast"),If(i),3!==t.shape.length)throw new Xd(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);if(3!==e.shape.length)throw new Xd(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Xd(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if("channelsFirst"===i&&(t=Xa(t,[0,2,1])),"causal"===s)throw new Kd("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=wo(t,e,r,"same"===s?"same":"valid","NWC",o);return null!=n&&(a=op(a,n)),a}))}function ty(t,e,n,r=[1,1],s="valid",i,o,a=null){return Fi((()=>{if(null==i&&(i="channelsLast"),If(i),3!==t.rank&&4!==t.rank)throw new Xd(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new Xd(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=Yb(t,i);if("causal"===s)throw new Kd("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=cu({x:u,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:a}),"channelsFirst"===i&&(u=Xa(u,[0,3,1,2])),u}))}function ey(t,e,n,r=[1,1,1],s="valid",i,o){return Fi((()=>{if(null==i&&(i="channelsLast"),If(i),4!==t.rank&&5!==t.rank)throw new Xd(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);if(4!==e.rank&&5!==e.rank)throw new Xd(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);let a=Zb(t,i);if("causal"===s)throw new Kd("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=$o(a,e,r,"same"===s?"same":"valid","NDHWC",o),null!=n&&(a=op(a,n)),"channelsFirst"===i&&(a=Xa(a,[0,4,1,2,3])),a}))}qb.className="Softmax",Ai(qb);class ny extends Kp{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",ny.verifyArgs(e),this.rank=t,pf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Kd(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Xb(e.kernelSize,t,"kernelSize"),this.strides=Xb(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,_f(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,If(this.dataFormat),this.activation=_b(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Tp(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ef(e.biasConstraint),this.biasRegularizer=Bb(e.biasRegularizer),this.activityRegularizer=Bb(e.activityRegularizer),this.dilationRate=Xb(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Xd(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Xd(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Xd(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Zd("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!ff(t.kernelSize,"number",1,3))throw new Xd(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Fb(this.activation),useBias:this.useBias,biasInitializer:Rp(this.biasInitializer),biasRegularizer:zb(this.biasRegularizer),activityRegularizer:zb(this.activityRegularizer),biasConstraint:Nf(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class ry extends ny{constructor(t,e){super(t,e),this.kernel=null,ry.verifyArgs(e),this.filters=e.filters,pf(this.filters,"filters"),this.kernelInitializer=Tp(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ef(e.kernelConstraint),this.kernelRegularizer=Bb(e.kernelRegularizer)}build(t){t=Pp(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Xd(`The channel dimension of the input should be defined. Found ${t[e]}`);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Fi((()=>{let e;t=Lp(t);const n=null==this.bias?null:this.bias.read(),r=bf(this.activation.getClassName());if(null!=r&&2===this.rank)e=ty(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=Qb(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=ty(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Kd("convolutions greater than 3D are not implemented yet.");e=ey(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e}))}computeOutputShape(t){t=Pp(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=Kb(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:Rp(this.kernelInitializer),kernelRegularizer:zb(this.kernelRegularizer),kernelConstraint:Nf(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new Xd(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}class sy extends ry{constructor(t){super(2,t),sy.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!ff(t.kernelSize,"number",1,2))throw new Xd(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}sy.className="Conv2D",Ai(sy);class iy extends ry{constructor(t){super(3,t),iy.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new Xd(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}iy.className="Conv3D",Ai(iy);class oy extends sy{constructor(t){if(super(t),this.inputSpec=[new Gp({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Xd(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(4!==(t=Pp(t)).length)throw new Xd("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Xd("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Gp({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Fi((()=>{let e=Lp(t);if(4!==e.shape.length)throw new Xd(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${e.shape.length}`);const n=e.shape,r=n[0];let s,i;"channelsFirst"===this.dataFormat?(s=2,i=3):(s=1,i=2);const o=n[s],a=n[i],u=this.kernelSize[0],c=this.kernelSize[1],l=this.strides[0],h=this.strides[1],d=[r,Jb(o,l,u,this.padding),Jb(a,h,c,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Xa(e,[0,2,3,1]));let f=ko(e,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(f=Xa(f,[0,3,1,2])),null!=this.bias&&(f=op(f,this.bias.read(),this.dataFormat)),null!=this.activation&&(f=this.activation.apply(f)),f}))}computeOutputShape(t){const e=(t=Pp(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const i=this.kernelSize[0],o=this.kernelSize[1],a=this.strides[0],u=this.strides[1];return e[n]=this.filters,e[r]=Jb(e[r],a,i,this.padding),e[s]=Jb(e[s],u,o,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}oy.className="Conv2DTranspose",Ai(oy);class ay extends ry{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new Xd("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new Xd("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new Xd(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Tp(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Bb(e.depthwiseRegularizer),this.depthwiseConstraint=Ef(e.depthwiseConstraint),this.pointwiseInitializer=Tp(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Bb(e.pointwiseRegularizer),this.pointwiseConstraint=Ef(e.pointwiseConstraint)}build(t){if((t=Pp(t)).length<this.rank+2)throw new Xd(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new Xd(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new Gp({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Fi((()=>{let e;if(t=Lp(t),1===this.rank)throw new Kd("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Xa(t,[0,2,3,1])),e=Sa(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=op(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Xa(e,[0,3,1,2])),e}))}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=Rp(this.depthwiseInitializer),t.pointwiseInitializer=Rp(this.pointwiseInitializer),t.depthwiseRegularizer=zb(this.depthwiseRegularizer),t.pointwiseRegularizer=zb(this.pointwiseRegularizer),t.depthwiseConstraint=Nf(this.depthwiseConstraint),t.pointwiseConstraint=Nf(this.pointwiseConstraint),t}}ay.className="SeparableConv";class uy extends ay{constructor(t){super(2,t)}}uy.className="SeparableConv2D",Ai(uy);class cy extends ry{constructor(t){super(1,t),cy.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!ff(t.kernelSize,"number",1,1))throw new Xd(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}cy.className="Conv1D",Ai(cy);class ly extends Kp{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Fi((()=>{if(t=Lp(t),"channelsLast"===this.dataFormat){const e=Yf(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Yf(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Yf(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Yf(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ly.className="Cropping2D",Ai(ly);class hy extends Kp{constructor(t){var e;super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,If(this.dataFormat),this.interpolation=null==t.interpolation?"nearest":t.interpolation,e=this.interpolation,df(Af,"InterpolationFormat",e)}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return Fi((()=>{let e=Lp(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Xa(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?e.resizeNearestNeighbor([t,r]):e.resizeBilinear([t,r]);return Xa(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?e.resizeNearestNeighbor([t,r]):e.resizeBilinear([t,r])}}))}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}hy.className="UpSampling2D",Ai(hy);class dy extends ny{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Tp(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ef(t.depthwiseConstraint),this.depthwiseRegularizer=Bb(t.depthwiseRegularizer)}build(t){if((t=Pp(t)).length<4)throw new Xd(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new Xd(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Fi((()=>{let e=function(t,e,n=[1,1],r="valid",s,i){return Fi((()=>{null==s&&(s="channelsLast"),If(s);let o=Yb(t,s);if(4!==t.rank)throw new Xd(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);if(4!==e.rank)throw new Xd(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return o=No(o,e,n,"same"===r?"same":"valid","NHWC",i),"channelsFirst"===s&&(o=Xa(o,[0,3,1,2])),o}))}(t=Lp(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=op(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e}))}computeOutputShape(t){t=Pp(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Kb(e,this.kernelSize[0],this.padding,this.strides[0]),i=Kb(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,i]:[t[0],s,i,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=Rp(this.depthwiseInitializer),t.depthwiseRegularizer=zb(this.depthwiseRegularizer),t.depthwiseConstraint=Nf(this.depthwiseRegularizer),t}}function fy(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new Xd("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function py(t,e,n,r=!1,s,i,o=!1,a=!1){return Fi((()=>{const u=e.shape.length;if(u<3)throw new Xd(`Input should be at least 3D, but is ${u}D.`);const c=[1,0].concat(Hf(2,u));if(e=Xa(e,c),null!=i)throw new Kd("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=Fo(s,-1)),s=Xa(s,c)),r&&(e=Ca(e,0),null!=s&&(s=Ca(s,0)));const l=[];let h,d=n;const f=e.shape[0],p=Ga(e);let m,b;null!=s&&(m=Ga(s));for(let e=0;e<f;++e){const n=p[e],r=Fi((()=>t(n,d)));if(null==s)h=r[0],d=r[1];else{const t=Fi((()=>{const t=m[e],n=ba(t).sub(t);return{output:r[0].mul(t).add(d[0].mul(n)),newStates:d.map(((e,s)=>r[1][s].mul(t).add(e.mul(n))))}}));h=t.output,d=t.newStates}a&&l.push(h)}if(a){b=za(l,1)}return[h,b,d]}))}dy.className="DepthwiseConv2D",Ai(dy);class my extends Kp{constructor(t){let e;if(super(t),null==t.cell)throw new Xd("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new $y({cells:t.cell}):t.cell,null==e.stateSize)throw new Xd("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new Gp({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return Hf(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((t=>null))}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Mp(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return Fi((()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map((t=>null));return[t].concat(e)}return t}))}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new Kd("Constants support is not implemented in RNN yet.");Mp(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new Gp({shape:[e,null,...n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!_(this.stateSpec.map((t=>t.shape[t.shape.length-1])),s))throw new Xd(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((t=>new Gp({shape:[null,t]})));this.stateful&&this.resetStates()}resetStates(t,e=!1){Fi((()=>{if(!this.stateful)throw new Hd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Xd("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>pa([n,t]))):this.states_=[pa([n,this.cell.stateSize])];else if(null==t)Ii(this.states_),null!=this.keptStates&&(Ii(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>pa([n,t]))):this.states_[0]=pa([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Xd(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);!0===e?this.keptStates.push(this.states_.slice()):Ii(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,i=[n,s];if(!_(r.shape,i))throw new Xd(`State ${e} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map((t=>_i(t.clone())))}))}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=fy(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let i=[],o=[];if(null!=n){e.initialState=n,i=i.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new Gp({shape:t.shape}));o=o.concat(this.stateSpec)}null!=r&&(e.constants=r,i=i.concat(r),this.numConstants=r.length);if(i[0]instanceof jp){const n=[t].concat(i),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const a=super.apply(n,e);return this.inputSpec=s,a}return super.apply(t,e)}call(t,e){return Fi((()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=Lp(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new Xd(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},a=py(((t,e)=>{const n=this.cell.call([t].concat(e),o);return[n[0],n.slice(1)]}),t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=a[0],c=a[1],l=a[2];this.stateful&&this.resetStates(l,r);const h=this.returnSequences?c:u;return this.returnState?[h].concat(l):h}))}getInitialState(t){return Fi((()=>{let e=pa(t.shape);return e=Ho(e,[1,2]),e=Xf(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((t=>t>1?tp(e,[1,t]):e)):this.cell.stateSize>1?[tp(e,[1,this.cell.stateSize])]:[e]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===my.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,t,e)}static fromConfig(t,e,n={}){const r=cm(e.cell,n);return new t(Object.assign(e,{cell:r}))}}my.className="RNN",Ai(my);class by extends Kp{}class yy extends by{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,pf(this.units,"units"),this.activation=_b(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Tp(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Tp(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Tp(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Bb(t.kernelRegularizer),this.recurrentRegularizer=Bb(t.recurrentRegularizer),this.biasRegularizer=Bb(t.biasRegularizer),this.kernelConstraint=Ef(t.kernelConstraint),this.recurrentConstraint=Ef(t.recurrentConstraint),this.biasConstraint=Ef(t.biasConstraint),this.dropout=Gf([1,jf([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Gf([1,jf([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Pp(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Fi((()=>{if(2!==(t=t).length)throw new Xd(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ny({ones:()=>ba(t),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ny({ones:()=>ba(n),rate:this.recurrentDropout,training:r}));const i=this.dropoutMask,o=this.recurrentDropoutMask;s=np(null!=i?Go(t,i):t,this.kernel.read()),null!=this.bias&&(s=op(s,this.bias.read())),null!=o&&(n=Go(n,o));let a=Wi(s,np(n,this.recurrentKernel.read()));return null!=this.activation&&(a=this.activation.apply(a)),[a,a]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Fb(this.activation),useBias:this.useBias,kernelInitializer:Rp(this.kernelInitializer),recurrentInitializer:Rp(this.recurrentInitializer),biasInitializer:Rp(this.biasInitializer),kernelRegularizer:zb(this.kernelRegularizer),recurrentRegularizer:zb(this.recurrentRegularizer),biasRegularizer:zb(this.biasRegularizer),activityRegularizer:zb(this.activityRegularizer),kernelConstraint:Nf(this.kernelConstraint),recurrentConstraint:Nf(this.recurrentConstraint),biasConstraint:Nf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}yy.className="SimpleRNNCell",Ai(yy);class gy extends my{constructor(t){t.cell=new yy(t),super(t)}call(t,e){return Fi((()=>{null!=this.cell.dropoutMask&&(Ii(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ii(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return new t(e)}}gy.className="SimpleRNN",Ai(gy);class xy extends by{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new Xd("GRUCell does not support reset_after parameter set to true.");this.units=t.units,pf(this.units,"units"),this.activation=_b(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=_b(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Tp(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Tp(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Tp(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Bb(t.kernelRegularizer),this.recurrentRegularizer=Bb(t.recurrentRegularizer),this.biasRegularizer=Bb(t.biasRegularizer),this.kernelConstraint=Ef(t.kernelConstraint),this.recurrentConstraint=Ef(t.recurrentConstraint),this.biasConstraint=Ef(t.biasConstraint),this.dropout=Gf([1,jf([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Gf([1,jf([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=Pp(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Fi((()=>{if(2!==(t=t).length)throw new Xd(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ny({ones:()=>ba(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ny({ones:()=>ba(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,i=this.recurrentDropoutMask;let o,a,u;0<this.dropout&&this.dropout<1&&(t=Go(t,s[0]));let c=np(t,this.kernel.read());this.useBias&&(c=op(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Go(r,i[0]));const l=this.recurrentKernel.read(),[h,d]=Da(l,[2*this.units,this.units],l.rank-1),f=np(r,h),[p,m,b]=Da(c,3,c.rank-1),[y,g]=Da(f,2,f.rank-1);o=this.recurrentActivation.apply(Wi(p,y)),a=this.recurrentActivation.apply(Wi(m,g));const x=np(Go(a,r),d);u=this.activation.apply(Wi(b,x));const w=Wi(Go(o,r),Go(Wi(1,ha(o)),u));return[w,w]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Fb(this.activation),recurrentActivation:Fb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Rp(this.kernelInitializer),recurrentInitializer:Rp(this.recurrentInitializer),biasInitializer:Rp(this.biasInitializer),kernelRegularizer:zb(this.kernelRegularizer),recurrentRegularizer:zb(this.recurrentRegularizer),biasRegularizer:zb(this.biasRegularizer),activityRegularizer:zb(this.activityRegularizer),kernelConstraint:Nf(this.kernelConstraint),recurrentConstraint:Nf(this.recurrentConstraint),biasConstraint:Nf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}xy.className="GRUCell",Ai(xy);class wy extends my{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new xy(t),super(t)}call(t,e){return Fi((()=>{null!=this.cell.dropoutMask&&(Ii(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ii(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}wy.className="GRU",Ai(wy);class vy extends by{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,pf(this.units,"units"),this.activation=_b(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=_b(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Tp(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Tp(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Tp(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Bb(t.kernelRegularizer),this.recurrentRegularizer=Bb(t.recurrentRegularizer),this.biasRegularizer=Bb(t.biasRegularizer),this.kernelConstraint=Ef(t.kernelConstraint),this.recurrentConstraint=Ef(t.recurrentConstraint),this.biasConstraint=Ef(t.biasConstraint),this.dropout=Gf([1,jf([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Gf([1,jf([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=Pp(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends hp{apply(e,r){const s=t.apply([n]),i=(new fp).apply([n]),o=t.apply([2*n]);return Qf(Qf(s,i),o)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Fi((()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new Xd(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ny({ones:()=>ba(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ny({ones:()=>ba(r),rate:this.recurrentDropout,training:n,count:4}));const i=this.dropoutMask,o=this.recurrentDropoutMask;let a,u,c,l;0<this.dropout&&this.dropout<1&&(t=Go(t,i[0]));let h=np(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Go(r,o[0])),h=Wi(h,np(r,this.recurrentKernel.read())),this.useBias&&(h=op(h,this.bias.read()));const[d,f,p,m]=Da(h,4,h.rank-1);a=this.recurrentActivation.apply(d),u=this.recurrentActivation.apply(f),c=Wi(Go(u,s),Go(a,this.activation.apply(p))),l=this.recurrentActivation.apply(m);const b=Go(l,this.activation.apply(c));return[b,b,c]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Fb(this.activation),recurrentActivation:Fb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Rp(this.kernelInitializer),recurrentInitializer:Rp(this.recurrentInitializer),biasInitializer:Rp(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:zb(this.kernelRegularizer),recurrentRegularizer:zb(this.recurrentRegularizer),biasRegularizer:zb(this.biasRegularizer),activityRegularizer:zb(this.activityRegularizer),kernelConstraint:Nf(this.kernelConstraint),recurrentConstraint:Nf(this.recurrentConstraint),biasConstraint:Nf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}vy.className="LSTMCell",Ai(vy);class ky extends my{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new vy(t),super(t)}call(t,e){return Fi((()=>{null!=this.cell.dropoutMask&&(Ii(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ii(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}ky.className="LSTM",Ai(ky);class $y extends by{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Fi((()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let i;for(let o=0;o<this.cells.length;++o){const a=this.cells[o];n=r[o],i=0===o?[t[0]].concat(n):[i[0]].concat(n),i=a.call(i,e),s.push(i.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[i[0]].concat(n)}))}build(t){let e;Mp(t)&&(t=t[0]),t=t,this.cells.forEach(((n,r)=>{Lf(`RNNCell_${r}`,(()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]}))})),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map((t=>({className:t.getClassName(),config:t.getConfig()})))};return Object.assign({},t,e)}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(cm(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return Wp(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}Up(e)}}function Ny(t){const{ones:e,rate:n,training:r=!1,count:s=1}=t,i=()=>ap(e(),n),o=()=>up(i,e,r);if(!s||s<=1)return _i(o().clone());return Array(s).fill(void 0).map(o).map((t=>_i(t.clone())))}$y.className="StackedRNNCells",Ai($y);var Cy=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(t);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(t,r[s])&&(n[r[s]]=t[r[s]])}return n};class Ey extends my{constructor(t){if(t.unroll)throw new Kd("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new Kd("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new Gp({ndim:5})]}call(t,e){return Fi((()=>{if(null!=this.cell.dropoutMask&&(Ii(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ii(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new Xd("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return Fi((()=>{const{stateSize:e}=this.cell,n=t.shape,r=this.computeSingleOutputShape(n),s=pa([r[0],...r.slice(2)]);return Array.isArray(e)?Array(e.length).fill(s):[s]}))}resetStates(t,e=!1){Fi((()=>{if(!this.stateful)throw new Hd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new Xd("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>pa(s))):this.states_=[pa(s)];else if(null==t)Ii(this.states_),null!=this.keptStates&&(Ii(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>pa(s))):this.states_[0]=pa(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Xd(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):Ii(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],r=s;if(!_(n.shape,r))throw new Xd(`State ${e} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map((t=>_i(t.clone())))}))}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:r,padding:s,strides:i,dilationRate:o}=this.cell,a="channelsFirst"===e,u=t[a?3:2],c=t[a?4:3],l=Kb(u,r[0],s,i[0],o[0]),h=Kb(c,r[1],s,i[1],o[1]);return[...t.slice(0,2),...a?[n,l,h]:[l,h,n]]}}Ey.className="ConvRNN2D";class Sy extends vy{constructor(t){const{filters:e,kernelSize:n,strides:r,padding:s,dataFormat:i,dilationRate:o}=t;super(Object.assign({},t,{units:e})),this.filters=e,pf(this.filters,"filters"),this.kernelSize=Xb(n,2,"kernelSize"),this.kernelSize.forEach((t=>pf(t,"kernelSize"))),this.strides=Xb(r||1,2,"strides"),this.strides.forEach((t=>pf(t,"strides"))),this.padding=s||"valid",_f(this.padding),this.dataFormat=i||"channelsLast",If(this.dataFormat),this.dilationRate=Xb(o||1,2,"dilationRate"),this.dilationRate.forEach((t=>pf(t,"dilationRate")))}build(t){var e;t=Pp(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new Xd(`The channel dimension of the input should be defined. Found ${t[n]}`);const r=t[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;t=new((e=class extends hp{apply(t,e){return Zf([n.apply([r]),ma([r]),n.apply([2*r])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return Fi((()=>{if(3!==t.length)throw new Xd(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);const n=e.training||!1,r=t[0],s=t[1],i=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ny({ones:()=>ba(r),rate:this.dropout,training:n,count:4}));const o=this.dropoutMask,a=(t,e,n)=>e&&e[n]?Go(e[n],t):t;let u=a(r,o,0),c=a(r,o,1),l=a(r,o,2),h=a(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ny({ones:()=>ba(s),rate:this.recurrentDropout,training:n,count:4}));const d=this.recurrentDropoutMask;let f=a(s,d,0),p=a(s,d,1),m=a(s,d,2),b=a(s,d,3);const[y,g,x,w]=Da(this.kernel.read(),4,3),[v,k,$,N]=this.useBias?Da(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,v,this.padding),c=this.inputConv(c,g,k,this.padding),l=this.inputConv(l,x,$,this.padding),h=this.inputConv(h,w,N,this.padding);const[C,E,S,A]=Da(this.recurrentKernel.read(),4,3);f=this.recurrentConv(f,C),p=this.recurrentConv(p,E),m=this.recurrentConv(m,S),b=this.recurrentConv(b,A);const R=this.recurrentActivation.apply(Wi(u,f)),T=this.recurrentActivation.apply(Wi(c,p)),O=Wi(Go(T,i),Go(R,this.activation.apply(Wi(l,m)))),F=Go(this.recurrentActivation.apply(Wi(h,b)),this.activation.apply(O));return[F,F,O]}))}getConfig(){const t=super.getConfig(),{units:e}=t,n=Cy(t,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(t,e,n,r){const s=xo(t,e,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?op(s,n,this.dataFormat):s}recurrentConv(t,e){return xo(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Sy.className="ConvLSTM2DCell",Ai(Sy);class Ay extends Ey{constructor(t){const e=new Sy(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}Ay.className="ConvLSTM2D",Ai(Ay);class Ry extends Kp{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);const n=Lp(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return up((()=>ap(n,this.rate,r,this.seed)),(()=>n),t)}return t}))}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Ry.className="Dropout",Ai(Ry);class Ty extends Ry{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Ty.className="SpatialDropout1D",Ai(Ty);class Oy extends Kp{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,pf(this.units,"units"),this.activation=_b(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Tp(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Tp(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ef(t.kernelConstraint),this.biasConstraint=Ef(t.biasConstraint),this.kernelRegularizer=Bb(t.kernelRegularizer),this.biasRegularizer=Bb(t.biasRegularizer),this.activityRegularizer=Bb(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=Pp(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=Pp(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);const n=Lp(t),r=bf(this.activation.getClassName());let s;return null!=r?s=np(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=np(n,this.kernel.read()),null!=this.bias&&(s=op(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const t={units:this.units,activation:Fb(this.activation),useBias:this.useBias,kernelInitializer:Rp(this.kernelInitializer),biasInitializer:Rp(this.biasInitializer),kernelRegularizer:zb(this.kernelRegularizer),biasRegularizer:zb(this.biasRegularizer),activityRegularizer:zb(this.activityRegularizer),kernelConstraint:Nf(this.kernelConstraint),biasConstraint:Nf(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Oy.className="Dense",Ai(Oy);class Fy extends Kp{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Pp(t);for(const e of t.slice(1))if(null==e)throw new Xd(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],Wf(t,1)]}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);let n=Lp(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new Xd(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],Wf(t.shape,1)];return t.reshape(e)}(n)}))}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Fy.className="Flatten",Ai(Fy);class Iy extends Kp{constructor(t){super(t),this.supportsMasking=!0,this.activation=_b(t.activation)}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);const n=Lp(t);return this.activation.apply(n)}))}getConfig(){const t={activation:Fb(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Iy.className="Activation",Ai(Iy);class _y extends Kp{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Fi((()=>{return t=Lp(t),e=t,n=this.n,Fi((()=>{if(2!==e.shape.length)throw new Xd(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return tp(Xf(e,1),[1,n,1])}));var e,n}))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}_y.className="RepeatVector",Ai(_y);class My extends Kp{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,i=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==i)throw new Xd("Can only specifiy one unknown dimension.");i=t}else s*=e}const o=Wf(t);if(null!==i){if(0===s||o%s!=0)throw new Xd(n);r[i]=o/s}else if(o!==s)throw new Xd(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);const n=Lp(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)}))}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}My.className="Reshape",Ai(My);class Dy extends Kp{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);const e=Hf(1,t.dims.length+1);if(!_(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Gp({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=Pp(t)).slice();return this.dims.forEach(((n,r)=>{e[r+1]=t[n]})),e}call(t,e){return Xa(Lp(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Dy.className="Permute",Ai(Dy);class Ly extends Kp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=Lp(t);return Gi(da(n,this.maskValue),-1)}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);const n=Lp(t),r=Gi(da(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))}))}}Ly.className="Masking",Ai(Ly);class Py extends Kp{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(ef(t.inputLength))}this.inputDim=t.inputDim,pf(this.inputDim,"inputDim"),this.outputDim=t.outputDim,pf(this.outputDim,"outputDim"),this.embeddingsInitializer=Tp(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Bb(t.embeddingsRegularizer),this.activityRegularizer=Bb(t.activityRegularizer),this.embeddingsConstraint=Ef(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Fi((()=>this.maskZero?(t=Lp(t),da(t,qa(t))):null))}computeOutputShape(t){if(t=Pp(t),null==this.inputLength)return[...t,this.outputDim];const e=ef(this.inputLength);if(e.length!==t.length-1)throw new Xd(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],i=t[r+1];if(null!=s&&null!=i&&s!==i)throw new Xd(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);null==s&&(e[n]=i),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);let n=Lp(t);"int32"!==n.dtype&&(n=qf(n,"int32"));return rp(this.embeddings.read(),n.as1D()).reshape(Pp(this.computeOutputShape(n.shape)))}))}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Rp(this.embeddingsInitializer),embeddingsRegularizer:zb(this.embeddingsRegularizer),activityRegularizer:zb(this.activityRegularizer),embeddingsConstraint:Nf(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Py.className="Embedding",Ai(Py);class zy extends Kp{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Kd}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],i=e[r];if(null==s||null==i||s<0||i<0)n.push(null);else if(1===s)n.push(i);else if(1===i)n.push(s);else{if(s!==i)throw new Xd("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Pp(t)]),(t=t).length<2)throw new Xd(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=lf(e),e.length>1)throw new Xd(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map((t=>t.length));-1===t.indexOf(null)&&1===lf(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Fi((()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map((t=>t.rank));if(-1===n.indexOf(null)){const r=jf(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=Xf(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],i=t.slice(1).concat([s]);let o=r.reshape([s].concat(Wf(t.slice(1))));o=Xa(o,[1,0]),o=o.reshape(i),e.push(o),n=!0}else if(t>1){const s=Hf(1,t).concat([0]);e.push(Xa(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=Xa(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(Hf(0,s-1));r=Xa(r,t)}return r}}return this.mergeFunction(t)}))}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=lf(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Fi((()=>{if(null==e)return null;if(!Array.isArray(e))throw new Xd("`mask` should be an Array");if(!Array.isArray(t))throw new Xd("`inputs` should be an Array");if(e.length!==t.length)throw new Xd(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every((t=>null==t)))return null;let n=(e=e.map((t=>null==t?t:Fo(t,0))))[0];for(let t=1;t<e.length-1;++t)n=Xo(n,e[t]);return n}))}}class Vy extends zy{constructor(t){super(t)}mergeFunction(t){return Fi((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Wi(e,t[n]);return e}))}}Vy.className="Add",Ai(Vy);class By extends zy{constructor(t){super(t)}mergeFunction(t){return Fi((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Go(e,t[n]);return e}))}}By.className="Multiply",Ai(By);class Wy extends zy{constructor(t){super(t)}mergeFunction(t){return Fi((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Wi(e,t[n]);return Go(1/t.length,e)}))}}Wy.className="Average",Ai(Wy);class Uy extends zy{constructor(t){super(t)}mergeFunction(t){return Fi((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Yo(e,t[n]);return e}))}}Uy.className="Maximum",Ai(Uy);class Gy extends zy{constructor(t){super(t)}mergeFunction(t){return Fi((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=ta(e,t[n]);return e}))}}Gy.className="Minimum",Ai(Gy);class jy extends zy{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new Xd("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(_(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new Xd("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Fi((()=>Zf(t,this.axis)))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new Xd("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new Xd("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new Xd("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new Xd(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Fi((()=>{let n=!0;if(e.forEach((t=>{null==t||(n=!1)})),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(ba(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(Fo(e[n],-1)):r.push(e[n]);const s=po(r,this.axis);return Ui(s,-1,!1)}))}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Hy(t,e){for(;t<0;)t+=e;return t}jy.className="Concatenate",Ai(jy);class qy extends zy{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){R(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new Kd("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new Xd(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new Xd(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map(((e,n)=>Hy(e,t[n].shape.length))):[Hy(this.axes,n.shape.length),Hy(this.axes,r.shape.length)],this.normalize&&(n=lm(n,e[0]),r=lm(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new Kd("batchDot is not implemented for tensors of 4D or higher rank yet");if(R(t.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`)),R(t.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new Kd("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const i=n;return Fi((()=>{let n,o;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)o=i[0]===i[1]?t.mul(e).sum(i[0]):t.transpose([1,0]).mul(e).sum(i[1]);else{const n=i[0]!==t.shape.length-1,r=i[1]===e.shape.length-1;o=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);o=o.squeeze(e)}return 1===o.shape.length&&(o=o.expandDims(1)),o}))}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Hy(this.axes,t.length),Hy(this.axes,e.length)],n}computeOutputShape(t){R(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new Kd("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}qy.className="Dot",Ai(qy);class Xy extends Kp{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);const n=Lp(t);return up((()=>ep(n.shape,0,this.stddev).add(n)),(()=>n),e.training||!1)}))}}Xy.className="GaussianNoise",Ai(Xy);class Ky extends Kp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Fi((()=>{this.invokeCallHook(t,e);const n=Lp(t);if(this.rate>0&&this.rate<1){return up((()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(ep(n.shape,1,t))}),(()=>n),e.training||!1)}return n}))}}Ky.className="GaussianDropout",Ai(Ky);class Jy extends Kp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Lp(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Fi((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return up((()=>{const e=Lp(t),r=-1.7580993408473766;let s=zo($a(n),this.rate);s=qf(s,"float32");const i=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-i*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(i).add(o)}),(()=>Lp(t)),e.training||!1)}return t}))}}function Yy(t,e,n,r,s,i=.001){let o;if(2===t.rank)o=co(t,e,n,r,s,i);else if(3===t.rank)o=lo(t,e,n,r,s,i);else{if(4!==t.rank)throw new Kd(`batchNormalization is not implemented for array of rank ${t.rank} yet`);o=ho(t,e,n,r,s,i)}return o}function Zy(t,e,n,r,s=.001){return _(r.slice().sort(),Hf(0,t.rank-1))?function(t,e,n,r,s=.001){return Fi((()=>{const i=la(t,r),o=i.mean,a=i.variance;return[Yy(t,o,a,n,e,s),o,a]}))}(t,e,n,r,s):function(t,e,n,r,s=.001){return Fi((()=>{const i=la(t,r),o=i.mean,a=i.variance,u=[];for(const e of Hf(0,t.rank))-1!==r.indexOf(e)?u.push(1):u.push(t.shape[e]);const c=o.reshape(u),l=a.reshape(u),h=null==e?null:e.reshape(u),d=null==n?null:n.reshape(u);return[Yy(t,c,l,d,h,s),o,a]}))}(t,e,n,r,s)}Jy.className="AlphaDropout",Ai(Jy);class Qy extends Kp{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Tp(t.betaInitializer||"zeros"),this.gammaInitializer=Tp(t.gammaInitializer||"ones"),this.movingMeanInitializer=Tp(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Tp(t.movingVarianceInitializer||"ones"),this.betaConstraint=Ef(t.betaConstraint),this.gammaConstraint=Ef(t.gammaConstraint),this.betaRegularizer=Bb(t.betaRegularizer),this.gammaRegularizer=Bb(t.gammaRegularizer)}build(t){t=Pp(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new Xd(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new Gp({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Fi((()=>{const n=null!=e.training&&e.training,r=Lp(t),s=r.shape,i=s.length,o=Hf(0,i),a=this.axis>=0?this.axis:this.axis+i;o.splice(a,1);const u=Yd(1,i);u[a]=s[a];const c=o.slice();c.sort();const l=!_(c,Hf(0,i).slice(0,i-1));if(!n)return(()=>{if(l){const t=this.movingMean.read().reshape(u),e=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return Yy(r,t,e,n,s,this.epsilon)}return Yy(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,f]=Zy(r,this.gamma.read(),this.beta.read(),o,this.epsilon),p=(t,e,n)=>{Fi((()=>{const r=1-n,s=t.read(),i=s.sub(e).mul(r);t.write(s.sub(i))}))};return(()=>{p(this.movingMean,d,this.momentum),p(this.movingVariance,f,this.momentum)})(),h}))}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Rp(this.betaInitializer),gammaInitializer:Rp(this.gammaInitializer),movingMeanInitializer:Rp(this.movingMeanInitializer),movingVarianceInitializer:Rp(this.movingVarianceInitializer),betaRegularizer:zb(this.betaRegularizer),gammaRegularizer:zb(this.gammaRegularizer),betaConstraint:Nf(this.betaConstraint),gammaConstraint:Nf(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Qy.className="BatchNormalization",Ai(Qy);class tg extends Kp{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Tp(t.betaInitializer||"zeros"),this.gammaInitializer=Tp(t.gammaInitializer||"ones"),this.betaRegularizer=Bb(t.betaRegularizer),this.gammaRegularizer=Bb(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=Pp(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error(`Invalid axis: ${t}`);if(this.axis.length!==lf(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((e=>t[e]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(t,e){const n=Lp(t),r=n.shape,s=r.length;return Fi((()=>{let{mean:t,variance:e}=la(n,this.axis,!0);const i=Yd(1,s);for(const t of this.axis)i[t]=r[t];const o=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(i):t;let a=o(this.gamma.read()),u=o(this.beta.read());const c=[],l=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(c.push(r[t]),l.push(1)):(c.push(1),l.push(r[t]));return t=t.tile(c),e=e.tile(c),a=a.tile(l),u=u.tile(l),Yy(n,t,e,u,a,this.epsilon)}))}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Rp(this.betaInitializer),gammaInitializer:Rp(this.gammaInitializer),betaRegularizer:zb(this.betaRegularizer),gammaRegularizer:zb(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}tg.className="LayerNormalization",Ai(tg);class eg extends Kp{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new Xd(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new Xd(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new Xd(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new Gp({ndim:4})]}computeOutputShape(t){let e,n;return t=Pp(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Fi((()=>{return e=Lp(t),n=this.padding,r=this.dataFormat,Fi((()=>{if(4!==e.rank)throw new Xd(`temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Xd("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Xd(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],ya(e,t)}));var e,n,r}))}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function ng(t,e,n,r,s,i){return Fi((()=>{let o;If(s),Mf(i),_f(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==i&&(i="max"),t=Yb(t,s);const a="same"===r?"same":"valid";return o="max"===i?Ko(t,e,n,a):oo(t,e,n,a),"channelsFirst"===s&&(o=Xa(o,[0,3,1,2])),o}))}function rg(t,e,n,r,s,i){return Fi((()=>{let o;If(s),Mf(i),_f(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==i&&(i="max"),t=Zb(t,s);const a="same"===r?"same":"valid";return o="max"===i?Jo(t,e,n,a):ao(t,e,n,a),"channelsFirst"===s&&(o=Xa(o,[0,4,1,2,3])),o}))}eg.className="ZeroPadding2D",Ai(eg);class sg extends Kp{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new Xd(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(pf(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new Xd(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}pf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,_f(this.padding),this.inputSpec=[new Gp({ndim:3})]}computeOutputShape(t){const e=Kb((t=Pp(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Fi((()=>{this.invokeCallHook(t,e),t=Xf(Lp(t),2);const n=this.poolingFunction(Lp(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Pa(n,[2])}))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class ig extends sg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return If(s),_f(r),ng(t,e,n,r,s,"max")}}ig.className="MaxPooling1D",Ai(ig);class og extends sg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return If(s),_f(r),ng(t,e,n,r,s,"avg")}}og.className="AveragePooling1D",Ai(og);class ag extends Kp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new Xd(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];pf(this.poolSize,"poolSize"),pf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,If(this.dataFormat),_f(this.padding),this.inputSpec=[new Gp({ndim:4})]}computeOutputShape(t){t=Pp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Kb(e,this.poolSize[0],this.padding,this.strides[0]),n=Kb(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Fi((()=>(this.invokeCallHook(t,e),this.poolingFunction(Lp(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class ug extends ag{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return If(s),_f(r),ng(t,e,n,r,s,"max")}}ug.className="MaxPooling2D",Ai(ug);class cg extends ag{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return If(s),_f(r),ng(t,e,n,r,s,"avg")}}cg.className="AveragePooling2D",Ai(cg);class lg extends Kp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new Xd(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];pf(this.poolSize,"poolSize"),pf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,If(this.dataFormat),_f(this.padding),this.inputSpec=[new Gp({ndim:5})]}computeOutputShape(t){t=Pp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Kb(e,this.poolSize[0],this.padding,this.strides[0]),n=Kb(n,this.poolSize[1],this.padding,this.strides[1]),r=Kb(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return Fi((()=>(this.invokeCallHook(t,e),this.poolingFunction(Lp(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class hg extends lg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return If(s),_f(r),rg(t,e,n,r,s,"max")}}hg.className="MaxPooling3D",Ai(hg);class dg extends lg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return If(s),_f(r),rg(t,e,n,r,s,"avg")}}dg.className="AveragePooling3D",Ai(dg);class fg extends Kp{constructor(t){super(t),this.inputSpec=[new Gp({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Kd}}class pg extends fg{constructor(t){super(t||{})}call(t,e){return Fi((()=>{const e=Lp(t);return Zo(e,1)}))}}pg.className="GlobalAveragePooling1D",Ai(pg);class mg extends fg{constructor(t){super(t||{})}call(t,e){return Fi((()=>{const e=Lp(t);return Uo(e,1)}))}}mg.className="GlobalMaxPooling1D",Ai(mg);class bg extends Kp{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,If(this.dataFormat),this.inputSpec=[new Gp({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Kd}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class yg extends bg{call(t,e){return Fi((()=>{const e=Lp(t);return"channelsLast"===this.dataFormat?Zo(e,[1,2]):Zo(e,[2,3])}))}}yg.className="GlobalAveragePooling2D",Ai(yg);class gg extends bg{call(t,e){return Fi((()=>{const e=Lp(t);return"channelsLast"===this.dataFormat?Uo(e,[1,2]):Uo(e,[2,3])}))}}gg.className="GlobalMaxPooling2D",Ai(gg);class xg extends Kp{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=cm(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class wg extends xg{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=Pp(t)).length<3)throw new Xd(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=Pp(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return Fi((()=>py(((t,n)=>[Lp(this.layer.call(t,e)),[]]),t=Lp(t),[],!1,null,null,!1,!0)[1]))}}wg.className="TimeDistributed",Ai(wg);class vg extends xg{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=cm(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=cm(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,df(Of,"BidirectionalMergeMode",s),t.weights)throw new Kd("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):tf(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=fy(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const i=[],o=[];if(null!=n){const t=n.length;if(t%2>0)throw new Xd("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,i.push(...n);const r=n.map((t=>new Gp({shape:t.shape})));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),o.push(...r)}if(null!=r)throw new Kd("Support for constants in Bidirectional layers is not implemented yet.");const a=i[0]instanceof jp;for(const t of i)if(t instanceof jp!==a)throw new Xd("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(a){const n=[t].concat(i),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const a=super.apply(n,e);return this.inputSpec=s,a}return super.apply(t,e)}call(t,e){return Fi((()=>{const n=e.initialState;let r,s,i,o;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const i=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:i})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(i=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Ca(s,1)),"concat"===this.mergeMode?o=Zf([r,s]):"sum"===this.mergeMode?o=Wi(r,s):"ave"===this.mergeMode?o=Go(.5,Wi(r,s)):"mul"===this.mergeMode?o=Go(r,s):null==this.mergeMode&&(o=[r,s]),this.returnState?null==this.mergeMode?o.concat(i):[o].concat(i):o}))}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Lf(this.forwardLayer.name,(()=>{this.forwardLayer.build(t)})),Lf(this.backwardLayer.name,(()=>{this.backwardLayer.build(t)})),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map((t=>null));return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=cm(e.layer);if(delete e.layer,null!=e.numConstants)throw new Kd("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}vg.className="Bidirectional",Ai(vg);var kg,$g;!function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(kg||(kg={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}($g||($g={}));const Ng={};function Cg(t){return Ng[t]}function Eg(t,e,n,r,s){const i=e.inputParams[t];if(i&&void 0!==i.inputIndexStart){const t=i.inputIndexStart,o=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?t+1:i.inputIndexEnd;if("tensor"===i.type)return Sg(e.inputNames[i.inputIndexStart],n,r,s);if("tensors"===i.type){return e.inputNames.slice(t,o).map((t=>Sg(t,n,r,s)))}const a=Sg(e.inputNames.slice(t)[0],n,r,s),u=a.dataSync();return"number"===i.type?u[0]:tt(a.shape,u)}const o=e.attrParams[t];return o&&o.value}function Sg(t,e,n,r){const[s,i]=Tg(t);if(null!=r){const t=r.getHashTableHandleByName(s);if(null!=t)return t}const o=n.currentContextIds.find((t=>!!e[Rg(s,t)]));return void 0!==o?e[Rg(s,o)][i]:void 0}function Ag(t,e){const[n,r]=Tg(t);return[Rg(n,e&&e.currentContextId),r]}function Rg(t,e){return e?`${t}-${e}`:t}function Tg(t){const e=t.split(":");if(1===e.length)return[t,0];return[e[0],Number(e[e.length-1])]}function Og(t,e,n){let r=Eg("pad",t,e,n);if("explicit"===r){r=Eg("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}function Fg(t){return t.kept?t:Xs(t)}const Ig=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],_g=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Mg=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],Dg=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Lg=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Pg=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],zg=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Vg=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Bg=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],Wg=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],Ug=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Gg=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],jg=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Hg=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],qg=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Xg=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Kg=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class Jg{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[s,i,o,a,u,c,l,p,f,h,m,b,y,g,x,w,d].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],i=[],o=n.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(t[e.name]):"Const"===e.op?s.push(t[e.name]):null!=e.input&&0!==e.input.length||i.push(t[e.name]),t)),{});let a=[];const u=[];let c={},l={};null!=e&&(c=this.mapSignatureEntries(e.inputs),l=this.mapSignatureEntries(e.outputs));const h=Object.keys(o);h.forEach((t=>{const e=o[t];e.inputNames.forEach((t=>{const[n]=Ag(t);e.inputs.push(o[n]),o[n].children.push(e)}))})),0===Object.keys(l).length?h.forEach((t=>{const e=o[t];0===e.children.length&&u.push(e)})):Object.keys(l).forEach((t=>{const[e]=Ag(t),n=o[e];null!=n&&(n.signatureKey=l[t],u.push(n))})),Object.keys(c).length>0?Object.keys(c).forEach((t=>{const[e]=Ag(t),n=o[e];n&&(n.signatureKey=c[t],a.push(n))})):a=r;let d={};null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const f={nodes:o,inputs:a,outputs:u,weights:s,placeholders:r,signature:e,functions:d};return i.length>0&&(f.initNodes=i),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=Cg(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith("^")?t.substr(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((e,n)=>{const r=n.type;let s;switch(n.type){case"string":s=Zg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Zg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=ux(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ux(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=tx(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=tx(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=ax(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ax(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Qg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Qg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=lx(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=lx(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=ox(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ox(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=cx(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=cx(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=rx(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=rx(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=sx(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=sx(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=nx(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=nx(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t)),{}));const s=[],i=[];t.signature.inputArg.forEach((t=>{const[e]=Ag(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ex(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n}));Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach((t=>{const[n]=Ag(t);e.inputs.push(r[n]),r[n].children.push(e)}))}));const o=t.ret;t.signature.outputArg.forEach((t=>{const[e,n]=Ag(o[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,i.push(s))}));const a=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:i,weights:n,placeholders:[],signature:a}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function Yg(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=lt().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function Zg(t,e,n,r=!1){const s=t[e];return null!=s?Yg(s.s,r):n}function Qg(t,e,n){const r=t[e];return r?r.b:n}function tx(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function ex(t){switch("string"==typeof t&&(t=kg[t]),t){case kg.DT_FLOAT:return"float32";case kg.DT_INT32:case kg.DT_INT64:case kg.DT_INT8:case kg.DT_UINT8:return"int32";case kg.DT_BOOL:return"bool";case kg.DT_DOUBLE:return"float32";case kg.DT_STRING:return"string";default:return null}}function nx(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function rx(t,e,n){const r=t[e];return r&&r.type?ex(r.type):n}function sx(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map((t=>ex(t))):n}function ix(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"==typeof t.size?t.size:parseInt(t.size,10))):[]}function ox(t,e,n){const r=t[e];return r&&r.shape?ix(r.shape):n}function ax(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((t=>"number"==typeof t?t:parseInt(t,10))):n}function ux(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map((t=>Yg(t,r))):n}function cx(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((t=>ix(t))):n}function lx(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class hx{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return Sg(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Sg(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return tx(this.node.rawAttrs,t,e);if(null!=n.s)return Zg(this.node.rawAttrs,t,e);if(null!=n.b)return Qg(this.node.rawAttrs,t,e);if(null!=n.shape)return ox(this.node.rawAttrs,t,e);if(null!=n.type)return rx(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return ax(this.node.rawAttrs,t,e);if(null!=n.list.s)return ux(this.node.rawAttrs,t,e);if(null!=n.list.shape)return cx(this.node.rawAttrs,t,e);if(null!=n.list.b)return lx(this.node.rawAttrs,t,e);if(null!=n.list.type)return sx(this.node.rawAttrs,t,e)}return e}}const dx=os({addN_:function(t){R(Array.isArray(t),(()=>"The argument passed to tf.addN() must be a list of tensors")),R(t.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${t.length}`));const e=t.map(((t,e)=>ss(t,`tensors${e}`,"addN"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((t=>{if(!_(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=e;return Jr.runKernel(xt,r)}});function fx(t,e,n=""){R(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}class px{constructor(t,e,n,r,s,i,o){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=i,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=zi(0),_i(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),fx(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,_i(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((t,n)=>this.write(t,e[n])))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return cs([],[0].concat(this.elementShape));const n=this.readMany(t);return fx(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),za(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return cs([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return fx(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),po(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Ga(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map((t=>(n+=t,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,i=[];Fi((()=>{e=io(e,[1,n,s]);for(let n=0;n<t.length;++n){const o=[0,0===n?0:r[n-1],0],a=[1,t[n],s];i[n]=io(Ra(e,o,a),this.elementShape)}return i}));const o=[];for(let e=0;e<t.length;e++)o[e]=e;this.writeMany(o,i)}}class mx{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);fx(e,t.shape,"TensorList shape mismatch: "),_i(t)})),this.idTensor=zi(0),this.maxNumElements=r,_i(this.idTensor)}get id(){return this.idTensor.id}copy(){return new mx([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return fx(t,this.elementShape,"TensorList shape mismatch: "),Fi((()=>{const e=this.tensors.map((e=>io(e,t)));return za(e,0)}))}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return fx(n.shape,t,"TensorList shape mismatch: "),io(n,t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(fx(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");_i(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return fx(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);fx(this.elementShape,e.shape,"TensorList shape mismatch: "),_i(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return fx(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?cs([],[0].concat(this.elementShape)):Fi((()=>{const e=t.map((t=>io(this.tensors[t],n)));return za(e,0)}))}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return fx(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?cs([],[0].concat(this.elementShape)):Fi((()=>{const t=this.tensors.map((t=>io(t,e)));return po(t,0)}))}}const bx=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Eg("thenBranch",t,e,n),s=Eg("elseBranch",t,e,n),i=Eg("cond",t,e,n),o=Eg("args",t,e,n);return(await i.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Eg("body",t,e,n),s=Eg("cond",t,e,n),i=Eg("args",t,e,n),o=await n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap),a=i.map((t=>t.id));let u=await o[0].data();o.forEach((t=>{t.kept||-1!==a.indexOf(t.id)||t.dispose()}));let c=i;for(;u[0];){const t=c;c=await n.functionMap[r].executeFunctionAsync(c,n.tensorArrayMap,n.tensorListMap);const e=c.map((t=>t.id));t.forEach((t=>{t.kept||-1!==a.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const i=await n.functionMap[s].executeFunctionAsync(c,n.tensorArrayMap,n.tensorListMap);u=await i[0].data(),i.forEach((t=>{t.kept||-1!==a.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return c}case"LoopCond":return[Fg(Eg("pred",t,e,n))];case"Switch":{const r=Eg("pred",t,e,n);let s=Eg("data",t,e,n);return s.kept||(s=Fg(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=t.inputNames.find((t=>void 0!==Sg(t,e,n)));if(r){return[Fg(Sg(r,e,n))]}return}case"Enter":{const r=Eg("frameName",t,e,n),s=Eg("tensor",t,e,n);return n.enterFrame(r),[Fg(s)]}case"Exit":{const r=Eg("tensor",t,e,n);return n.exitFrame(),[Fg(r)]}case"NextIteration":{const r=Eg("tensor",t,e,n);return n.nextIteration(),[Fg(r)]}case"TensorArrayV3":{const r=Eg("size",t,e,n),s=Eg("dtype",t,e,n),i=Eg("elementShape",t,e,n),o=Eg("dynamicSize",t,e,n),a=Eg("clearAfterRead",t,e,n),u=Eg("identicalElementShapes",t,e,n),c=Eg("name",t,e,n),l=new px(c,s,r,i,u,o,a);return n.addTensorArray(l),[l.idTensor,zi(1)]}case"TensorArrayWriteV3":{const r=Eg("tensorArrayId",t,e,n),s=Eg("index",t,e,n),i=Eg("tensor",t,e,n),o=n.getTensorArray(r.id);return o.write(s,i),[o.idTensor]}case"TensorArrayReadV3":{const r=Eg("tensorArrayId",t,e,n),s=Eg("index",t,e,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Eg("tensorArrayId",t,e,n),s=Eg("indices",t,e,n),i=Eg("dtype",t,e,n);return[n.getTensorArray(r.id).gather(s,i)]}case"TensorArrayScatterV3":{const r=Eg("tensorArrayId",t,e,n),s=Eg("indices",t,e,n),i=Eg("tensor",t,e,n),o=n.getTensorArray(r.id);return o.scatter(s,i),[o.idTensor]}case"TensorArrayConcatV3":{const r=Eg("tensorArrayId",t,e,n),s=n.getTensorArray(r.id),i=Eg("dtype",t,e,n);return[s.concat(i)]}case"TensorArraySplitV3":{const r=Eg("tensorArrayId",t,e,n),s=Eg("tensor",t,e,n),i=Eg("lengths",t,e,n),o=n.getTensorArray(r.id);return o.split(i,s),[o.idTensor]}case"TensorArraySizeV3":{const r=Eg("tensorArrayId",t,e,n);return[zi(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Eg("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Eg("tensorListId",t,e,n),s=Eg("index",t,e,n),i=Eg("tensor",t,e,n),o=n.getTensorList(r.id);return o.setItem(s,i),[o.idTensor]}case"TensorListGetItem":{const r=Eg("tensorListId",t,e,n),s=Eg("index",t,e,n),i=Eg("elementShape",t,e,n),o=Eg("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(s,i,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Eg("indices",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const i=new mx([],n,t.dtype,r),o=Ga(t,0);return e.forEach(((t,e)=>{i.setItem(t,o[e])})),i}(Eg("tensor",t,e,n),r,Eg("elementShape",t,e,n),Eg("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Eg("elementShape",t,e,n),s=Eg("elementDType",t,e,n);let i;i="TensorListReserve"===t.op?"numElements":"maxNumElements";const o=function(t,e,n){return new mx([],t,e,n)}(r,s,Eg(i,t,e,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=Eg("tensorListId",t,e,n),s=Eg("indices",t,e,n),i=Eg("elementShape",t,e,n),o=Eg("elementDType",t,e,n);return[n.getTensorList(r.id).gather(s,o,i)]}case"TensorListStack":{const r=Eg("tensorListId",t,e,n),s=Eg("elementShape",t,e,n),i=Eg("elementDType",t,e,n),o=Eg("numElements",t,e,n);return[n.getTensorList(r.id).stack(s,i,o)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);fx(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=Ga(t);return new mx(s,e,r)}(Eg("tensor",t,e,n),Eg("elementShape",t,e,n),Eg("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=Eg("tensorListId",t,e,n),s=n.getTensorList(r.id),i=Eg("dtype",t,e,n),o=Eg("elementShape",t,e,n);return[s.concat(i,o)]}case"TensorListPushBack":{const r=Eg("tensorListId",t,e,n),s=Eg("tensor",t,e,n),i=n.getTensorList(r.id);return i.pushBack(s),[i.idTensor]}case"TensorListPopBack":{const r=Eg("tensorListId",t,e,n),s=Eg("elementShape",t,e,n),i=Eg("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(s,i)]}case"TensorListSplit":{const r=Eg("tensor",t,e,n),s=Eg("elementShape",t,e,n),i=function(t,e,n){let r=0;const s=e.map((t=>(r+=t,r)));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const i=0===r?0:t.size/r,o=Fi((()=>{const o=[];t=io(t,[1,r,i]);for(let r=0;r<e.length;++r){const a=[0,0===r?0:s[r-1],0],u=[1,e[r],i];o[r]=io(Ra(t,a,u),n)}return t.dispose(),o})),a=new mx([],n,t.dtype,e.length);for(let t=0;t<o.length;t++)a.setItem(t,o[t]);return a}(r,Eg("lengths",t,e,n),s);return n.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};const yx=os({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const i={x:ss(t,"x","maxPoolWithArgmax")},o={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},a=Jr.runKernel(Xe,i,o);return{result:a[0],indexes:a[1]}}});function gx(t,e,n){const[r,s]=Eg("fusedOps",t,e,n),i="biasadd"===r,o="prelu"===s,a="fusedbatchnorm"===r,u=Eg("numArgs",t,e,n);if(i){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(a)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const c=Eg("strides",t,e,n),l=Og(t,e,n),h=Eg("dataFormat",t,e,n).toUpperCase(),d=Eg("dilations",t,e,n),[f,p]=Eg("args",t,e,n);return{stride:c,pad:l,dataFormat:h,dilations:d,biasArg:f,preluArg:p,activationFunc:s,leakyreluAlpha:Eg("leakyreluAlpha",t,e,n)}}function xx(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return Jr.runKernel(_e,{},r)}const wx=os({multinomial_:function(t,e,n,r=!1){const s=ss(t,"logits","multinomial"),i=s.size,o=s.rank;if(i<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${i}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const a={logits:1===o?io(s,[1,-1]):s},u={numSamples:e,seed:n,normalized:r},c=Jr.runKernel(tn,a,u);return 1===o?io(c,[c.size]):c}});const vx=async function(t){const e=ss(t,"condition","whereAsync","bool"),n=await e.data(),r=Xc(e.shape,n);return t!==e&&e.dispose(),r};const kx=async function(t,e){const n=ss(t,"x","setdiff1d"),r=ss(e,"y","setdiff1d");R(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),R(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),R(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),i=await r.data(),o=new Set(i);let a=0;for(let t=0;t<s.length;t++)o.has(s[t])||a++;const u=new Rr([a],n.dtype),c=new Rr([a],"int32");for(let t=0,e=0;t<s.length;t++)o.has(s[t])||(u.values[e]=s[t],c.values[e]=t,e++);return[u.toTensor(),c.toTensor()]};function $x(t,e,n){return{boxes:Eg("boxes",t,e,n),scores:Eg("scores",t,e,n),maxOutputSize:Eg("maxOutputSize",t,e,n),iouThreshold:Eg("iouThreshold",t,e,n),scoreThreshold:Eg("scoreThreshold",t,e,n),softNmsSigma:Eg("softNmsSigma",t,e,n)}}class Nx{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=zi(0),this.tensorMap=new Map,_i(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),Fi((()=>{const t=Ga(e),r=n.length,s=t.length;R(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let e=0;e<r;e++){const r=n[e],s=t[e];_i(s),this.tensorMap.set(r,s)}return this.handle}))}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return Fi((()=>{const t=[];for(let r=0;r<n.length;r++){const s=n[r],i=this.findWithDefault(s,e);t.push(i)}return za(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const Cx=os({sparseToDense_:function(t,e,n,r=0){const s=ss(t,"sparseIndices","sparseToDense","int32"),i=ss(e,"sparseValues","sparseToDense"),o=ss(r,"defaultValue","sparseToDense",i.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(n.length!==i)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${i}.`);const o=e.size;if(0!==e.rank&&(1!==e.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,i,n,o);const a={sparseIndices:s,sparseValues:i,defaultValue:o},u={outputShape:n};return Jr.runKernel(jn,a,u)}});const Ex=os({bincount_:function(t,e,n){const r=ss(t,"x","bincount"),s=ss(e,"weights","bincount");R("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),R(n>=0,(()=>`size must be non-negative, but got ${n}.`)),R(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const i={x:r,weights:s},o={size:n};return Jr.runKernel(Mt,i,o)}});const Sx=os({denseBincount_:function(t,e,n,r=!1){const s=ss(t,"x","denseBincount"),i=ss(e,"weights","denseBincount");R("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),R(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),R(n>=0,(()=>`size must be non-negative, but got ${n}.`)),R(i.size===s.size||0===i.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${i.shape}.`));const o={x:s,weights:i},a={size:n,binaryOutput:r};return Jr.runKernel(Zt,o,a)}});const Ax=os({scatterND_:function(t,e,n){const r=ss(t,"indices","scatterND","int32"),s=ss(e,"updates","scatterND");ui(s,r,n);const i={indices:r,updates:s},o={shape:n};return Jr.runKernel(An,i,o)}});const Rx=os({gatherND_:function(t,e){const n=ss(e,"indices","gatherND","int32"),r={params:ss(t,"x","gatherND"),indices:n};return Jr.runKernel(ke,r)}});function Tx(t,e,n,r){const s=((t,e,n)=>{switch(t.category){case"arithmetic":return Fi((()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[Wi(Eg("a",t,e,n),Eg("b",t,e,n))];case"AddN":return[dx(Eg("tensors",t,e,n))];case"FloorMod":case"Mod":return[Zh(Eg("a",t,e,n),Eg("b",t,e,n))];case"Mul":return[Go(Eg("a",t,e,n),Eg("b",t,e,n))];case"RealDiv":case"Div":return[Eo(Eg("a",t,e,n),Eg("b",t,e,n))];case"DivNoNan":return[yd(Eg("a",t,e,n),Eg("b",t,e,n))];case"FloorDiv":return[Co(Eg("a",t,e,n),Eg("b",t,e,n))];case"Sub":return[jo(Eg("a",t,e,n),Eg("b",t,e,n))];case"Minimum":return[ta(Eg("a",t,e,n),Eg("b",t,e,n))];case"Maximum":return[Yo(Eg("a",t,e,n),Eg("b",t,e,n))];case"Pow":return[Wu(Eg("a",t,e,n),Eg("b",t,e,n))];case"SquaredDifference":return[Ju(Eg("a",t,e,n),Eg("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"basic_math":return Fi((()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[Bi(Eg("x",t,e,n))];case"Acos":return[Jh(Eg("x",t,e,n))];case"Acosh":return[Yh(Eg("x",t,e,n))];case"Asin":return[cd(Eg("x",t,e,n))];case"Asinh":return[ld(Eg("x",t,e,n))];case"Atan":return[hd(Eg("x",t,e,n))];case"Atan2":return[dd(Eg("x",t,e,n),Eg("y",t,e,n))];case"Atanh":return[fd(Eg("x",t,e,n))];case"Ceil":return[pd(Eg("x",t,e,n))];case"Complex":return[as(Eg("real",t,e,n),Eg("imag",t,e,n))];case"Cos":return[zh(Eg("x",t,e,n))];case"Cosh":return[Bh(Eg("x",t,e,n))];case"Elu":return[So(Eg("x",t,e,n))];case"Erf":return[Cd(Eg("x",t,e,n))];case"Exp":return[Wo(Eg("x",t,e,n))];case"Expm1":return[Ed(Eg("x",t,e,n))];case"Floor":return[Do(Eg("x",t,e,n))];case"Log":return[Bo(Eg("x",t,e,n))];case"Log1p":return[Yu(Eg("x",t,e,n))];case"Imag":return[Ja(Eg("x",t,e,n))];case"Neg":return[ha(Eg("x",t,e,n))];case"Reciprocal":return[Ld(Eg("x",t,e,n))];case"Real":return[Ya(Eg("x",t,e,n))];case"Relu":return[Na(Eg("x",t,e,n))];case"Round":return[Pd(Eg("x",t,e,n))];case"Selu":return[Ea(Eg("x",t,e,n))];case"Sigmoid":return[Aa(Eg("x",t,e,n))];case"Sin":return[Cl(Eg("x",t,e,n))];case"Sign":return[zd(Eg("x",t,e,n))];case"Sinh":return[Sl(Eg("x",t,e,n))];case"Softplus":return[Ma(Eg("x",t,e,n))];case"Sqrt":return[La(Eg("x",t,e,n))];case"Square":return[ca(Eg("x",t,e,n))];case"Tanh":return[Va(Eg("x",t,e,n))];case"Tan":return[Bd(Eg("x",t,e,n))];case"ClipByValue":return[fo(Eg("x",t,e,n),Eg("clipValueMin",t,e,n),Eg("clipValueMax",t,e,n))];case"Relu6":return[ru(Eg("x",t,e,n))];case"Rsqrt":return[Vl(Sg(t.inputNames[0],e,n))];case"Prod":return[Dd(Eg("x",t,e,n),Eg("axes",t,e,n))];case"LeakyRelu":return[Vo(Eg("x",t,e,n),Eg("alpha",t,e,n))];case"Prelu":return[ga(Eg("x",t,e,n),Eg("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"control":return bx(t,e,n);case"convolution":return Fi((()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=Eg("stride",t,e,n),s=Eg("pad",t,e,n),i=Eg("dataFormat",t,e,n).toUpperCase(),o=Eg("dilation",t,e,n);return[wo(Eg("x",t,e,n),Eg("filter",t,e,n),r,s,i,o)]}case"Conv2D":{const r=Eg("strides",t,e,n),s=Og(t,e,n),i=Eg("dataFormat",t,e,n).toUpperCase(),o=Eg("dilations",t,e,n);return[xo(Eg("x",t,e,n),Eg("filter",t,e,n),[r[1],r[2]],s,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:i,dilations:o,biasArg:a,preluArg:u,activationFunc:c,leakyreluAlpha:l}=gx(t,e,n);return[cu({x:Eg("x",t,e,n),filter:Eg("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:a,activation:c,preluActivationWeights:u,leakyreluAlpha:l})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:i,dilations:o,biasArg:a,preluArg:u,activationFunc:c,leakyreluAlpha:l}=gx(t,e,n);return[du({x:Eg("x",t,e,n),filter:Eg("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:a,activation:c,preluActivationWeights:u,leakyreluAlpha:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Eg("outputShape",t,e,n),s=Eg("strides",t,e,n),i=Og(t,e,n);return[ko(Eg("x",t,e,n),Eg("filter",t,e,n),r,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Eg("strides",t,e,n),s=Og(t,e,n),i=Eg("dilations",t,e,n),o=Eg("dataFormat",t,e,n).toUpperCase();return[No(Eg("input",t,e,n),Eg("filter",t,e,n),[r[1],r[2]],s,o,[i[1],i[2]])]}case"Conv3D":{const r=Eg("strides",t,e,n),s=Eg("pad",t,e,n),i=Eg("dataFormat",t,e,n).toUpperCase(),o=Eg("dilations",t,e,n);return[$o(Eg("x",t,e,n),Eg("filter",t,e,n),[r[1],r[2],r[3]],s,i,[o[1],o[2],o[3]])]}case"AvgPool":{const r=Eg("strides",t,e,n),s=Eg("pad",t,e,n),i=Eg("kernelSize",t,e,n);return[oo(Eg("x",t,e,n),[i[1],i[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=Eg("strides",t,e,n),s=Eg("pad",t,e,n),i=Eg("kernelSize",t,e,n);return[Ko(Eg("x",t,e,n),[i[1],i[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=Eg("strides",t,e,n),s=Eg("pad",t,e,n),i=Eg("kernelSize",t,e,n),o=Eg("includeBatchInIndex",t,e,n),{result:a,indexes:u}=yx(Eg("x",t,e,n),[i[1],i[2]],[r[1],r[2]],s,o);return[a,u]}case"AvgPool3D":{const r=Eg("strides",t,e,n),s=Eg("pad",t,e,n),i=Eg("kernelSize",t,e,n);return[ao(Eg("x",t,e,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=Eg("strides",t,e,n),s=Eg("pad",t,e,n),i=Eg("kernelSize",t,e,n);return[Jo(Eg("x",t,e,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=Eg("strides",t,e,n),s=Eg("pad",t,e,n),i=Eg("dilations",t,e,n),o=r[1],a=r[2],u=i[1],c=i[2];return[bd(Eg("x",t,e,n),Eg("filter",t,e,n),[o,a],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"creation":return Fi((()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=Eg("shape",t,e,n),s=Eg("dtype",t,e,n);return[Mo(r,Eg("value",t,e,n),s)]}case"LinSpace":return[xx(Eg("start",t,e,n),Eg("stop",t,e,n),Eg("num",t,e,n))];case"Multinomial":{const r=Eg("logits",t,e,n),s=Eg("numSamples",t,e,n),i=Eg("seed",t,e,n);return[wx(r,s,i)]}case"OneHot":{const r=Eg("indices",t,e,n),s=Eg("depth",t,e,n),i=Eg("onValue",t,e,n),o=Eg("offValue",t,e,n);return[fa(r,s,i,o)]}case"Ones":return[ma(Eg("shape",t,e,n),Eg("dtype",t,e,n))];case"OnesLike":return[ba(Eg("x",t,e,n))];case"RandomUniform":return[$a(Eg("shape",t,e,n),Eg("minval",t,e,n),Eg("maxval",t,e,n),Eg("dtype",t,e,n))];case"Range":return[Vu(Eg("start",t,e,n),Eg("stop",t,e,n),Eg("step",t,e,n),Eg("dtype",t,e,n))];case"TruncatedNormal":{const r=Eg("shape",t,e,n),s=Eg("mean",t,e,n),i=Eg("stdDev",t,e,n),o=Eg("seed",t,e,n);return[Ua(r,s,i,Eg("dtype",t,e,n),o)]}case"Zeros":return[pa(Eg("shape",t,e,n),Eg("dtype",t,e,n))];case"ZerosLike":return[qa(Eg("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:a,softNmsSigma:u}=$x(t,e,n),c=await Qu.nonMaxSuppressionWithScoreAsync(r,s,i,o,a,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:a}=$x(t,e,n),u=Eg("padToMaxOutputSize",t,e,n),c=await Qu.nonMaxSuppressionPaddedAsync(r,s,i,o,a,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:a}=$x(t,e,n);return[await Qu.nonMaxSuppressionAsync(r,s,i,o,a)]}case"Where":{const r=qs(Eg("condition",t,e,n),"bool"),s=[await vx(r)];return r.dispose(),s}case"ListDiff":return kx(Eg("x",t,e,n),Eg("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return Fi((()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=Eg("x",t,e,n),s=Eg("k",t,e,n),i=Eg("sorted",t,e,n),o=Wd(r,s,i);return[o.values,o.indices]}case"Unique":{const r=Eg("x",t,e,n),s=Ud(r);return[s.values,s.indices]}case"UniqueV2":{const r=Eg("x",t,e,n),s=Eg("axis",t,e,n),i=Ud(r,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"image":return Fi((()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=Eg("images",t,e,n),s=Eg("size",t,e,n),i=Eg("alignCorners",t,e,n),o=Eg("halfPixelCenters",t,e,n);return[Qu.resizeBilinear(r,[s[0],s[1]],i,o)]}case"ResizeNearestNeighbor":{const r=Eg("images",t,e,n),s=Eg("size",t,e,n),i=Eg("alignCorners",t,e,n),o=Eg("halfPixelCenters",t,e,n);return[Qu.resizeNearestNeighbor(r,[s[0],s[1]],i,o)]}case"CropAndResize":{const r=Eg("image",t,e,n),s=Eg("boxes",t,e,n),i=Eg("boxInd",t,e,n),o=Eg("cropSize",t,e,n),a=Eg("method",t,e,n),u=Eg("extrapolationValue",t,e,n);return[Qu.cropAndResize(r,s,i,o,a,u)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"graph":return Fi((()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Eg("default",t,e,n);return[Sg(t.name,e,n)||r];case"Placeholder":return[Sg(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Fg(Eg("x",t,e,n))];case"IdentityN":return Eg("x",t,e,n).map((t=>Fg(t)));case"Snapshot":return[Fg(Eg("x",t,e,n))];case"Shape":return[Ba(Eg("x",t,e,n).shape,"int32")];case"ShapeN":return Eg("x",t,e,n).map((t=>Ba(t.shape)));case"Size":return[zi(Eg("x",t,e,n).size,"int32")];case"Rank":return[zi(Eg("x",t,e,n).rank,"int32")];case"NoOp":return[zi(1)];case"Print":const s=Eg("x",t,e,n),i=Eg("data",t,e,n),o=Eg("message",t,e,n),a=Eg("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let t=0;t<i.length;t++)console.log(Array.prototype.slice.call(i[t].dataSync()).slice(0,a));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"logical":return Fi((()=>((t,e,n)=>{switch(t.op){case"Equal":return[Oo(Eg("a",t,e,n),Eg("b",t,e,n))];case"NotEqual":return[da(Eg("a",t,e,n),Eg("b",t,e,n))];case"Greater":return[Po(Eg("a",t,e,n),Eg("b",t,e,n))];case"GreaterEqual":return[zo(Eg("a",t,e,n),Eg("b",t,e,n))];case"Less":return[ih(Eg("a",t,e,n),Eg("b",t,e,n))];case"LessEqual":return[zu(Eg("a",t,e,n),Eg("b",t,e,n))];case"LogicalAnd":return[Xo(Eg("a",t,e,n),Eg("b",t,e,n))];case"LogicalNot":return[_h(Eg("a",t,e,n))];case"LogicalOr":return[Fd(Eg("a",t,e,n),Eg("b",t,e,n))];case"Select":case"SelectV2":return[Ha(Eg("condition",t,e,n),Eg("a",t,e,n),Eg("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"matrices":return Fi((()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[fu(Eg("a",t,e,n),Eg("b",t,e,n),Eg("transposeA",t,e,n),Eg("transposeB",t,e,n))];case"Transpose":return[Xa(Eg("x",t,e,n),Eg("perm",t,e,n))];case"_FusedMatMul":const[r,s]=Eg("fusedOps",t,e,n),i="biasadd"===r,o="prelu"===s,a=Eg("numArgs",t,e,n),u=Eg("leakyreluAlpha",t,e,n);if(i){if(o&&2!==a)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==a)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,l]=Eg("args",t,e,n);return[pu({a:Eg("a",t,e,n),b:Eg("b",t,e,n),transposeA:Eg("transposeA",t,e,n),transposeB:Eg("transposeB",t,e,n),bias:c,activation:s,preluActivationWeights:l,leakyreluAlpha:u})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"normalization":return Fi((()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[uo(Eg("x",t,e,n),Eg("mean",t,e,n),Eg("variance",t,e,n),Eg("offset",t,e,n),Eg("scale",t,e,n),Eg("epsilon",t,e,n))];case"LRN":return[Td(Eg("x",t,e,n),Eg("radius",t,e,n),Eg("bias",t,e,n),Eg("alpha",t,e,n),Eg("beta",t,e,n))];case"Softmax":return[_a(Eg("x",t,e,n))];case"LogSoftmax":return[qo(Eg("x",t,e,n))];case"SparseToDense":return[Cx(Eg("sparseIndices",t,e,n),Eg("outputShape",t,e,n),Eg("sparseValues",t,e,n),Eg("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"reduction":return Fi((()=>((t,e,n)=>{switch(t.op){case"Max":{const r=Eg("axis",t,e,n),s=Eg("keepDims",t,e,n);return[Uo(Eg("x",t,e,n),r,s)]}case"Mean":{const r=Eg("axis",t,e,n),s=Eg("keepDims",t,e,n);return[Zo(Eg("x",t,e,n),r,s)]}case"Min":{const r=Eg("axis",t,e,n),s=Eg("keepDims",t,e,n);return[Qo(Eg("x",t,e,n),r,s)]}case"Sum":{const r=Eg("axis",t,e,n),s=Eg("keepDims",t,e,n);return[Ho(Eg("x",t,e,n),r,s)]}case"All":{const r=Eg("axis",t,e,n),s=Eg("keepDims",t,e,n);return[Ui(Eg("x",t,e,n),r,s)]}case"Any":{const r=Eg("axis",t,e,n),s=Eg("keepDims",t,e,n);return[Gi(Eg("x",t,e,n),r,s)]}case"ArgMax":{const r=Eg("axis",t,e,n);return[ji(Eg("x",t,e,n),r)]}case"ArgMin":{const r=Eg("axis",t,e,n);return[ud(Eg("x",t,e,n),r)]}case"Prod":{const r=Eg("axis",t,e,n),s=Eg("keepDims",t,e,n);return[Dd(Eg("x",t,e,n),r,s)]}case"Cumsum":{const r=Eg("axis",t,e,n),s=Eg("exclusive",t,e,n),i=Eg("reverse",t,e,n);return[Rl(Eg("x",t,e,n),r,s,i)]}case"Bincount":const r=Eg("x",t,e,n),s=Eg("weights",t,e,n),i=Eg("size",t,e,n);return[Ex(r,s,i)];case"DenseBincount":{const r=Eg("x",t,e,n),s=Eg("weights",t,e,n),i=Eg("size",t,e,n),o=Eg("binaryOutput",t,e,n);return[Sx(r,s,i,o)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"slice_join":return Fi((()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Eg("n",t,e,n),s=Eg("axis",t,e,n);let i=Eg("tensors",t,e,n);return i=i.slice(0,r),[po(i,s)]}case"Gather":{const r=Eg("x",t,e,n),s=Eg("indices",t,e,n);return[Lo(r,qs(s,"int32"),0)]}case"GatherV2":{const r=Eg("axis",t,e,n),s=Eg("batchDims",t,e,n),i=Eg("x",t,e,n),o=Eg("indices",t,e,n);return[Lo(i,qs(o,"int32"),r,s)]}case"Reverse":{const r=Eg("dims",t,e,n),s=[];for(let t=0;t<r.length;t++)r[t]&&s.push(t);const i=Eg("x",t,e,n);return[Ca(i,s)]}case"ReverseV2":{const r=Eg("axis",t,e,n),s=Eg("x",t,e,n);return[Ca(s,r)]}case"Slice":{const r=Eg("begin",t,e,n),s=Eg("size",t,e,n);return[Ra(Eg("x",t,e,n),r,s)]}case"StridedSlice":{const r=Eg("begin",t,e,n),s=Eg("end",t,e,n),i=Eg("strides",t,e,n),o=Eg("beginMask",t,e,n),a=Eg("endMask",t,e,n),u=Eg("ellipsisMask",t,e,n),c=Eg("newAxisMask",t,e,n),l=Eg("shrinkAxisMask",t,e,n),h=Eg("x",t,e,n);return[Vd(h,r,s,i,o,a,u,c,l)]}case"Pack":return Fi((()=>{const r=Eg("axis",t,e,n),s=Eg("tensors",t,e,n),i=s[0].shape,o=Pa(s[0]).shape,a=s.map((t=>{const e=_(t.shape,i);if(!e&&!_(Pa(t).shape,o))throw new Error("the input tensors shape does not match");return e?t:io(t,i)}));return[za(a,r)]}));case"Unpack":{const r=Eg("axis",t,e,n),s=Eg("tensor",t,e,n);return Ga(s,r)}case"Tile":{const r=Eg("reps",t,e,n);return[Io(Eg("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Eg("axis",t,e,n),s=Eg("numOrSizeSplits",t,e,n),i=Eg("x",t,e,n);return Da(i,s,r)}case"ScatterNd":{const r=Eg("indices",t,e,n),s=Eg("values",t,e,n),i=Eg("shape",t,e,n);return[Ax(r,s,i)]}case"GatherNd":{const r=Eg("x",t,e,n),s=Eg("indices",t,e,n);return[Rx(r,s)]}case"SparseToDense":{const r=Eg("sparseIndices",t,e,n),s=Eg("outputShape",t,e,n),i=Eg("sparseValues",t,e,n),o=Eg("defaultValue",t,e,n);return[Cx(r,i,s,i.dtype===o.dtype?o:qs(o,i.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"spectral":return Fi((()=>((t,e,n)=>{switch(t.op){case"FFT":return[Za(Eg("x",t,e,n))];case"IFFT":return[tu(Eg("x",t,e,n))];case"RFFT":return[Qa(Eg("x",t,e,n))];case"IRFFT":return[eu(Eg("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"transformation":return Fi((()=>((t,e,n)=>{switch(t.op){case"Cast":return[qs(Eg("x",t,e,n),Eg("dtype",t,e,n))];case"ExpandDims":{const r=Eg("axis",t,e,n);return[Fo(Eg("x",t,e,n),r)]}case"Squeeze":{const r=Eg("axis",t,e,n);return[Pa(Eg("x",t,e,n),r)]}case"Reshape":return[io(Eg("x",t,e,n),Eg("shape",t,e,n))];case"MirrorPad":return[_d(Eg("x",t,e,n),Eg("padding",t,e,n),Eg("mode",t,e,n))];case"PadV2":case"Pad":return[ya(Eg("x",t,e,n),Eg("padding",t,e,n),Eg("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Eg("blockShape",t,e,n),s=Eg("paddings",t,e,n);return[dl(Eg("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=Eg("blockShape",t,e,n),s=Eg("crops",t,e,n);return[Hh(Eg("x",t,e,n),r,s)]}case"DepthToSpace":{const r=Eg("blockSize",t,e,n),s=Eg("dataFormat",t,e,n).toUpperCase();return[md(Eg("x",t,e,n),r,s)]}case"BroadcastTo":return[ja(Eg("x",t,e,n),Eg("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const s=Eg("keyDType",t,e,n),i=Eg("valueDType",t,e,n),o=new Nx(s,i);return r.addHashTable(t.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Eg("tableHandle",t,e,n,r),i=Eg("keys",t,e,n),o=Eg("values",t,e,n),a=r.getHashTableById(s.id);return[await a.import(i,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Eg("tableHandle",t,e,n,r),i=Eg("keys",t,e,n),o=Eg("defaultValue",t,e,n),a=r.getHashTableById(s.id);return[await a.find(i,o)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,r);case"custom":const s=Cg(t.op);if(s&&s.customExecutor)return s.customExecutor(new hx(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return at(s)?s.then((t=>[].concat(t))):[].concat(s)}class Ox{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function Fx(t,e,n,r){const s=new Set,i=[];let o=null,a=null;const u=new Set,c=Object.keys(t).map((t=>Tg(t)[0]));let l=[];null!=r&&(l=r.map((t=>Tg(t.name)[0])));const h=[...e];for(;h.length>0;){const t=h.pop();(Dx(t)||Lx(t)||Px(t))&&null==o&&(o=t,a=o.children.map((t=>t.name)).filter((t=>s.has(t)))),s.add(t.name),null==n[t.name]&&(-1===c.indexOf(t.name)&&-1===l.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach((t=>{u.has(t.name)||(u.add(t.name),h.push(t))})):i.push(t.name)))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:i,dynamicNode:o,syncInputs:a}}const Ix=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],_x=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Mx=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function Dx(t){return Ix.indexOf(t.op)>=0}function Lx(t){return _x.indexOf(t.op)>=0}function Px(t){return Mx.indexOf(t.op)>=0}class zx{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new zx(t.functions[e],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((t,e)=>(t[e]=this._functions[e].signature,t)),{})}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=Fx(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:i}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(r.length>0){const n=e.map((t=>t.name)),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,i=[],o=Object.keys(s).map((t=>Tg(t)[0])).map((e=>t.nodes[e])),a=t.initNodes;o.forEach((t=>{r.has(t.name)&&i.push(t)})),t.weights.forEach((t=>{r.has(t.name)&&i.push(t)})),null!=a&&a.forEach((t=>{r.has(t.name)&&i.push(t)}));const u=new Set,c=[];for(;i.length>0;){const t=i.pop();u.add(t.name),e[t.name]||c.push(t),t.children.forEach((t=>{!u.has(t.name)&&r.has(t.name)&&t.inputs.every((t=>u.has(t.name)))&&i.push(t)}))}return c}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map((t=>this.graph.nodes[Tg(t)[0]])),s=e.map((t=>Tg(t)[0]));let i=s.map((t=>this.graph.nodes[t]));0===i.length&&(i=this._outputs);const o=this.getCompilationKey(r,i);let a=this.compiledMap.get(o);null==a&&(a=this.compile(t,i),this.compiledMap.set(o,a));const u={},c={};return Fi((()=>{const n=new Ox(this.weightMap,u,c,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,s]=Tg(e),i=[];i[s]=t[e],r[n]=i}));const i=this.getFrozenTensorIds(r),o={};for(let t=0;t<a.length;t++){const e=a[t];if(!r[e.name]){const t=Tx(e,r,n,this._resourceManager);if(at(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.checkTensorForDisposal(e.name,e,r,n,i,s,o)}}return null==this.parent&&n.dispose(i),e.map((t=>Sg(t,r,n)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,i,o){"control"!==e.category&&-1===i.indexOf(t)&&(n[t].forEach((t=>{null!=t&&(o[t.id]=(o[t.id]||0)+e.children.length)})),e.inputs.forEach((t=>{if("control"!==t.category){const e=function(t,e,n){return e[Rg(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach((t=>{if(t&&!s.has(t.id)){const e=o[t.id];1===e?(t.dispose(),delete o[t.id]):null!=e&&o[t.id]--}}))}})))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},s={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const i=new Ox(this.weightMap,r,s,this.functionExecutorMap),o=await this.executeWithControlFlow(t,i,e,n),a=e.map((t=>Sg(t,o,i))),u=a.map((t=>t.id)),c=Object.keys(t).map((e=>t[e].id)),l=new Set([...u,...c,...this.weightIds]);return Object.keys(o).forEach((t=>{o[t].forEach((t=>{!t||t.isDisposed||l.has(t.id)||t.dispose()}))})),null==this.parent&&i.dispose(l),a}async executeFunctionAsync(t,e,n){const r=t.reduce(((t,e,n)=>(t[this.inputs[n].name]=e,t)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),i=s.map((t=>this.graph.nodes[Tg(t)[0]])),o=n.map((t=>Tg(t)[0]));let a=o.map((t=>this.graph.nodes[t]));0===a.length&&(a=this._outputs);const{usedNodes:u,missingInputs:c,dynamicNode:l,syncInputs:h}=Fx(t,a,this.weightMap,this._initNodes),d=[...i,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=Tg(e),s=[];s[r]=t[e],f[n]=s}));const p={},m=this.getFrozenTensorIds(f),b={};for(;d.length>0;){const t=this.processStack(i,d,e,f,b,m,o,p,u);await Promise.all(t)}null!=l||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=a.filter((t=>!Dx(t)&&!Sg(t.name,f,e))).map((t=>t.name));if(y.length>0){let t="";throw null!=l&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${t}`)}return f}processStack(t,e,n,r,s,i,o,a,u){const c=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let l="";if("Enter"===t.node.op&&Eg("isConstant",t.node,r,n)&&([l]=Ag(t.node.name,n)),null==r[t.node.name]){const h=Tx(t.node,r,n,this._resourceManager);l||([l]=Ag(t.node.name,n));const d=n.currentContext;at(h)?c.push(h.then((c=>(r[l]=c,n.currentContext=d,this.checkTensorForDisposal(l,t.node,r,n,i,o,a),this.processChildNodes(t.node,e,n,r,s,u),c)))):(r[l]=h,this.checkTensorForDisposal(l,t.node,r,n,i,o,a),this.processChildNodes(t.node,e,n,r,s,u))}else this.processChildNodes(t.node,e,n,r,s,u)}return c}processChildNodes(t,e,n,r,s,i){t.children.forEach((t=>{const[o]=Ag(t.name,n);!s[o]&&i.has(t.name)&&("Merge"===t.op?t.inputNames.some((t=>!!Sg(t,r,n)))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!Sg(t,r,n)))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((e=>{const n=t[e],[r]=Tg(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;R(t.length===n.shape.length&&n.shape.every(((e,n)=>-1===t[n]||t[n]===e)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&R(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=Tg(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t}),{})}checkOutputs(t){t.forEach((t=>{const[e]=Tg(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class Vx{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class Bx{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new Vx}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=ri(t,this.loadOptions);else{const r=(e=t,n=this.loadOptions,gs.getLoadHandlers(e,n));if(0===r.length)r.push(ri(t,this.loadOptions));else if(r.length>1)throw new Error(`Found more than one (${r.length}) load handlers for URL '${[t]}'`);this.handler=r[0]}var e,n}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=function(t,e){const n={};let r,s=0;for(const i of e){const e=i.name,o=i.dtype,a=i.shape,u=I(a);let c;if("quantization"in i){const n=i.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${i.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${i.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${i.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const a=ls[n.dtype],l=t.slice(s,s+u*a),h="uint8"===n.dtype?new Uint8Array(l):new Uint16Array(l);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){c=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];c[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=ys()),c=r(h)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${e}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);c=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];c[t]=Math.round(e*n.scale+n.min)}}s+=u*a}else if("string"===o){const e=I(i.shape);c=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));c.push(n),s+=e}}else{const r=ls[o],i=t.slice(s,s+u*r);if("float32"===o)c=new Float32Array(i);else if("int32"===o)c=new Int32Array(i);else if("bool"===o)c=new Uint8Array(i);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${e}': ${o}`);{c=new Float32Array(i);const t=new Float32Array(c.length/2),r=new Float32Array(c.length/2);for(let e=0;e<t.length;e++)t[e]=c[2*e],r[e]=c[2*e+1];const s=cs(t,a,"float32"),o=cs(r,a,"float32");n[e]=as(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[e]=cs(c,a,o))}return n}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new zx(Jg.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const e=Jg.Instance.transformGraph(t.modelInitializer);this.initializer=new zx(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if("string"==typeof t){const e=xs(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof Ir||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce(((e,n)=>(e[n]=[t[n]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}function Wx(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(Hx(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const i in t){const o=Wx(t[i],e,n,r);s[i]=o}return r.delete(t),s}throw new Error(`Can't recurse into non-iterable type: ${t}`)}return n.set(t,s.value),s.value}function Ux(t,e=jx){return Gx(t,e)}function Gx(t,e,n=new Set){const r=t[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(Hx(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const i in r){const r=Gx(t.map((t=>t[i])),e,n);s[i]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function jx(t){return null===t?null:Hx(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function Hx(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof Ir))}function qx(t){return function(t,e){return Wx(t,e)}(t,Xx)}function Xx(t){return t instanceof Ir?{value:t.clone(),recurse:!1}:Hx(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class Kx{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class Jx extends Kx{constructor(){super(Jx.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Yx(t){return new ew(t)}function Zx(t,e){return new dw(t,e)}Jx.INITIAL_CAPACITY=32;class Qx{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new uw(this,t)}filter(t){return new ow(this,t)}map(t){return new aw(this,t)}mapAsync(t){return new cw(this,t)}serialMapAsync(t){return new cw(this,t).serial()}flatmap(t){return new hw(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile((t=>!0===t))}rowMajorBatch(t,e=!0){return new iw(this,t,e)}columnMajorBatch(t,e=!0,n=jx){return this.rowMajorBatch(t,e).map((t=>Ux(t,n)))}concatenate(t,e){return new dw(new tw([this,t]),e)}take(t){return t<0||null==t?this:new sw(this,t)}skip(t){return t<0||null==t?this:new rw(this,t)}prefetch(t){return new pw(this,t)}shuffle(t,e){return new mw(this,t,e)}serial(){return new nw(this)}}class tw extends Qx{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:qx(t),done:!1}}}class ew extends Qx{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}}class nw extends Qx{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class rw extends Qx{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Ii(t.value)}return this.upstream.next()}}class sw extends Qx{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class iw extends Qx{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class ow extends Qx{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Ii(t.value)}}}class aw extends Qx{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=jr(t.value),n=this.transform(t.value),r=jr(n);for(const t of e)Gr(t,r)||t.dispose();return{value:n,done:!1}}}class uw extends Qx{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class cw extends Qx{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=jr(t.value),n=await this.transform(t.value),r=jr(n);for(const t of e)Gr(t,r)||t.dispose();return{value:n,done:!1}}}class lw extends Qx{constructor(){super(),this.outputQueue=new Jx,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class hw extends lw{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=jr(t.value),n=this.transform(t.value),r=jr(n);this.outputQueue.pushAll(n);for(const t of e)Gr(t,r)||t.dispose();return!0}}class dw extends Qx{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var fw;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(fw||(fw={}));class pw extends Qx{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new Kx(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class mw extends pw{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=xa.alea(n||Er().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class bw{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return R(t>0,(()=>`batchSize needs to be positive, but it is\n      ${t}`)),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),yw((async()=>(await n.iterator()).columnMajorBatch(t,e,gw)),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,yw((async()=>(await e.iterator()).concatenate(await t.iterator())),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,yw((async()=>(await e.iterator()).filter((e=>Fi((()=>t(e)))))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return yw((async()=>(await e.iterator()).map((e=>Fi((()=>t(e)))))),this.size)}mapAsync(t){const e=this;return yw((async()=>(await e.iterator()).mapAsync(t)),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return yw((async()=>(await e.iterator()).prefetch(t)),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,yw((async()=>Zx(Yx((async()=>({value:await e.iterator(),done:!1}))).take(t))),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,yw((async()=>(await e.iterator()).skip(t)),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=xa.alea(e||Er().toString());return yw((async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())}),this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,yw((async()=>(await e.iterator()).take(t)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function yw(t,e=null){return new class extends bw{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function gw(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof Ir||j(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof Ir?za(t):cs(t)}(t),recurse:!1}}var n,r;return{value:null,recurse:!0}}bw.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function xw(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&R("complex64"!==t.dtype,(()=>`${e} does not support complex64 tensors in the CPU backend.`))}))}const ww=Xc;class vw extends N{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new $(this,Ti())}write(t,e,n){this.firstUse&&(this.firstUse=!1,lt().get("IS_NODE")&&Tc("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n,refCount:1}),r}makeTensorInfo(t,e,n){let r;if("string"===e&&null!=n&&n.length>0&&q(n[0])){const s=n.map((t=>Sr(t)));r=this.write(s,t,e)}else r=this.write(n,t,e);return{dataId:r,shape:t,dtype:e}}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,r){this.data.set(t,{values:e,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);if("complex64"===e){return Fc(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map((t=>Ar(t)))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Hs(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Ti().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensorInfos:e}=this.data.get(t);null!=e&&(this.disposeData(e.real.dataId),this.disposeData(e.imag.dataId)),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=Er();t();return{kernelMs:Er()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){xw([t],"where");const e=this.readSync(t.dataId);return ww(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function kw(t,e,n){return({inputs:r,attrs:s,backend:i})=>{const{x:o}=r;if(xw(o,t),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const a=i,u=a.data.get(o.dataId).values,c=I(o.shape),l=n||o.dtype,h=U(l,c);for(let t=0;t<c;++t)h[t]=e(u[t],s);return a.makeTensorInfo(o.shape,l,h)}}function $w(t,e,n){return({inputs:r,attrs:s,backend:i})=>{const{x:o}=r;if(xw(o,t),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const a=i,u=a.data.get(o.dataId).values,c=n||o.dtype,l=e(u,c,s);return a.makeTensorInfo(o.shape,c,l)}}Li("cpu",(()=>new vw),1);const Nw=kw(ue,(t=>t>=0?t:Math.exp(t)-1)),Cw={kernelName:ue,backendName:"cpu",kernelFunc:Nw};function Ew(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Sw={kernelName:Ce,backendName:"cpu",kernelFunc:Ew};function Aw(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{alpha:i}=r;xw([s],"leakyRelu");const o=I(s.shape),a=n.data.get(s.dataId).values,u=W("float32",o);for(let t=0;t<a.length;t++)u[t]=a[t]<0?i*a[t]:a[t];return n.makeTensorInfo(s.shape,"float32",u)}const Rw={kernelName:Oe,backendName:"cpu",kernelFunc:Aw};function Tw(t){return(e,n,r,s,i)=>{const o=To(e,n),a=o.length,u=Z(o),c=W(i,I(o)),l=e.length,h=n.length,d=Z(e),f=Z(n),p=Ao(e,o),m=Ao(n,o);if(p.length+m.length===0)for(let e=0;e<c.length;++e)c[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<c.length;++e){const n=ot(e,a,u),i=n.slice(-l);p.forEach((t=>i[t]=0));const o=it(i,l,d),b=n.slice(-h);m.forEach((t=>b[t]=0));const y=it(b,h,f);c[e]=t(r[o],s[y])}return[c,o]}}const Ow=Tw(((t,e)=>t<0?e*t:t));function Fw(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e;xw([r,s],"prelu");const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,[a,u]=Ow(r.shape,s.shape,i,o,r.dtype);return n.makeTensorInfo(u,r.dtype,a)}const Iw={kernelName:fn,backendName:"cpu",kernelFunc:Fw},_w=kw(gn,(t=>Math.max(0,t))),Mw={kernelName:gn,backendName:"cpu",kernelFunc:_w},Dw=kw(Nn,(t=>Math.min(Math.max(0,t),6))),Lw={kernelName:Nn,backendName:"cpu",kernelFunc:Dw};function Pw(t,e,n,r,s){if("linear"===n)return Ew({inputs:{x:e},backend:t});if("relu"===n)return _w({inputs:{x:e},backend:t});if("elu"===n)return Nw({inputs:{x:e},backend:t});if("relu6"===n)return Dw({inputs:{x:e},backend:t});if("prelu"===n)return Fw({inputs:{x:e,alpha:r},backend:t});if("leakyrelu"===n)return Aw({inputs:{x:e},backend:t,attrs:{alpha:s}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function zw(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,a=n.makeTensorInfo(r.shape,"complex64");return n.data.get(a.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",i),imag:n.makeTensorInfo(s.shape,"float32",o)},a}const Vw={kernelName:zt,backendName:"cpu",kernelFunc:zw};function Bw(t,e,n="float32"){if("complex64"===n){return zw({inputs:{real:Bw(t,e,"float32"),imag:Bw(t,e,"float32")},backend:t})}const r=nt(I(e),n);return t.makeTensorInfo(e,n,r)}function Ww(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.real,i=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,i)}const Uw={kernelName:bn,backendName:"cpu",kernelFunc:Ww};function Gw(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dtype:i}=r;if("complex64"===i){if("complex64"===s.dtype)return Ew({inputs:{x:s},backend:n});const t=Bw(n,s.shape,s.dtype),e=Gw({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=zw({inputs:{real:e,imag:t},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),r}if("complex64"===s.dtype){const t=Ww({inputs:{input:s},backend:n}),e=Gw({inputs:{x:t},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(t),e}if(!G(s.dtype,i)){const t=Ew({inputs:{x:s},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:i}}if("int32"===i){const t=n.data.get(s.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(s.shape,"int32",e)}if("bool"===i){const t=n.data.get(s.dataId).values,e=Cr([0],s.dtype),[r,i]=Tw(((t,e)=>t!==e?1:0))(s.shape,[],t,e,"bool");return n.makeTensorInfo(i,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}const jw={kernelName:Dt,backendName:"cpu",kernelFunc:Gw};function Hw(t,e,n,r){return null==n?({inputs:n,backend:s})=>{const{a:i,b:o}=n,a=s;xw([i,o],t);const u=a.data.get(i.dataId).values,c=a.data.get(o.dataId).values,l=r||i.dtype,[h,d]=e(i.shape,o.shape,u,c,l);return a.makeTensorInfo(d,l,h)}:({inputs:t,backend:s})=>{const{a:i,b:o}=t,a=s;if("complex64"===i.dtype||"complex64"===o.dtype){const t=Gw({inputs:{x:i},backend:a,attrs:{dtype:"complex64"}}),e=a.data.get(t.dataId),r=e.complexTensorInfos.real,s=e.complexTensorInfos.imag,u=a.data.get(r.dataId).values,c=a.data.get(s.dataId).values,l=Gw({inputs:{x:o},backend:a,attrs:{dtype:"complex64"}}),h=a.data.get(l.dataId),d=h.complexTensorInfos.real,f=h.complexTensorInfos.imag,p=a.data.get(d.dataId).values,m=a.data.get(f.dataId).values,[b,y,g]=n(i.shape,o.shape,u,c,p,m),x=a.makeTensorInfo(g,"float32",b),w=a.makeTensorInfo(g,"float32",y),v=zw({inputs:{real:x,imag:w},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(l),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(w),v}{const t=a.data.get(i.dataId).values,n=a.data.get(o.dataId).values,s=r||i.dtype,[u,c]=e(i.shape,o.shape,t,n,s);return a.makeTensorInfo(c,s,u)}}}function qw(t){return(e,n,r,s,i,o)=>{const a=To(e,n),u=I(a),c=a.length,l=Z(a),h=W("float32",u),d=W("float32",u),f=Ao(e,a),p=Ao(n,a),m=Fc(r,s),b=Fc(i,o),y=e.length,g=Z(e),x=n.length,w=Z(n);if(f.length+p.length===0)for(let e=0;e<h.length;e++){const n=e%m.length,r=e%b.length,s=t(m[2*n],m[2*n+1],b[2*r],b[2*r+1]);h[e]=s.real,d[e]=s.imag}else for(let e=0;e<h.length;e++){const n=ot(e,c,l),r=n.slice(-y);f.forEach((t=>r[t]=0));const s=it(r,y,g),i=n.slice(-x);p.forEach((t=>i[t]=0));const o=it(i,x,w),a=t(m[2*s],m[2*s+1],b[2*o],b[2*o+1]);h[e]=a.real,d[e]=a.imag}return[h,d,a]}}const Xw=Tw(((t,e)=>t+e)),Kw=qw(((t,e,n,r)=>({real:t+n,imag:e+r}))),Jw=Hw(gt,Xw,Kw),Yw={kernelName:gt,backendName:"cpu",kernelFunc:Jw};function Zw(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:i}=r,o=I(s.shape),a=z(i,o),u=I(a);R(o===u,(()=>`The new shape (${a}) has ${u} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const c=n.data.get(s.dataId);if(null!=c.complexTensorInfos){const t=c.complexTensorInfos.real,e=c.complexTensorInfos.imag;t.shape=a,e.shape=a}return{dataId:s.dataId,shape:a,dtype:s.dtype}}const Qw={kernelName:xn,backendName:"cpu",kernelFunc:Zw};function tv(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i}=e,{transposeA:o,transposeB:a}=r;xw([s,i],"matMul");const u=s.shape.length,c=i.shape.length,l=o?s.shape[u-2]:s.shape[u-1],h=a?i.shape[c-1]:i.shape[c-2],d=o?s.shape[u-1]:s.shape[u-2],f=a?i.shape[c-2]:i.shape[c-1],p=s.shape.slice(0,-2),m=i.shape.slice(0,-2),b=I(p),y=I(m);R(u>=2&&c>=2&&(b===y||1===b||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${p}) and (${m}).`));const g=(b>y?s.shape.slice(0,-2):i.shape.slice(0,-2)).concat([d,f]);R(l===h,(()=>`Error in matMul: inner shapes (${l}) and (${h}) of Tensors with shapes ${s.shape} and ${i.shape} and transposeA=${o} and transposeB=${a} must match.`));const x=a?[y,f,h]:[y,h,f],w=Zw({inputs:{x:s},backend:n,attrs:{shape:o?[b,l,d]:[b,d,l]}}),v=Zw({inputs:{x:i},backend:n,attrs:{shape:x}}),k=o?w.shape[1]:w.shape[2],$=o?w.shape[2]:w.shape[1],N=a?v.shape[1]:v.shape[2],C=Math.max(b,y),E=n.data.get(w.dataId).values,S=n.data.get(v.dataId).values,A=Z(w.shape),T=Z(v.shape),[O,F,_]=o?[A[0],1,A[1]]:[A[0],A[1],1],[M,D,L]=a?[1,T[1],T[0]]:[T[1],1,T[0]],P=$*N,z=Hs([C,$,N],w.dtype),V=z.values,B=n.blockSize;for(let t=0;t<C;t++)for(let e=0;e<$;e+=B)for(let n=0;n<N;n+=B)for(let r=0;r<k;r+=B){const s=Math.min(e+B,$),i=Math.min(n+B,N),o=Math.min(r+B,k);for(let a=e;a<s;a++)for(let e=n;e<i;e++){let n=0;for(let s=r;s<o;s++){const r=Math.min(t,b-1)*O,i=Math.min(t,y-1)*L;n+=E[r+a*F+s*_]*S[s*M+e*D+i]}V[t*P+(a*N+e)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(g,z.dtype,z.values)}const ev={kernelName:It,backendName:"cpu",kernelFunc:tv};const nv={kernelName:ir,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i,bias:o,preluActivationWeights:a}=e,{transposeA:u,transposeB:c,activation:l,leakyreluAlpha:h}=r;let d,f,p;const m=[];d=tv({inputs:{a:s,b:i},attrs:{transposeA:u,transposeB:c},backend:n}),o&&(f=Jw({inputs:{a:d,b:o},backend:n}),m.push(d),d=f),l&&(p=Pw(n,d,l,a,h),m.push(d),d=p);for(const t of m)n.disposeIntermediateTensorInfo(t);return d}};function rv(t){const e=new Float32Array(t.length);for(let n=0;n<t.length;++n)e[n]=Math.abs(t[n]);return e}const sv={kernelName:mt,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend;xw(e,"abs");let r=new Float32Array(I(e.shape));return r=rv(n.data.get(e.dataId).values),n.makeOutput(r,e.shape,"float32")}},iv=kw(bt,(t=>Math.acos(t))),ov={kernelName:bt,backendName:"cpu",kernelFunc:iv},av=kw(yt,(t=>Math.acosh(t))),uv={kernelName:yt,backendName:"cpu",kernelFunc:av};const cv={kernelName:xt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,r=e;xw(e,"addN");const s=r.map((t=>n.data.get(t.dataId).values)),i=Hs(r[0].shape,r[0].dtype),o=i.values;for(let t=0;t<r.length;t++){const e=s[t];for(let t=0;t<o.length;t++)o[t]+=e[t]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}};function lv(t,e,n,r,s){const i=e.length,o=I(e),a=Z(e),u=Z(s),c=W(n,I(s));for(let e=0;e<o;++e){const n=ot(e,i,a),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];c[it(s,i,u)]=t[e]}return c}function hv(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{perm:i}=n;xw(s,"transpose");const o=s.shape.length,a=new Array(o);for(let t=0;t<a.length;t++)a[t]=s.shape[i[t]];const u=lv(r.data.get(s.dataId).values,s.shape,s.dtype,i,a);return{dataId:r.write(u,a,s.dtype),shape:a,dtype:s.dtype}}const dv={kernelName:Yn,backendName:"cpu",kernelFunc:hv};const fv={kernelName:wt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r;xw(s,"all");const a=V(i,s.shape);let u=a;const c=oa(u,s.shape.length);let l=s;null!=c&&(l=hv({inputs:{x:s},backend:n,attrs:{perm:c}}),u=ua(u.length,s.shape.length)),ia("all",u,l.shape.length);const[h,d]=ra(l.shape,u),f=I(d),p=nt(I(h),l.dtype),m=n.data.get(l.dataId).values;for(let t=0;t<p.length;++t){const e=t*f;let n=m[e];for(let t=0;t<f;++t){const r=m[e+t];n=n&&r}p[t]=n}null!=c&&n.disposeIntermediateTensorInfo(l);const b=n.makeTensorInfo(h,l.dtype,p);if(o){const t=Zw({inputs:{x:b},backend:n,attrs:{shape:sa(h,a)}});return n.disposeIntermediateTensorInfo(b),t}return b}};const pv={kernelName:vt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r;xw(s,"any");const a=V(i,s.shape);let u=a;const c=oa(u,s.shape.length);let l=s;null!=c&&(l=hv({inputs:{x:s},backend:n,attrs:{perm:c}}),u=ua(u.length,s.shape.length)),ia("any",u,l.shape.length);const[h,d]=ra(l.shape,u),f=I(d),p=nt(I(h),l.dtype),m=n.data.get(l.dataId).values;for(let t=0;t<p.length;++t){const e=t*f;let n=m[e];for(let t=0;t<f;++t){const r=m[e+t];n=n||r}p[t]=n}null!=c&&n.disposeIntermediateTensorInfo(l);const b=n.makeTensorInfo(h,l.dtype,p);if(o){const t=Zw({inputs:{x:b},backend:n,attrs:{shape:sa(h,a)}});return n.disposeIntermediateTensorInfo(b),t}return b}};const mv={kernelName:kt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;xw(s,"argMax");let o=V(i,s.shape);const a=oa(o,s.shape.length);let u=s;const c=[];null!=a&&(u=hv({inputs:{x:s},backend:n,attrs:{perm:a}}),c.push(u),o=ua(o.length,u.shape.length)),o=[o[0]],ia("argMax",o,u.shape.length);const[l,h]=ra(u.shape,o),d=nt(I(l),"int32"),f=I(h),p=n.data.get(u.dataId).values;for(let t=0;t<d.length;++t){const e=t*f;let n=p[e],r=0;for(let t=0;t<f;++t){const s=p[e+t];s>n&&(n=s,r=t)}d[t]=r}return c.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(l,"int32",d)}};const bv={kernelName:$t,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;xw(s,"argMin");let o=V(i,s.shape);const a=oa(o,s.shape.length);let u=s;const c=[];null!=a&&(u=hv({inputs:{x:s},backend:n,attrs:{perm:a}}),c.push(u),o=ua(o.length,u.shape.length)),o=[o[0]],ia("argMin",o,u.shape.length);const[l,h]=ra(u.shape,o),d=nt(I(l),"int32"),f=I(h),p=n.data.get(u.dataId).values;for(let t=0;t<d.length;++t){const e=t*f;let n=p[e],r=0;for(let t=0;t<f;++t){const s=p[e+t];s<n&&(n=s,r=t)}d[t]=r}return c.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(l,"int32",d)}},yv=kw(Nt,(t=>Math.asin(t))),gv={kernelName:Nt,backendName:"cpu",kernelFunc:yv},xv=kw(Ct,(t=>Math.asinh(t))),wv={kernelName:Ct,backendName:"cpu",kernelFunc:xv},vv=kw(Et,(t=>Math.atan(t))),kv={kernelName:Et,backendName:"cpu",kernelFunc:vv},$v=Tw(((t,e)=>Math.atan2(t,e))),Nv=Hw(At,$v),Cv={kernelName:At,backendName:"cpu",kernelFunc:Nv},Ev=kw(St,(t=>Math.atanh(t))),Sv={kernelName:St,backendName:"cpu",kernelFunc:Ev};function Av(t,e,n,r,s,i){const o=s.strideHeight,a=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,l=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,p="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Hs(s.outShape,n),b=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],g=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*o-d,v=Math.max(0,w),k=Math.min(s.inHeight,l+w),$=n+y*g;for(let n=0;n<s.outWidth;++n){const o=n*a-f,l=Math.max(0,o),d=Math.min(s.inWidth,h+o);let y=p,g=0,w=0;for(let n=v;n<k;n+=u){const s=m+n*r[1];for(let n=l;n<d;n+=c){const o=t[s+n*r[2]+e];"max"===i&&o>y?y=o:"avg"===i&&(g+=o,w++)}if(isNaN(y))break}b[$+n*x+e]="avg"===i?g/w:y}}}return m}function Rv(t,e,n,r,s=!1,i=!1){const o=Hs(r.outShape,"int32"),a=r.strideHeight,u=r.strideWidth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=r.padInfo.top,p=r.padInfo.left,m=Hs(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const b=n*a-f;let y=b;for(;y<0;)y+=c;const g=Math.min(r.inHeight,h+b);for(let a=0;a<r.outWidth;++a){const h=a*u-p;let f=h;for(;f<0;)f+=l;const x=Math.min(r.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<g;n+=c){const o=n-b;for(let a=f;a<x;a+=l){const u=a-h,c=m.get(t,n,a,e);c>w&&(w=c,v=s?i?((t*r.inHeight+n)*r.inWidth+a)*r.inChannels+e:(n*r.inWidth+a)*r.inChannels+e:o*d+u)}}o.set(v,t,n,a,e)}}return o}function Tv(t,e,n,r,s,i){const o=s.strideDepth,a=s.strideHeight,u=s.strideWidth,c=s.dilationDepth,l=s.dilationHeight,h=s.dilationWidth,d=s.effectiveFilterDepth,f=s.effectiveFilterHeight,p=s.effectiveFilterWidth,m=s.padInfo.front,b=s.padInfo.top,y=s.padInfo.left,g="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Hs(s.outShape,n),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],k=s.outShape[2]*s.outShape[3]*s.outShape[4],$=s.outShape[3]*s.outShape[4],N=s.outShape[4];for(let e=0;e<s.batchSize;++e){const n=e*v,x=e*r[0];for(let e=0;e<s.inChannels;++e)for(let v=0;v<s.outDepth;++v){const C=v*o-m;let E=C;for(;E<0;)E+=c;const S=Math.min(s.inDepth,d+C),A=n+v*k;for(let n=0;n<s.outHeight;++n){const o=n*a-b;let d=o;for(;d<0;)d+=l;const m=Math.min(s.inHeight,f+o),v=A+n*$;for(let n=0;n<s.outWidth;++n){const o=n*u-y;let a=o;for(;a<0;)a+=h;const f=Math.min(s.inWidth,p+o),b=v+n*N;let k=g,$=0,C=0;for(let n=E;n<S;n+=c){const s=x+n*r[1];for(let n=d;n<m;n+=l){const o=s+n*r[2];for(let n=a;n<f;n+=h){const s=t[o+n*r[3]+e];if("max"===i&&s>k?k=s:"avg"===i&&($+=s,C++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[b+e]="avg"===i?$/C:k}}}}return x}const Ov={kernelName:Rt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;xw(s,"avgPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:u}=r;R(ro(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=qi(s.shape,i,o,1,a,u);let l;if(1===c.filterWidth&&1===c.filterHeight&&_(c.inShape,c.outShape))l=Ew({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=Z(s.shape),r=Av(t,s.shape,s.dtype,e,c,"avg");l=n.makeTensorInfo(c.outShape,s.dtype,r.values)}return l}};const Fv={kernelName:Ot,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:o,pad:a,dimRoundingMode:u,dataFormat:c,dilations:l}=r;xw(s,"avgPool3d");let h=l;null==h&&(h=[1,1,1]);const d=Xi(s.shape,i,o,h,a,u,c),f=Tv(n.data.get(s.dataId).values,s.shape,s.dtype,Z(s.shape),d,"avg");return n.makeTensorInfo(f.shape,"float32",f.values)}};const Iv={kernelName:Ft,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,{filterSize:o,strides:a,pad:u,dilations:c,dimRoundingMode:l}=r;xw([s,i],"avgPool3DGrad");const h=Xi(i.shape,o,a,c,u,l),d=h.strideDepth,f=h.strideHeight,p=h.strideWidth,m=h.filterDepth,b=h.filterHeight,y=h.filterWidth,g=h.dilationDepth,x=h.dilationHeight,w=h.dilationWidth,v=h.effectiveFilterDepth,k=h.effectiveFilterHeight,$=h.effectiveFilterWidth,N=v-1-h.padInfo.front,C=$-1-h.padInfo.left,E=k-1-h.padInfo.top,S=Hs(i.shape,"float32"),A=1/(m*b*y),R=n.bufferSync(s);for(let t=0;t<h.batchSize;++t)for(let e=0;e<h.inChannels;++e)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let s=0;s<h.inWidth;++s){const i=n-N,o=r-E,a=s-C;let u=0;for(let n=0;n<v;n+=g){const r=(i+n)/d;if(!(r<0||r>=h.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=x){const s=(o+n)/f;if(!(s<0||s>=h.outHeight||Math.floor(s)!==s))for(let n=0;n<$;n+=w){const i=(a+n)/p;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;u+=R.get(t,r,s,i,e)}}}S.set(u*A,t,n,r,s,e)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const _v={kernelName:Tt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,o=i;xw([s,i],"avgPoolGrad");const{filterSize:a,strides:u,pad:c}=r,l=qi(o.shape,a,u,1,c),h=l.strideHeight,d=l.strideWidth,f=l.filterHeight,p=l.filterWidth,m=l.dilationHeight,b=l.dilationWidth,y=l.effectiveFilterHeight,g=l.effectiveFilterWidth,x=g-1-l.padInfo.left,w=y-1-l.padInfo.top,v=Hs(o.shape,"float32"),k=1/(f*p),$=n.data.get(s.dataId).values,N=Hs(s.shape,"float32",$);for(let t=0;t<l.batchSize;++t)for(let e=0;e<l.inChannels;++e)for(let n=0;n<l.inHeight;++n)for(let r=0;r<l.inWidth;++r){const s=n-w,i=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(s+n)/h;if(!(r<0||r>=l.outHeight||Math.floor(r)!==r))for(let n=0;n<g;n+=b){const s=(i+n)/d;if(s<0||s>=l.outWidth||Math.floor(s)!==s)continue;o+=N.get(t,r,s,e)}}v.set(o*k,t,n,r,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const Mv={kernelName:we,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,scale:i,offset:o,mean:a,variance:u}=e;R(a.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),R(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),R(null==i||a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),xw([s,a,u,i,o],"batchNorm");let{varianceEpsilon:c}=r;null==c&&(c=.001);const l=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,d=n.data.get(u.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),p=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(l.length),b=p.length,y=f.length,g=d.length,x=h.length;let w=0,v=0,k=0,$=0;for(let t=0;t<l.length;++t)m[t]=p[w++]+(l[t]-h[v++])*f[k++]/Math.sqrt(d[$++]+c),w>=b&&(w=0),v>=x&&(v=0),k>=y&&(k=0),$>=g&&($=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function Dv(t,e,n,r,s){const i=ki(r,e,n),o=I(n),a=Z(r);if(i){const n=$i(e,a);return"string"===s?t.slice(n,n+o):t.subarray(n,n+o)}const u=Hs(r,s,"string"===s?Hc(t):t),c=Hs(n,s);for(let t=0;t<c.size;++t){const n=c.indexToLoc(t),r=n.map(((t,n)=>t+e[n]));c.set(u.get(...r),...n)}return"string"===s?qc(c.values):c.values}function Lv(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,size:o}=r;xw(s,"slice");const[a,u]=Ni(s,i,o);li(s,a,u);const c=Dv(n.data.get(s.dataId).values,a,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,c)}const Pv={kernelName:On,backendName:"cpu",kernelFunc:Lv};const zv={kernelName:_t,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,crops:o}=r;xw([s],"batchToSpaceND");const a=i.reduce(((t,e)=>t*e)),u=yc(s.shape,i,a),c=gc(u.length,i.length),l=xc(s.shape,i,a),h=wc(o,i.length),d=vc(l,o,i.length),f=Zw({inputs:{x:s},backend:n,attrs:{shape:u}}),p=hv({inputs:{x:f},backend:n,attrs:{perm:c}}),m=Zw({inputs:{x:p},backend:n,attrs:{shape:l}}),b=Lv({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),b}};function Vv(t,e,n,r,s){const i=I(r),o=nt(s,n);for(let n=0;n<t.length;n++){const r=t[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=i>0?e[n]:1)}return o}function Bv(t,e,n,r=!1){const s=t.shape[0],i=t.shape[1],o=Hs([s,n],e.dtype);for(let a=0;a<s;a++)for(let s=0;s<i;s++){const i=t.get(a,s);if(i<0)throw new Error("Input x must be non-negative!");i>=n||(r?o.set(1,a,i):e.size>0?o.set(o.get(a,i)+e.get(a,s),a,i):o.set(o.get(a,i)+1,a,i))}return o}const Wv={kernelName:Mt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:o}=r,a=Vv(n.data.get(s.dataId).values,n.data.get(i.dataId).values,i.dtype,i.shape,o);return n.makeTensorInfo([o],i.dtype,a)}};function Uv(t){return(e,n,r)=>{const s=W(n,e.length);for(let n=0;n<e.length;++n)s[n]=t(e[n],r);return s}}const Gv=Uv((t=>Math.ceil(t))),jv=$w(Lt,Gv),Hv={kernelName:Lt,backendName:"cpu",kernelFunc:jv},qv=kw(Pt,((t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t})),Xv={kernelName:Pt,backendName:"cpu",kernelFunc:qv},Kv={kernelName:Vt,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend,r=new Float32Array(I(e.shape)),s=n.data.get(e.dataId),i=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,a=n.data.get(i.dataId).values,u=n.data.get(o.dataId).values;for(let t=0;t<a.length;t++){const e=a[t],n=u[t];r[t]=Math.hypot(e,n)}return n.makeOutput(r,e.shape,"float32")}};function Jv(t,e,n,r){const s=U(n,I(e));if(r&&"string"!==n){let e=0;t.forEach((t=>{const n=I(t.shape);s.set(t.vals,e),e+=n}))}else{let r=0;t.forEach((t=>{const i="string"===n?Hc(t.vals):t.vals;let o=0;for(let n=0;n<t.shape[0];++n){const a=n*e[1]+r;for(let e=0;e<t.shape[1];++e)s[a+e]=i[o++]}r+=t.shape[1]}))}return s}function Yv(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.imag,i=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,i)}const Zv={kernelName:Se,backendName:"cpu",kernelFunc:Yv};function Qv(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,i=V(s,e[0].shape)[0];let o=fc(e.map((t=>t.shape)),i);if(0===I(o))return n.makeTensorInfo(o,e[0].dtype,[]);const a=e.filter((t=>I(t.shape)>0));if(1===a.length)return Ew({inputs:{x:a[0]},backend:n});if(dc(a.map((t=>t.shape)),i),"complex64"===a[0].dtype){const t=a.map((t=>Ww({inputs:{input:t},backend:n}))),e=a.map((t=>Yv({inputs:{input:t},backend:n}))),r=Qv({inputs:t,backend:n,attrs:{axis:i}}),s=Qv({inputs:e,backend:n,attrs:{axis:i}}),o=zw({inputs:{real:r,imag:s},backend:n});return t.forEach((t=>n.disposeIntermediateTensorInfo(t))),e.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}const u=a.map((t=>{const e=I(t.shape.slice(i));return Zw({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})})),c=u.map((t=>({vals:n.data.get(t.dataId).values,shape:t.shape})));o=fc(u.map((t=>t.shape)),1);const l=1===u[0].shape[0],h=Jv(c,o,e[0].dtype,l),d=fc(a.map((t=>t.shape)),i),f=n.makeTensorInfo(d,e[0].dtype,h);return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),f}const tk={kernelName:Bt,backendName:"cpu",kernelFunc:Qv};function ek(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:o,pad:a,dataFormat:u,dilations:c,dimRoundingMode:l}=r;xw([s,i],"conv2d");const h=so(u),d=Ki(s.shape,i.shape,o,c,a,l,!1,h),f=d.filterHeight,p=d.filterWidth,m=d.dilationHeight,b=d.dilationWidth,y=d.padInfo.left,g=d.padInfo.top,x="channelsLast"===d.dataFormat,w=new Rr(d.outShape,s.dtype),v=Z(s.shape),k=Z(i.shape),$=v[0],N=x?v[1]:v[2],C=x?v[2]:1,E=x?1:v[1],S=w.strides[0],A=x?w.strides[1]:w.strides[2],R=x?w.strides[2]:1,T=x?1:w.strides[1],O=n.data.get(s.dataId).values,F=n.data.get(i.dataId).values,I=w.values;for(let t=0;t<d.batchSize;++t){const e=t*$,n=t*S;for(let t=0;t<d.outHeight;++t){const r=n+t*A,s=t*d.strideHeight-g;for(let t=0;t<f;++t){const n=s+t*m;if(n<0||n>=d.inHeight)continue;const i=t*k[0],o=e+n*N;for(let t=0;t<d.outWidth;++t){const e=r+t*R,n=t*d.strideWidth-y;for(let t=0;t<p;++t){const r=n+t*b;if(r<0||r>=d.inWidth)continue;const s=o+r*C;let a=i+t*k[1];for(let t=0;t<d.inChannels;++t){const n=O[s+t*E];for(let t=0;t<d.outChannels;++t)I[e+t*T]+=n*F[a+t];a+=d.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,I)}const nk={kernelName:Wt,backendName:"cpu",kernelFunc:ek};const rk={kernelName:Ut,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:o,pad:a,dataFormat:u,dimRoundingMode:c,filterShape:l}=r;xw([s,i],"conv2dBackpropFilter");const h=so(u),d=Ki(s.shape,l,o,1,a,c,!1,h),{strideHeight:f,strideWidth:p,filterHeight:m,filterWidth:b}=d,y="channelsLast"===d.dataFormat,g=new Rr(d.filterShape,"float32"),x=d.padInfo.left,w=d.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(i.dataId).values,$=new Rr(s.shape,s.dtype,v),N=new Rr(i.shape,i.dtype,k);for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((w-t)/f)),n=Math.min(d.outHeight,(d.inHeight+w-t)/f);for(let r=0;r<b;++r){const s=Math.max(0,Math.ceil((x-r)/p)),i=Math.min(d.outWidth,(d.inWidth+x-r)/p);for(let o=0;o<d.inChannels;++o)for(let a=0;a<d.outChannels;++a){let u=0;for(let c=0;c<d.batchSize;++c)for(let l=e;l<n;++l){const e=t+l*f-w;for(let t=s;t<i;++t){const n=r+t*p-x;u+=y?$.get(c,e,n,o)*N.get(c,l,t,a):$.get(c,o,e,n)*N.get(c,a,l,t)}}g.set(u,t,r,o,a)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const sk={kernelName:Gt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{inputShape:o,strides:a,pad:u,dataFormat:c,dimRoundingMode:l}=r;xw([s,i],"conv2dBackpropInput");const h=Z(i.shape),d=Z(s.shape);let f=so(c);const p=Ki(o,i.shape,a,1,u,l,!1,f),m=new Rr(p.inShape,"float32"),b=m.values,y=n.data.get(s.dataId).values,g=n.data.get(i.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:$,filterWidth:N,inChannels:C,inHeight:E,inWidth:S,outChannels:A,outHeight:R,outWidth:T,strideHeight:O,strideWidth:F}=p;f=p.dataFormat;const I=$-1-p.padInfo.top,_=N-1-p.padInfo.left,M="channelsLast"===f,D=m.strides[0],L=M?m.strides[1]:m.strides[2],P=M?m.strides[2]:1,z=M?1:m.strides[1],V=d[0],B=M?d[1]:d[2],W=M?d[2]:1,U=M?1:d[1];for(let t=0;t<k;++t)for(let e=0;e<C;++e)for(let n=0;n<E;++n){const r=n-I,s=Math.max(0,Math.ceil(r/O)),i=Math.min(R,($+r)/O);for(let o=0;o<S;++o){const a=o-_,u=Math.max(0,Math.ceil(a/F)),c=Math.min(T,(N+a)/F);let l=0;for(let n=s;n<i;++n){const s=n*O-r;for(let r=u;r<c;++r){const i=V*t+B*n+W*r,o=x*($-1-s)+w*(N-1-(r*F-a))+v*e;for(let t=0;t<A;++t){l+=y[i+U*t]*g[o+t]}}}b[D*t+L*n+P*o+z*e]=l}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const ik={kernelName:jt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:o,pad:a,dilations:u}=r;xw([s,i],"conv3d");const c=Ji(s.shape,i.shape,o,u,a),{filterDepth:l,filterHeight:h,filterWidth:d,dilationDepth:f,dilationHeight:p,dilationWidth:m,padInfo:b}=c,y=b.front,g=b.left,x=b.top,w=new Rr(c.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(i.dataId).values,$=w.values,N=Z(s.shape),C=Z(i.shape);for(let t=0;t<c.batchSize;++t){const e=t*N[0],n=t*w.strides[0];for(let t=0;t<c.outDepth;++t){const r=n+t*w.strides[1],s=t*c.strideDepth-y;for(let t=0;t<l;++t){const n=s+t*f;if(n<0||n>=c.inDepth)continue;const i=t*C[0],o=e+n*N[1];for(let t=0;t<c.outHeight;++t){const e=r+t*w.strides[2],n=t*c.strideHeight-x;for(let t=0;t<h;++t){const r=n+t*p;if(r<0||r>=c.inHeight)continue;const s=i+t*C[1],a=o+r*N[2];for(let t=0;t<c.outWidth;++t){const n=e+t*c.outChannels,r=t*c.strideWidth-g;for(let t=0;t<d;++t){const e=r+t*m;if(e<0||e>=c.inWidth)continue;const i=s+t*C[2],o=a+e*c.inChannels;let u=i;for(let t=0;t<c.inChannels;++t){const e=v[o+t];for(let t=0;t<c.outChannels;++t)$[n+t]+=e*k[u+t];u+=c.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const ok={kernelName:Ht,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:o,pad:a,filterShape:u}=r;xw([s,i],"conv3dBackpropFilterV2");const c=Z(s.shape),l=Z(i.shape),h=Ji(s.shape,u,o,1,a),d=h.strideDepth,f=h.strideHeight,p=h.strideWidth,m=h.filterDepth,b=h.filterHeight,y=h.filterWidth,g=new Rr(h.filterShape,"float32"),x=g.values,[w,v,k,$]=g.strides,N=n.data.get(i.dataId).values,[C,E,S,A]=l,R=n.data.get(s.dataId).values,[T,O,F,I]=c,_=h.padInfo.front,M=h.padInfo.left,D=h.padInfo.top;for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((_-t)/d)),n=Math.min(h.outDepth,(h.inDepth+_-t)/d),r=t*w;for(let s=0;s<b;++s){const i=Math.max(0,Math.ceil((D-s)/f)),o=Math.min(h.outHeight,(h.inHeight+D-s)/f),a=s*v+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((M-r)/p)),c=Math.min(h.outWidth,(h.inWidth+M-r)/p),l=r*k+a;for(let a=0;a<h.inChannels;++a){const m=a*$+l;for(let l=0;l<h.outChannels;++l){let b=0;for(let m=0;m<h.batchSize;++m){const h=m*T,y=m*C;for(let m=e;m<n;++m){const e=(t+m*d-_)*O+h,n=m*E+y;for(let t=i;t<o;++t){const i=(s+t*f-D)*F+e,o=t*S+n;for(let t=u;t<c;++t){const e=t*A+o;b+=R[(r+t*p-M)*I+i+a]*N[e+l]}}}}x[m+l]=b}}}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const ak={kernelName:qt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{pad:o,strides:a,inputShape:u}=r;xw([s],"conv3dBackpropInputV2");const c=Z(s.shape),l=Z(i.shape),h=Ji(u,i.shape,a,1,o),d=new Rr(h.inShape,"float32"),f=d.values,[p,m,b,y]=d.strides,g=n.data.get(s.dataId).values,[x,w,v,k]=c,$=n.data.get(i.dataId).values,[N,C,E,S]=l,{batchSize:A,filterDepth:R,filterHeight:T,filterWidth:O,inChannels:F,inDepth:I,inHeight:_,inWidth:M,outChannels:D,outDepth:L,outHeight:P,outWidth:z,strideDepth:V,strideHeight:B,strideWidth:W}=h,U=R-1-h.padInfo.front,G=T-1-h.padInfo.top,j=O-1-h.padInfo.left;for(let t=0;t<A;++t)for(let e=0;e<F;++e)for(let n=0;n<I;++n){const r=n-U,s=Math.max(0,Math.ceil(r/V)),i=Math.min(L,(R+r)/V);for(let o=0;o<_;++o){const a=o-G,u=Math.max(0,Math.ceil(a/B)),c=Math.min(P,(T+a)/B);for(let l=0;l<M;++l){const h=l-j,d=Math.max(0,Math.ceil(h/W)),A=Math.min(z,(O+h)/W);let F=0;for(let n=s;n<i;++n){const s=n*V-r;for(let r=u;r<c;++r){const i=r*B-a;for(let o=d;o<A;++o){const a=x*t+w*n+v*r+k*o,u=N*(R-1-s)+C*(T-1-i)+E*(O-1-(o*W-h))+S*e;for(let t=0;t<D;++t){F+=g[a+t]*$[u+t]}}}}f[p*t+m*n+b*o+y*l+e]=F}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},uk=kw(Xt,(t=>Math.cos(t))),ck={kernelName:Xt,backendName:"cpu",kernelFunc:uk},lk=kw(Kt,(t=>Math.cosh(t))),hk={kernelName:Kt,backendName:"cpu",kernelFunc:lk};const dk={kernelName:Yt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{image:s,boxes:i,boxInd:o}=e,{cropSize:a,method:u,extrapolationValue:c}=r,[l,h,d,f]=s.shape,p=i.shape[0],[m,b]=a,y=Hs([p,m,b,f],"float32"),g=n.data.get(i.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,v=Z(s.shape),k=Z(y.shape);for(let t=0;t<p;t++){const e=4*t,n=g[e],r=g[e+1],s=g[e+2],i=g[e+3],o=x[t];if(o>=l)continue;const a=m>1?(s-n)*(h-1)/(m-1):0,p=b>1?(i-r)*(d-1)/(b-1):0;for(let e=0;e<m;e++){const l=m>1?n*(h-1)+e*a:.5*(n+s)*(h-1);if(l<0||l>h-1)for(let n=0;n<b;n++)for(let r=0;r<f;r++){const s=r+n*k[2]+e*k[1]+t*k[0];y.values[s]=c}else if("bilinear"===u){const n=Math.floor(l),s=Math.ceil(l),a=l-n;for(let u=0;u<b;u++){const l=b>1?r*(d-1)+u*p:.5*(r+i)*(d-1);if(l<0||l>d-1){for(let n=0;n<f;n++){const r=n+u*k[2]+e*k[1]+t*k[0];y.values[r]=c}continue}const h=Math.floor(l),m=Math.ceil(l),g=l-h;for(let r=0;r<f;r++){let i=r+h*v[2]+n*v[1]+o*v[0];const c=w[i];i=r+m*v[2]+n*v[1]+o*v[0];const l=w[i];i=r+h*v[2]+s*v[1]+o*v[0];const d=w[i];i=r+m*v[2]+s*v[1]+o*v[0];const f=c+(l-c)*g,p=d+(w[i]-d)*g;i=r+u*k[2]+e*k[1]+t*k[0],y.values[i]=f+(p-f)*a}}}else for(let n=0;n<b;++n){const s=b>1?r*(d-1)+n*p:.5*(r+i)*(d-1);if(s<0||s>d-1){for(let r=0;r<f;r++){const s=r+n*k[2]+e*k[1]+t*k[0];y.values[s]=c}continue}const a=Math.round(s),u=Math.round(l);for(let r=0;r<f;r++){const s=r+a*v[2]+u*v[1]+o*v[0],i=r+n*k[2]+e*k[1]+t*k[0];y.values[i]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const fk={kernelName:Jt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,exclusive:o,reverse:a}=r;xw(s,"cumsum");const u=oa([i],s.shape.length);let c=s;null!=u&&(c=hv({inputs:{x:s},backend:n,attrs:{perm:u}}));const l=ua(1,s.shape.length)[0];if(l!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${l}`);const h=Br(c.dtype,"int32"),d=nt(I(c.shape),h),f=n.data.get(c.dataId).values,p=c.shape[c.shape.length-1],m=a?(t,e)=>t+p-e-1:(t,e)=>t+e;for(let t=0;t<f.length;t+=p)for(let e=0;e<p;e++){const n=m(t,e);if(0===e)d[n]=o?0:f[n];else{const r=m(t,e-1);d[n]=o?f[r]+d[r]:f[n]+d[r]}}const b=n.makeTensorInfo(c.shape,h,d);if(null!=u){const t=hv({inputs:{x:b},backend:n,attrs:{perm:aa(u)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(c),t}return b}};const pk={kernelName:Zt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:o,binaryOutput:a}=r;if(1===s.shape.length){const t=Vv(n.data.get(s.dataId).values,n.data.get(i.dataId).values,i.dtype,i.shape,o);return n.makeTensorInfo([o],i.dtype,t)}if(2===s.shape.length){const t=Bv(n.bufferSync(s),n.bufferSync(i),o,a);return n.makeTensorInfo(t.shape,i.dtype,t.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const mk={kernelName:Qt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockSize:i,dataFormat:o}=r;R("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`)),R(i>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`));const a=s.shape[0],u=s.shape[1],c=s.shape[2],l=s.shape[3],h=u*i,d=c*i,f=l/(i*i),p=n.data.get(s.dataId).values,m=new Float32Array(a*h*d*f);let b=0;for(let t=0;t<a;++t)for(let e=0;e<h;++e){const n=Math.floor(e/i),r=e%i;for(let e=0;e<d;++e){const s=Math.floor(e/i),o=(r*i+e%i)*f;for(let e=0;e<f;++e){const r=e+o+l*(s+c*(n+u*t));m[b++]=p[r]}}}return n.makeTensorInfo([a,h,d,f],s.dtype,m)}};function bk(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:o,pad:a,dilations:u,dimRoundingMode:c}=r;xw([s,i],"depthwiseConv2DNative");const l=Z(s.shape),h=Z(i.shape);let d=u;null==d&&(d=[1,1]),R(ro(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const f=Ki(s.shape,i.shape,o,d,a,c,!0),{filterHeight:p,filterWidth:m,dilationHeight:b,dilationWidth:y,padInfo:g}=f,x=g.left,w=g.top,v=f.outChannels/f.inChannels,k=new Rr(f.outShape,s.dtype),$=n.data.get(s.dataId).values,N=n.data.get(i.dataId).values,C=k.values;for(let t=0;t<f.batchSize;++t){const e=t*l[0],n=t*k.strides[0];for(let t=0;t<f.outHeight;++t){const r=n+t*k.strides[1],s=t*f.strideHeight-x;for(let t=0;t<p;++t){const n=s+t*b;if(n<0||n>=f.inHeight)continue;const i=t*h[0],o=e+n*l[1];for(let t=0;t<f.outWidth;++t){const e=r+t*k.strides[2],n=t*f.strideWidth-w;for(let t=0;t<m;++t){const r=n+t*y;if(r<0||r>=f.inWidth)continue;const s=i+t*h[1],a=o+r*f.inChannels;let u=e,c=s;for(let t=0;t<f.inChannels;++t){const e=$[a+t];for(let t=0;t<v;++t)C[u+t]+=e*N[c+t];u+=v,c+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const yk={kernelName:te,backendName:"cpu",kernelFunc:bk};const gk={kernelName:ee,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:o,dilations:a,pad:u,dimRoundingMode:c,filterShape:l}=r;xw([s,i],"depthwiseConv2dNativeBackpropFilter");const h=Ki(s.shape,l,o,a,u,c,!0),{strideHeight:d,strideWidth:f,filterHeight:p,filterWidth:m}=h,b=new Rr(h.filterShape,"float32"),y=h.padInfo.left,g=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new Rr(s.shape,s.dtype,w),k=n.data.get(i.dataId).values,$=new Rr(i.shape,i.dtype,k);for(let t=0;t<p;++t){const e=Math.max(0,Math.ceil((g-t)/d)),n=Math.min(h.outHeight,(h.inHeight+g-t)/d);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/f)),i=Math.min(h.outWidth,(h.inWidth+y-r)/f);for(let o=0;o<h.outChannels;++o){const a=Math.trunc(o/x),u=o%x;let c=0;for(let u=0;u<h.batchSize;++u)for(let l=e;l<n;++l){const e=t+l*d-g;for(let t=s;t<i;++t){const n=r+t*f-y;c+=v.get(u,e,n,a)*$.get(u,l,t,o)}}b.set(c,t,r,a,u)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const xk={kernelName:ne,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{strides:o,dilations:a,pad:u,dimRoundingMode:c,inputShape:l}=r;xw([s,i],"depthwiseConv2DNativeBackpropInput");const h=Z(s.shape),d=Z(i.shape),f=Ki(l,i.shape,o,a,u,c,!0),p=new Rr(f.inShape,"float32"),m=p.values,[b,y,g]=p.strides,x=n.data.get(s.dataId).values,[w,v,k]=h,$=n.data.get(i.dataId).values,[N,C,E]=d,{batchSize:S,filterHeight:A,filterWidth:R,inChannels:T,inHeight:O,inWidth:F,outChannels:I,outHeight:_,outWidth:M,strideHeight:D,strideWidth:L}=f,P=A-1-f.padInfo.top,z=R-1-f.padInfo.left,V=I/T;for(let t=0;t<S;++t)for(let e=0;e<T;++e)for(let n=0;n<O;++n){const r=n-P,s=Math.max(0,Math.ceil(r/D)),i=Math.min(_,(A+r)/D);for(let o=0;o<F;++o){const a=o-z,u=Math.max(0,Math.ceil(a/L)),c=Math.min(M,(R+a)/L);let l=0;for(let n=s;n<i;++n){const s=n*D-r;for(let r=u;r<c;++r){const i=w*t+v*n+k*r,o=N*(A-1-s)+C*(R-1-(r*L-a))+E*e;for(let t=0;t<V;++t){l+=x[i+(e*V+t)]*$[o+t]}}}m[b*t+y*n+g*o+e]=l}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}};const wk={kernelName:re,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e,s=I(r.shape),i=n.data.get(r.dataId).values,o=Hs([s,s],r.dtype),a=o.values;for(let t=0;t<i.length;t++)a[t*s+t]=i[t];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},vk={kernelName:se,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:i,pad:o,dilations:a}=n,u=e,c=u.data.get(r.dataId).values,l=r.shape.length,h=u.data.get(s.dataId).values,d=s.shape.length,{batchSize:f,inHeight:p,inWidth:m,inChannels:b,outHeight:y,outWidth:g,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:$,dilationHeight:N,dilationWidth:C,outShape:E}=Hi(r.shape,s.shape,i,o,"NHWC",a),S=I(E),A=E.length,R=U(r.dtype,S);for(let t=0;t<f;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let i=0;i<g;++i){const o=i*v-x.left;for(let a=0;a<b;++a){let u=Number.MIN_SAFE_INTEGER;for(let e=0;e<k;++e){const i=n+e*N;if(i>=0&&i<p)for(let n=0;n<$;++n){const f=o+n*C;if(f>=0&&f<m){const o=it([t,i,f,a],l,Z(r.shape)),p=it([e,n,a],d,Z(s.shape)),m=c[o]+h[p];m>u&&(u=m)}}}R[it([t,e,i,a],A,Z(E))]=u}}}return{dataId:u.write(Cr(R,r.dtype),E,r.dtype),shape:E,dtype:r.dtype}}},kk={kernelName:oe,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:i}=t,{strides:o,pad:a,dilations:u}=n,c=e,l=tt(r.shape,c.data.get(r.dataId).values),h=tt(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:f,inWidth:p,inChannels:m,outHeight:b,outWidth:y,padInfo:g,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:$,dilationWidth:N,outShape:C}=Hi(r.shape,s.shape,o,a,"NHWC",u);R(i.rank===C.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${C.length}, but got ${i.rank}`));const E=tt(C,c.data.get(i.dataId).values),S=rt(s.shape,s.dtype);for(let t=0;t<d;++t)for(let e=0;e<b;++e){const n=e*x-g.top;for(let r=0;r<y;++r){const s=r*w-g.left;for(let i=0;i<m;++i){let o=Number.MIN_SAFE_INTEGER,a=0,u=0;for(let e=0;e<v;++e){const r=n+e*$;if(r>=0&&r<f)for(let n=0;n<k;++n){const c=s+n*N;if(c>=0&&c<p){const s=l[t][r][c][i]+h[e][n][i];s>o&&(o=s,a=e,u=n)}}}S[a][u][i]+=E[t][e][r][i]}}}return{dataId:c.write(Cr(S,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},$k={kernelName:ie,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:i}=t,{strides:o,pad:a,dilations:u}=n,c=e,l=tt(r.shape,c.data.get(r.dataId).values),h=tt(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:f,inWidth:p,inChannels:m,outHeight:b,outWidth:y,padInfo:g,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:$,dilationWidth:N,outShape:C}=Hi(r.shape,s.shape,o,a,"NHWC",u);R(i.rank===C.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${C.length}, but got ${i.rank}`));const E=tt(C,c.data.get(i.dataId).values),S=rt(r.shape,r.dtype);for(let t=0;t<d;++t)for(let e=0;e<b;++e){const n=e*x-g.top;for(let r=0;r<y;++r){const s=r*w-g.left;for(let i=0;i<m;++i){let o=Number.MIN_SAFE_INTEGER,a=n<0?0:n,u=s<0?0:s;for(let e=0;e<v;++e){const r=n+e*$;if(r>=0&&r<f)for(let n=0;n<k;++n){const c=s+n*N;if(c>=0&&c<p){const s=l[t][r][c][i]+h[e][n][i];s>o&&(o=s,a=r,u=c)}}}S[t][a][u][i]+=E[t][e][r][i]}}}return{dataId:c.write(Cr(S,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const Nk={kernelName:ce,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{dy:r,y:s}=e;xw([r,s],"eluGrad");const i=new Float32Array(I(s.shape)),o=n.data.get(s.dataId).values,a=n.data.get(r.dataId).values;for(let t=0;t<o.length;++t){const e=o[t];i[t]=e>=1?a[t]:a[t]*(e+1)}return n.makeTensorInfo(s.shape,"float32",i)}},Ck=Tw(((t,e)=>t===e?1:0)),Ek=Hw(he,Ck,null,"bool"),Sk={kernelName:he,backendName:"cpu",kernelFunc:Ek},Ak=Nc,Rk=Cc,Tk=Ec,Ok=Sc,Fk=Ac,Ik=Rc,_k=kw(le,(t=>{const e=Math.sign(t),n=Math.abs(t),r=1/(1+Ak*n);return e*(1-((((Ik*r+Fk)*r+Ok)*r+Tk)*r+Rk)*r*Math.exp(-n*n))})),Mk={kernelName:le,backendName:"cpu",kernelFunc:_k},Dk=Uv((t=>Math.exp(t))),Lk=$w(de,Dk),Pk={kernelName:de,backendName:"cpu",kernelFunc:Lk};function zk(t){const{inputs:e,backend:n,attrs:r}=t,{input:s}=e,{dim:i}=r,o=s.shape.length,a=s.shape.slice();let u=i;return i<0&&(R(-(o+1)<=i,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+i+1),a.splice(u,0,1),Zw({inputs:{x:s},backend:n,attrs:{shape:a}})}const Vk={kernelName:fe,backendName:"cpu",kernelFunc:zk},Bk=Uv((t=>Math.expm1(t))),Wk=$w(pe,Bk),Uk={kernelName:pe,backendName:"cpu",kernelFunc:Wk},Gk=Tw(((t,e)=>t*e)),jk=qw(((t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n}))),Hk=Hw(en,Gk,jk),qk={kernelName:en,backendName:"cpu",kernelFunc:Hk},Xk=Tw(((t,e)=>t/e)),Kk=Hw(ae,Xk),Jk={kernelName:ae,backendName:"cpu",kernelFunc:Kk},Yk=Tw(((t,e)=>t-e)),Zk=qw(((t,e,n,r)=>({real:t-n,imag:e-r}))),Qk=Hw(Gn,Yk,Zk),t$={kernelName:Gn,backendName:"cpu",kernelFunc:Qk};function e$(t,e,n){const r=t.shape,s=r[0],i=r[1],o=n.data.get(t.dataId),a=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,c=[s,i],l=I(c),h=W("float32",l),d=W("float32",l);for(let t=0;t<s;t++){const r=Lv({inputs:{x:a},backend:n,attrs:{begin:[t,0],size:[1,i]}}),s=Lv({inputs:{x:u},backend:n,attrs:{begin:[t,0],size:[1,i]}}),o=zw({inputs:{real:r,imag:s},backend:n}),{real:c,imag:l}=n$(o,e,n),f=Fc(c,l);for(let e=0;e<i;e++){const n=Dc(f,e);h[t*i+e]=n.real,d[t*i+e]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o)}const f=n.makeTensorInfo(c,"float32",h),p=n.makeTensorInfo(c,"float32",d),m=zw({inputs:{real:f,imag:p},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(p),m}function n$(t,e,n){const r=I(t.shape),s=n.data.get(t.dataId),i=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((a=r)&a-1)){const s=r$(i,o,r,e,n),a=[t.shape[0],t.shape[1]];if(e){const t=n.makeTensorInfo(a,"float32",s.real),e=n.makeTensorInfo(a,"float32",s.imag),i=n.makeTensorInfo([],"float32",Nr(r,"float32")),o=Ew({inputs:{x:i},backend:n}),u=Jk.kernelFunc({inputs:{a:t,b:i},backend:n}),c=Jk.kernelFunc({inputs:{a:e,b:o},backend:n}),l=n.data.get(u.dataId).values,h=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),{real:l,imag:h}}return s}return Ic(function(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let i=0,o=0;for(let r=0;r<e;r++){const a=zc(s*r,e,n),u=Dc(t,r);i+=u.real*a.real-u.imag*a.imag,o+=u.real*a.imag+u.imag*a.real}n&&(i/=e,o/=e),Lc(r,i,o,s)}return r}(Fc(i,o),r,e));var a}function r$(t,e,n,r,s){if(1===n)return{real:t,imag:e};const i=Fc(t,e),o=n/2,a=_c(i),u=a.real,c=a.imag,l=[u.length],h=s.makeTensorInfo(l,"float32",u),d=s.makeTensorInfo(l,"float32",c),f=zw({inputs:{real:h,imag:d},backend:s}),p=Mc(i),m=p.real,b=p.imag,y=[m.length],g=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",b),w=zw({inputs:{real:g,imag:x},backend:s}),v=r$(u,c,o,r,s),k=v.real,$=v.imag,N=[k.length],C=s.makeTensorInfo(N,"float32",k),E=s.makeTensorInfo(N,"float32",$),S=zw({inputs:{real:C,imag:E},backend:s}),A=r$(m,b,o,r,s),R=A.real,T=A.imag,O=[R.length],F=s.makeTensorInfo(O,"float32",R),I=s.makeTensorInfo(O,"float32",T),_=zw({inputs:{real:F,imag:I},backend:s}),M=Pc(n,r),D=[M.real.length],L=s.makeTensorInfo(D,"float32",M.real),P=s.makeTensorInfo(D,"float32",M.imag),z=zw({inputs:{real:L,imag:P},backend:s}),V=Hk({inputs:{a:z,b:_},backend:s}),B=Jw({inputs:{a:S,b:V},backend:s}),W=Qk({inputs:{a:S,b:V},backend:s}),U=Ww({inputs:{input:B},backend:s}),G=Ww({inputs:{input:W},backend:s}),j=Yv({inputs:{input:B},backend:s}),H=Yv({inputs:{input:W},backend:s}),q=Qv({inputs:[U,G],backend:s,attrs:{axis:0}}),X=Qv({inputs:[j,H],backend:s,attrs:{axis:0}}),K=s.data.get(q.dataId).values,J=s.data.get(X.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(X),{real:K,imag:J}}const s$={kernelName:me,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=I(r.shape),i=r.shape[r.shape.length-1],o=Zw({inputs:{x:r},backend:n,attrs:{shape:[s/i,i]}}),a=e$(o,!1,n),u=Zw({inputs:{x:a},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(a),u}};function i$(t){const{backend:e,attrs:n}=t,{shape:r,value:s,dtype:i}=n,o=i||K(s),a=U(o,I(r));return function(t,e,n){t.fill(e)}(a,s),e.makeTensorInfo(r,o,a)}const o$={kernelName:be,backendName:"cpu",kernelFunc:i$};const a$={kernelName:ye,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,s=n,i=W(r.dtype,I(r.shape)),[o,a,u,c]=r.shape,l=s.data.get(r.dataId).values;for(let t=0;t<o;t++){const e=t*u*a*c;for(let t=0;t<a;t++){const n=t*(u*c);for(let r=0;r<u;r++){const s=r*c;for(let a=0;a<c;a++){const h=[o,t,r,a][2],d=Math.round(u-h),f=e+n+s+a;let p=l[f];if(d>=0&&d<u){p=l[e+n+d*c+a]}i[f]=p}}}}return{dataId:s.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},u$=Uv((t=>Math.floor(t))),c$=$w(ge,u$),l$={kernelName:ge,backendName:"cpu",kernelFunc:c$},h$=Tw(((t,e)=>Math.floor(t/e))),d$=Hw(xe,h$,null,"int32"),f$={kernelName:xe,backendName:"cpu",kernelFunc:d$};const p$={kernelName:or,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:u,pad:c,dataFormat:l,dilations:h,dimRoundingMode:d,activation:f,leakyreluAlpha:p}=r;let m=ek({inputs:{x:s,filter:i},backend:n,attrs:{strides:u,pad:c,dataFormat:l,dilations:h,dimRoundingMode:d}});if(o){const t=m;m=Jw({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(t)}if(f){const t=m;m=Pw(n,m,f,a,p),n.disposeIntermediateTensorInfo(t)}return m}};const m$={kernelName:ar,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:u,pad:c,dataFormat:l,dilations:h,dimRoundingMode:d,activation:f,leakyreluAlpha:p}=r;let m=bk({inputs:{x:s,filter:i},backend:n,attrs:{strides:u,pad:c,dataFormat:l,dilations:h,dimRoundingMode:d}});if(o){const t=m;m=Jw({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(t)}if(f){const t=m;m=Pw(n,m,f,a,p),n.disposeIntermediateTensorInfo(t)}return m}};const b$={kernelName:ke,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{params:r,indices:s}=e,i=I(r.shape),o=s.shape,a=o[o.length-1],[u,c,l,h]=oi(r,s);if(0===c)return n.makeTensorInfo(u,r.dtype,[]);const d=Hs([c,l],r.dtype),f=n.data.get(s.dataId).values,p=n.data.get(r.dataId).values;for(let t=0;t<c;t++){const e=[];let n=0;for(let r=0;r<a;r++){const s=f[t*a+r];n+=s*h[r],e.push(s)}if(n<0||n>=i/l)throw new Error(`Invalid indices: ${e} does not index into ${r.shape}`);for(let e=0;e<l;e++)d.values[t*l+e]=p[n*l+e]}return n.makeTensorInfo(u,d.dtype,d.values)}};function y$(t,e,n){const r=Hs(n,t.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),i=s[0],o=s[2],a=e.locToIndex([i,o]);s[2]=e.values[a];const u=t.locToIndex(s);r.values[n]=t.values[u]}return r}const g$={kernelName:ve,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,indices:i}=e,{axis:o,batchDims:a}=r;xw([s,i],"gatherV2");let u=a;null==a&&(u=0);const c=I(i.shape),l=Uc(s,i,V(o,s.shape)[0],u),h=Zw({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=Zw({inputs:{x:i},backend:n,attrs:{shape:[l.batchSize,c/l.batchSize]}}),f=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize],p=n.bufferSync(d),m=y$(n.bufferSync(h),p,f);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.makeTensorInfo(l.outputShape,m.dtype,m.values)}},x$=Tw(((t,e)=>t>e?1:0)),w$=Hw($e,x$,null,"bool"),v$={kernelName:$e,backendName:"cpu",kernelFunc:w$},k$=Tw(((t,e)=>t>=e?1:0)),$$=Hw(Ne,k$,null,"bool"),N$={kernelName:Ne,backendName:"cpu",kernelFunc:$$};const C$={kernelName:Ee,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=I(r.shape),i=r.shape[r.shape.length-1],o=Zw({inputs:{x:r},backend:n,attrs:{shape:[s/i,i]}}),a=e$(o,!0,n),u=Zw({inputs:{x:a},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(a),u}},E$=kw(Ae,(t=>Number.isFinite(t)?1:0),"bool"),S$={kernelName:Ae,backendName:"cpu",kernelFunc:E$},A$=kw(Re,(t=>Math.abs(t)===1/0?1:0),"bool"),R$={kernelName:Re,backendName:"cpu",kernelFunc:A$},T$=kw(Te,(t=>Number.isNaN(t)?1:0),"bool"),O$={kernelName:Te,backendName:"cpu",kernelFunc:T$},F$=Tw(((t,e)=>t<e?1:0)),I$=Hw(Fe,F$,null,"bool"),_$={kernelName:Fe,backendName:"cpu",kernelFunc:I$},M$=Tw(((t,e)=>t<=e?1:0)),D$=Hw(Ie,M$,null,"bool"),L$={kernelName:Ie,backendName:"cpu",kernelFunc:D$};function P$(t,e,n){const r=(e-t)/(n-1),s=nt(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return s}const z$={kernelName:_e,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:r,stop:s,num:i}=n,o=P$(r,s,i);return e.makeTensorInfo([o.length],"float32",o)}},V$=Uv((t=>Math.log(t))),B$=$w(Me,V$),W$={kernelName:Me,backendName:"cpu",kernelFunc:B$},U$=kw(De,(t=>Math.log1p(t))),G$={kernelName:De,backendName:"cpu",kernelFunc:U$},j$=Tw(((t,e)=>t&&e)),H$=Hw(Le,j$,null,"bool"),q$={kernelName:Le,backendName:"cpu",kernelFunc:H$},X$=kw(Pe,(t=>t?0:1),"bool"),K$={kernelName:Pe,backendName:"cpu",kernelFunc:X$},J$=Tw(((t,e)=>t||e)),Y$=Hw(ze,J$,null,"bool"),Z$={kernelName:ze,backendName:"cpu",kernelFunc:Y$};const Q$={kernelName:Ve,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{depthRadius:i,bias:o,alpha:a,beta:u}=r;xw(s,"LRN");const c=s.shape[3],l=c-1,h=n.data.get(s.dataId).values,d=I(s.shape),f=new Float32Array(d);function p(t){const e=t%c;let n=t-e+Math.max(0,e-i);const r=t-e+Math.min(e+i,l);let s=0;for(;n<=r;n++){const t=h[n];s+=t*t}return s}for(let t=0;t<d;t++){const e=p(t),n=h[t]*Math.pow(o+a*e,-u);f[t]=n}return n.makeTensorInfo(s.shape,s.dtype,f)}};const tN={kernelName:Be,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,y:i,dy:o}=e,{depthRadius:a,bias:u,alpha:c,beta:l}=r;xw(o,"LRNGrad");const h=I(o.shape),d=o.shape[3],f=n.data.get(o.dataId).values,p=n.data.get(s.dataId).values,m=n.data.get(i.dataId).values,b=new Float32Array(h),y=h;for(let t=0;t<y;t++){const e=t%d,n=t-e+Math.max(0,e-a),r=t-e+Math.min(d,e+a+1);let s=0;for(let t=n;t<r;t++)s+=Math.pow(p[t],2);s=c*s+u;for(let e=n;e<r;e++){let n=-2*c*l*p[e]*m[t]/s;t===e&&(n+=Math.pow(s,-l)),n*=f[t],b[e]+=n}}return n.makeTensorInfo(o.shape,s.dtype,b)}};function eN(t,e,n,r){const s=W(r,I(n));for(let n=0;n<s.length;++n){const r=n*e;let i=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>i&&(i=e)}s[n]=i}return s}function nN(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reductionIndices:i,keepDims:o}=r,a=n;let u=s.shape;const c=u.length,l=V(i,u);let h=l;const d=oa(h,c);let f=a.data.get(s.dataId).values;if(null!=d){const t=new Array(c);for(let e=0;e<t.length;e++)t[e]=u[d[e]];f=lv(f,u,s.dtype,d,t),h=ua(h.length,c),u=t}xw(s,"max"),ia("max",h,c);const[p,m]=ra(u,h),b=eN(f,I(m),p,s.dtype),y=a.write(b,p,s.dtype);let g=p;if(o){g=sa(p,l)}return{dataId:y,shape:g,dtype:s.dtype}}const rN={kernelName:We,backendName:"cpu",kernelFunc:nN},sN=Tw(((t,e)=>Math.max(t,e))),iN=Hw(Ue,sN),oN={kernelName:Ue,backendName:"cpu",kernelFunc:iN};const aN={kernelName:Ge,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;xw(s,"maxPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:u}=r;R(ro(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=qi(s.shape,i,o,1,a,u);let l;if(1===c.filterWidth&&1===c.filterHeight&&_(c.inShape,c.outShape))l=Ew({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=Z(s.shape),r=Av(t,s.shape,s.dtype,e,c,"max");l=n.makeTensorInfo(c.outShape,s.dtype,r.values)}return l}};const uN={kernelName:He,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:o,pad:a,dimRoundingMode:u,dataFormat:c,dilations:l}=r;xw(s,"maxPool3d");let h=l;null==h&&(h=[1,1,1]);const d=Xi(s.shape,i,o,h,a,u,c),f=Tv(n.data.get(s.dataId).values,s.shape,s.dtype,Z(s.shape),d,"max");return n.makeTensorInfo(f.shape,"float32",f.values)}};const cN={kernelName:qe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,{filterSize:o,strides:a,pad:u,dilations:c,dimRoundingMode:l}=r;xw([s,i],"maxPool3DGrad");const h=Xi(i.shape,o,a,c,u,l),d=function(t,e){const n=Hs(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,a=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,f=e.padInfo.top,p=e.padInfo.left;for(let m=0;m<e.batchSize;++m)for(let b=0;b<e.inChannels;++b)for(let y=0;y<e.outDepth;++y){const g=y*r-d;let x=g;for(;x<0;)x+=o;const w=Math.min(e.inDepth,c+g);for(let r=0;r<e.outHeight;++r){const c=r*s-f;let d=c;for(;d<0;)d+=a;const v=Math.min(e.inHeight,l+c);for(let s=0;s<e.outWidth;++s){const f=s*i-p;let k=f;for(;k<0;)k+=u;const $=Math.min(e.inWidth,h+f);let N=Number.NEGATIVE_INFINITY,C=-1;for(let e=x;e<w;e+=o){const n=e-g;for(let r=d;r<v;r+=a){const s=r-c;for(let i=k;i<$;i+=u){const o=i-f,a=t.get(m,e,r,i,b);a>=N&&(N=a,C=n*l*h+s*l+o)}}}n.set(C,m,y,r,s,b)}}}return n}(n.bufferSync(i),h),f=h.strideDepth,p=h.strideHeight,m=h.strideWidth,b=h.dilationDepth,y=h.dilationHeight,g=h.dilationWidth,x=h.effectiveFilterDepth,w=h.effectiveFilterHeight,v=h.effectiveFilterWidth,k=x-1-h.padInfo.front,$=v-1-h.padInfo.left,N=w-1-h.padInfo.top,C=Hs(i.shape,"float32"),E=n.bufferSync(s);for(let t=0;t<h.batchSize;++t)for(let e=0;e<h.inChannels;++e)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let s=0;s<h.inWidth;++s){const i=n-k,o=r-N,a=s-$;let u=0;for(let n=0;n<x;n+=b){const r=(i+n)/f;if(!(r<0||r>=h.outDepth||Math.floor(r)!==r))for(let s=0;s<w;s+=y){const i=(o+s)/p;if(!(i<0||i>=h.outHeight||Math.floor(i)!==i))for(let o=0;o<v;o+=g){const c=(a+o)/m;if(c<0||c>=h.outWidth||Math.floor(c)!==c)continue;const l=x*w*v-1-d.get(t,r,i,c,e)===n*w*v+s*v+o?1:0;if(0===l)continue;u+=E.get(t,r,i,c,e)*l}}}C.set(u,t,n,r,s,e)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const lN={kernelName:je,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i,output:o}=e,a=i;xw([i,o],"maxPoolGrad");const{filterSize:u,strides:c,pad:l,dimRoundingMode:h}=r,d=qi(a.shape,u,c,1,l,h),f=n.data.get(a.dataId).values,p=Hs(d.outShape,a.dtype,Rv(f,a.shape,a.dtype,d).values),m=d.strideHeight,b=d.strideWidth,y=d.dilationHeight,g=d.dilationWidth,x=d.effectiveFilterHeight,w=d.effectiveFilterWidth,v=w-1-d.padInfo.left,k=x-1-d.padInfo.top,$=Hs(a.shape,"float32"),N=n.data.get(s.dataId).values,C=Hs(s.shape,"float32",N);for(let t=0;t<d.batchSize;++t)for(let e=0;e<d.inChannels;++e)for(let n=0;n<d.inHeight;++n)for(let r=0;r<d.inWidth;++r){const s=n-k,i=r-v;let o=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=d.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=g){const a=(i+s)/b;if(a<0||a>=d.outWidth||Math.floor(a)!==a)continue;const u=x*w-1-p.get(t,r,a,e)===n*w+s?1:0;if(0===u)continue;o+=C.get(t,r,a,e)*u}}$.set(o,t,n,r,e)}return n.makeTensorInfo($.shape,$.dtype,$.values)}};const hN={kernelName:Xe,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:i,pad:o,includeBatchInIndex:a}=e,u=n;xw(r,"MaxPoolWithArgmax");const c=u.data.get(r.dataId).values,l=qi(r.shape,s,i,[1,1],o),[h,d]=function(t,e,n,r,s){const i=Av(t,0,n,Z(e),s,"max"),o=Rv(t,e,n,s,!0,r);return[i.values,o.values]}(c,r.shape,r.dtype,a,l),f=u.write(h,l.outShape,r.dtype),p=u.write(d,l.outShape,r.dtype);return[{dataId:f,shape:l.outShape,dtype:r.dtype},{dataId:p,shape:l.outShape,dtype:"int32"}]}};function dN(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r;let a;xw(s,"sum"),a="bool"===s.dtype?Gw({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):Ew({inputs:{x:s},backend:n});const u=a.shape.length,c=V(i,a.shape),l=oa(c,u);let h=c,d=a;null!=l&&(d=hv({inputs:{x:a},backend:n,attrs:{perm:l}}),h=ua(h.length,u)),ia("sum",h,d.shape.length);const[f,p]=ra(d.shape,h);let m=Bw(n,f,Br(d.dtype,"int32"));const b=I(p),y=n.data.get(m.dataId).values,g=n.data.get(d.dataId).values;for(let t=0;t<y.length;++t){const e=t*b;let n=0;for(let t=0;t<b;++t)n+=g[e+t];y[t]=n}if(o){const t=m;m=Zw({inputs:{x:m},backend:n,attrs:{shape:sa(m.shape,c)}}),n.disposeIntermediateTensorInfo(t)}return n.disposeIntermediateTensorInfo(a),null!=l&&n.disposeIntermediateTensorInfo(d),m}const fN={kernelName:Pn,backendName:"cpu",kernelFunc:dN};const pN={kernelName:Ke,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r,a=V(i,s.shape),u=I(ra(s.shape,a)[1]),c=[],l=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(l);const h=Gw({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});c.push(h);const d=Kk({inputs:{a:h,b:l},backend:n});c.push(d);const f=dN({inputs:{x:d},backend:n,attrs:{axis:i,keepDims:o}});return c.forEach((t=>n.disposeIntermediateTensorInfo(t))),f}};const mN={kernelName:Je,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r;xw(s,"min");const a=V(i,s.shape);let u=a;const c=oa(u,s.shape.length);let l=s;null!=c&&(l=hv({inputs:{x:s},backend:n,attrs:{perm:c}}),u=ua(u.length,s.shape.length)),ia("min",u,l.shape.length);const[h,d]=ra(l.shape,u),f=I(d),p=nt(I(h),l.dtype),m=n.data.get(l.dataId).values;for(let t=0;t<p.length;++t){const e=t*f;let n=m[e];for(let t=0;t<f;++t){const r=m[e+t];r<n&&(n=r)}p[t]=n}null!=c&&n.disposeIntermediateTensorInfo(l);const b=n.makeTensorInfo(h,l.dtype,p);if(o){const t=Zw({inputs:{x:b},backend:n,attrs:{shape:sa(h,a)}});return n.disposeIntermediateTensorInfo(b),t}return b}},bN=Tw(((t,e)=>Math.min(t,e))),yN=Hw(Ye,bN),gN={kernelName:Ye,backendName:"cpu",kernelFunc:yN};const xN={kernelName:Ze,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:i,mode:o}=r;xw(s,"mirrorPad");const a=i.map(((t,e)=>t[0]+s.shape[e]+t[1])),u=i.map((t=>t[0])),c=i.map(((t,e)=>t[0]+s.shape[e])),l="reflect"===o?0:1,h=n.data.get(s.dataId).values,d=s.shape.length,f=Z(s.shape),p=I(a),m=a.length,b=Z(a),y=W(s.dtype,p);for(let t=0;t<p;t++){let e=ot(t,m,b);for(let t=0;t<m;t++)e[t]<u[t]?e[t]=2*u[t]-e[t]-l:e[t]>=c[t]&&(e[t]=2*(c[t]-1)-e[t]+l);e=e.map(((t,e)=>t-u[e]));const n=it(e,d,f);y[t]=h[n]}return{dataId:n.write(y,a,s.dtype),shape:a,dtype:s.dtype}}},wN=Tw(((t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})),vN=Hw(Qe,wN),kN={kernelName:Qe,backendName:"cpu",kernelFunc:vN};function $N(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{dim:i}=r,o=s.shape.length;let a=i;if(-1===a&&(a=o-1),a!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${a}`);const u=V([a],s.shape),c=nN({inputs:{x:s},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),l=sa(c.shape,u),h=Zw({inputs:{x:c},backend:n,attrs:{shape:l}}),d=Qk({inputs:{a:s,b:h},backend:n}),f=Lk({inputs:{x:d},backend:n}),p=dN({inputs:{x:f},backend:n,attrs:{axis:u,keepDims:!1}}),m=Zw({inputs:{x:p},backend:n,attrs:{shape:l}}),b=Kk({inputs:{a:f,b:m},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),b}const NN={kernelName:Bn,backendName:"cpu",kernelFunc:$N};const CN={kernelName:tn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{numSamples:i,seed:o,normalized:a}=r;xw(s,"multinomial");const u=a?s:$N({inputs:{logits:s},backend:n,attrs:{dim:-1}}),c=u.shape[0],l=u.shape[1],h=n.data.get(u.dataId).values,d=[c,i],f=nt(I(d),"int32");for(let t=0;t<c;++t){const e=t*l,n=new Float32Array(l-1);n[0]=h[e];for(let t=1;t<n.length;++t)n[t]=n[t-1]+h[e+t];const r=xa.alea(o.toString()),s=t*i;for(let t=0;t<i;++t){const e=r();f[s+t]=n.length;for(let r=0;r<n.length;r++)if(e<n[r]){f[s+t]=r;break}}}return a||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(d,"int32",f)}};function EN(t,e,n){const r=Nr(-1,n);return Gk([],e,r,t,n)}const SN={kernelName:nn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;xw(r,"neg");const s=n.data.get(r.dataId).values,[i,o]=EN(s,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,i)}},AN=Cu;const RN={kernelName:sn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:u}=r;xw(s,"NonMaxSuppression");const c=n.data.get(s.dataId).values,l=n.data.get(i.dataId).values,{selectedIndices:h}=AN(c,l,o,a,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},TN=Eu;const ON={kernelName:on,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:u,padToMaxOutputSize:c}=r;xw(s,"NonMaxSuppressionPadded");const l=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values,{selectedIndices:d,validOutputs:f}=TN(l,h,o,a,u,c);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},FN=Su;const IN={kernelName:an,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:u,softNmsSigma:c}=r;xw(s,"NonMaxSuppressionWithScore");const l=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values,d=o,f=a,p=u,m=c,{selectedIndices:b,selectedScores:y}=FN(l,h,d,f,p,m);return[n.makeTensorInfo([b.length],"int32",new Int32Array(b)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},_N=Tw(((t,e)=>t!==e?1:0)),MN=Hw(rn,_N,null,"bool"),DN={kernelName:rn,backendName:"cpu",kernelFunc:MN};const LN={kernelName:cn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s}=e,{depth:i,onValue:o,offValue:a}=r;xw(s,"oneHot");const u=I(s.shape),c=new Float32Array(u*i);c.fill(a);const l=n.data.get(s.dataId).values;for(let t=0;t<u;++t)l[t]>=0&&l[t]<i&&(c[t*i+l[t]]=o);return n.makeTensorInfo([...s.shape,i],"int32",c)}};function PN(t){const{inputs:e,backend:n}=t,{x:r}=e;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const t=Ww({inputs:{input:r},backend:n}),e=PN({inputs:{x:t},backend:n}),s=Yv({inputs:{input:r},backend:n}),i=PN({inputs:{x:s},backend:n}),o=zw({inputs:{real:e,imag:i},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),o}return i$({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const zN={kernelName:er,backendName:"cpu",kernelFunc:PN};const VN={kernelName:un,backendName:"cpu",kernelFunc:function t(e){const{inputs:n,backend:r}=e,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const e=Ww({inputs:{input:s},backend:r}),n=t({inputs:{x:e},backend:r}),i=Yv({inputs:{input:s},backend:r}),o=PN({inputs:{x:i},backend:r}),a=zw({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),a}return i$({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function BN(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r;if(1===e.length)return zk({inputs:{input:e[0]},backend:n,attrs:{dim:s}});const i=e[0].shape,o=e[0].dtype;e.forEach((t=>{T(i,t.shape,"All tensors passed to stack must have matching shapes"),R(o===t.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const a=[],u=Qv({inputs:e.map((t=>{const e=zk({inputs:{input:t},backend:n,attrs:{dim:s}});return a.push(e),e})),backend:n,attrs:{axis:s}});return a.forEach((t=>n.disposeIntermediateTensorInfo(t))),u}const WN={kernelName:ln,backendName:"cpu",kernelFunc:BN};const UN={kernelName:hn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:i,constantValue:o}=r;xw(s,"pad");const a=i.map(((t,e)=>t[0]+s.shape[e]+t[1])),u=i.map((t=>t[0])),c=n.data.get(s.dataId).values,l=I(s.shape),h=s.shape.length,d=Z(s.shape),f=I(a),p=a.length,m=Z(a),b=W(s.dtype,f);0!==o&&b.fill(o);for(let t=0;t<l;t++){b[it(ot(t,h,d).map(((t,e)=>t+u[e])),p,m)]=c[t]}return{dataId:n.write(b,a,s.dtype),shape:a,dtype:s.dtype}}},GN=Tw(((t,e)=>Math.pow(t,e))),jN=Hw(dn,GN),HN={kernelName:dn,backendName:"cpu",kernelFunc:jN};function qN(t,e,n,r){const[s,i]=ra(t,r),o=Br(e,"int32"),a=nt(I(s),o),u=I(i);for(let t=0;t<a.length;++t){const e=t*u;let r=1;for(let t=0;t<u;++t)r*=n[e+t];a[t]=r}return{outVals:a,outShape:s,outDtype:o}}const XN={kernelName:pn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r;xw(s,"prod");const a=s.shape.length,u=V(i,s.shape),c=oa(u,a);let l=u,h=s;const d=[];null!=c&&(h=hv({inputs:{x:s},backend:n,attrs:{perm:c}}),d.push(h),l=ua(l.length,a));const f=n.data.get(h.dataId).values,{outVals:p,outShape:m,outDtype:b}=qN(h.shape,h.dtype,f,l);let y=m;return o&&(y=sa(m,u)),d.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(y,b,p)}};function KN(t,e,n,r){if(t===e||t<e&&n<0||e<t&&n>1)return nt(0,r);const s=nt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return s}const JN={kernelName:mn,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:r,stop:s,dtype:i,step:o}=n,a=KN(r,s,o,i);return e.makeTensorInfo([a.length],i,a)}},YN=kw(yn,(t=>1/t)),ZN={kernelName:yn,backendName:"cpu",kernelFunc:YN};const QN={kernelName:kn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r;xw(s,"resizeBilinear");const u=Z(s.shape),[c,l]=a,[h,d,f,p]=s.shape,m=n.data.get(s.dataId).values,b=new Float32Array(I([h,c,l,p])),y=[i&&c>1?d-1:d,i&&l>1?f-1:f],g=[i&&c>1?c-1:c,i&&l>1?l-1:l];let x=0;const w=y[0]/g[0],v=y[1]/g[1];for(let t=0;t<h;t++)for(let e=0;e<c;e++){let n;n=o?w*(e+.5)-.5:w*e;const r=Math.max(0,Math.floor(n)),s=n-r,i=Math.min(d-1,Math.ceil(n)),a=t*u[0]+r*u[1],c=t*u[0]+i*u[1];for(let t=0;t<l;t++){let e;e=o?v*(t+.5)-.5:v*t;const n=Math.max(0,Math.floor(e)),r=e-n,i=Math.min(f-1,Math.ceil(e)),l=a+n*u[2],h=c+n*u[2],d=a+i*u[2],y=c+i*u[2];for(let t=0;t<p;t++){const e=m[l+t],n=m[h+t],i=e+(m[d+t]-e)*r,o=i+(n+(m[y+t]-n)*r-i)*s;b[x++]=o}}}return n.makeTensorInfo([h,c,l,p],"float32",b)}};const tC={kernelName:$n,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:o}=r;xw([i,s],"resizeBilinearGrad");const a=Z(s.shape),[u,c,l,h]=s.shape,[,d,f]=i.shape,p=new Float32Array(u*c*l*h),m=[o&&d>1?c-1:c,o&&f>1?l-1:l],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],y=m[0]/b[0],g=m[1]/b[1],x=n.data.get(i.dataId).values;let w=0;for(let t=0;t<u;t++){const e=t*a[0];for(let t=0;t<d;t++){const n=t*y,r=Math.floor(n),s=Math.min(Math.ceil(n),c-1),i=e+r*a[1],o=e+s*a[1],u=n-r,d=1-u;for(let t=0;t<f;t++){const e=t*g,n=Math.floor(e),r=Math.min(Math.ceil(e),l-1),s=e-n,c=1-s,f=i+n*a[2],m=i+r*a[2],b=o+n*a[2],y=o+r*a[2],v=d*c,k=d*s,$=u*c,N=u*s;for(let t=0;t<h;t++){const e=x[w++];p[f+t]+=e*v,p[m+t]+=e*k,p[b+t]+=e*$,p[y+t]+=e*N}}}}return n.makeTensorInfo([u,l,c,h],"float32",p)}};const eC={kernelName:wn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r;xw(s,"resizeNearestNeighbor");const u=Z(s.shape),[c,l]=a,[h,d,f,p]=s.shape,m=n.data.get(s.dataId).values,b=new Float32Array(h*c*l*p),y=[i&&c>1?d-1:d,i&&l>1?f-1:f],g=[i&&c>1?c-1:c,i&&l>1?l-1:l],x=y[0]/g[0],w=y[1]/g[1];let v=0;for(let t=0;t<h;t++){const e=t*u[0];for(let t=0;t<c;t++){const n=o?x*(t+.5):x*t;let r=Math.min(d-1,i?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=e+r*u[1];for(let t=0;t<l;t++){const e=o?w*(t+.5):w*t;let n=Math.min(f-1,i?Math.round(e):Math.floor(e));o&&(n=Math.max(0,n));const r=s+n*u[2];for(let t=0;t<p;t++){const e=m[r+t];b[v++]=e}}}}return n.makeTensorInfo([h,c,l,p],s.dtype,b)}};const nC={kernelName:vn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:o}=r;xw([i,s],"resizeNearestNeighborGrad");const a=Z(s.shape),u=Z(i.shape),[c,l,h,d]=s.shape,[,f,p]=i.shape,m=new Float32Array(c*l*h*d),b=n.data.get(i.dataId).values,y=[o&&f>1?l-1:l,o&&p>1?h-1:h],g=[o&&f>1?f-1:f,o&&p>1?p-1:p],x=y[0]/g[0],w=y[1]/g[1],v=1/x,k=1/w,$=2*Math.ceil(v)+2,N=2*Math.ceil(k)+2;for(let t=0;t<c;t++){const e=t*a[0];for(let t=0;t<l;t++){const n=e+t*a[1],r=Math.floor(t*v),s=Math.floor(r-$/2);for(let r=0;r<h;r++){const i=n+r*a[2],c=Math.floor(r*k),y=Math.floor(c-N/2);for(let n=0;n<d;n++){let a=0;for(let i=0;i<$;i++){const c=i+s;if(c<0||c>=f)continue;const d=e+c*u[1],m=c*x;if(t===Math.min(l-1,o?Math.round(m):Math.floor(m)))for(let t=0;t<N;t++){const e=t+y;if(e<0||e>=p)continue;const s=d+e*u[2],i=e*w;r===Math.min(h-1,o?Math.round(i):Math.floor(i))&&(a+=b[s+n])}}m[i+n]=a}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const rC={kernelName:Cn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dims:i}=r;xw(s,"reverse");const o=s.shape.length,a=V(i,s.shape);if(0===o)return Ew({inputs:{x:s},backend:n});const u=new Rr(s.shape,s.dtype),c=n.bufferSync(s);for(let t=0;t<u.size;t++){const e=u.indexToLoc(t),n=e.slice();a.forEach((t=>n[t]=s.shape[t]-1-n[t])),u.set(c.get(...n),...e)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},sC={kernelName:sr,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:i,center:o}=e,a=n,u=W(r.dtype,I(r.shape)),[c,l,h,d]=r.shape,[f,p]=bc(o,l,h),m=Math.sin(s),b=Math.cos(s),y=a.data.get(r.dataId).values;for(let t=0;t<c;t++){const e=t*h*l*d;for(let t=0;t<l;t++){const n=t*(h*d);for(let r=0;r<h;r++){const s=r*d;for(let o=0;o<d;o++){const a=[c,t,r,o],g=a[2],x=a[1];let w=(g-f)*b-(x-p)*m,v=(g-f)*m+(x-p)*b;w=Math.round(w+f),v=Math.round(v+p);let k=i;if("number"!=typeof i&&(k=3===o?255:i[o]),w>=0&&w<h&&v>=0&&v<l){k=y[e+v*(h*d)+w*d+o]}u[e+n+s+o]=k}}}}return{dataId:a.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},iC=kw(En,(t=>{const e=Math.floor(t);return t-e<.5?Math.floor(t):t-e>.5?Math.ceil(t):e%2==0?e:e+1})),oC={kernelName:En,backendName:"cpu",kernelFunc:iC},aC=Uv((t=>1/Math.sqrt(t))),uC=$w(Sn,aC),cC={kernelName:Sn,backendName:"cpu",kernelFunc:uC};function lC(t,e,n,r,s,i,o,a,u,c){const l=[r/s,s],h=t.values,d=e.values;if(0===r)return Hs(n,e.dtype);const f=Hs(l,e.dtype);f.values.fill(u);for(let t=0;t<i;t++){const i=[];let u=0;for(let e=0;e<o;e++){const n=h[t*o+e];i.push(n),u+=n*a[e]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${i} does not index into ${n}`);for(let n=0;n<s;n++)c?f.values[u*s+n]+=d[t*s+n]:f.values[u*s+n]=0===e.rank?d[0]:d[t*s+n]}return f}const hC={kernelName:An,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s,updates:i}=e,{shape:o}=r,{sliceRank:a,numUpdates:u,sliceSize:c,strides:l,outputSize:h}=ci(0,s,o),d=lC(n.bufferSync(s),n.bufferSync(i),o,h,c,u,a,l,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};const dC={kernelName:Rn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:r,t:s,e:i}=e;xw([r,s,i],"select");const o=r.shape.length,a=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,c=n.data.get(i.dataId).values,l=Br(s.dtype,i.dtype),h=nt(I(s.shape),l);let d=0;const f=0===o||o>1||1===s.shape.length?1:I(s.shape.slice(1));for(let t=0;t<a.length;t++)for(let e=0;e<f;e++)1===a[t]?h[d++]=u[t]:h[d++]=c[t];return n.makeTensorInfo(s.shape,l,h)}},fC=kc,pC=$c,mC=kw(Tn,(t=>t>=0?pC*t:fC*(Math.exp(t)-1))),bC={kernelName:Tn,backendName:"cpu",kernelFunc:mC},yC=kw(Mn,(t=>1/(1+Math.exp(-t)))),gC={kernelName:Mn,backendName:"cpu",kernelFunc:yC},xC=kw(_n,(t=>t<0?-1:t>0?1:0)),wC={kernelName:_n,backendName:"cpu",kernelFunc:xC},vC=kw(Fn,(t=>Math.sin(t))),kC={kernelName:Fn,backendName:"cpu",kernelFunc:vC},$C=kw(In,(t=>Math.sinh(t))),NC={kernelName:In,backendName:"cpu",kernelFunc:$C},CC=Math.log(1.1920928955078125e-7)+2,EC=kw(Dn,(t=>{const e=t>-CC,n=t<CC,r=Math.exp(t);let s;return s=n?r:e?t:Math.log(1+r),s})),SC={kernelName:Dn,backendName:"cpu",kernelFunc:EC};const AC={kernelName:zn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,paddings:o}=r;xw([s],"spaceToBatchND");const a=I(i),u=[[0,0]];u.push(...o);for(let t=1+i.length;t<s.shape.length;++t)u.push([0,0]);const c=UN.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),l=yc(c.shape,i,a,!1),h=gc(l.length,i.length,!1),d=xc(c.shape,i,a,!1),f=Zw({inputs:{x:c},backend:n,attrs:{shape:l}}),p=hv({inputs:{x:f},backend:n,attrs:{perm:h}}),m=Zw({inputs:{x:p},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(p),m}};const RC={kernelName:jn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{sparseIndices:s,sparseValues:i,defaultValue:o}=e,{outputShape:a}=r,{sliceRank:u,numUpdates:c,sliceSize:l,strides:h,outputSize:d}=ci(0,s,a),f=lC(n.bufferSync(s),n.bufferSync(i),a,d,l,c,u,h,n.data.get(o.dataId).values[0],!1);return n.makeTensorInfo(a,f.dtype,f.values)}};const TC={kernelName:Vn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{numOrSizeSplits:i,axis:o}=r,a=V(o,s.shape)[0],u=Vc(s,i,a),c=new Array(s.shape.length).fill(0),l=s.shape.slice();return u.map((t=>{const e=[...l];e[a]=t;const r=Lv({inputs:{x:s},backend:n,attrs:{begin:c,size:e}});return c[a]+=t,r}))}},OC=kw(Ln,(t=>Math.sqrt(t))),FC={kernelName:Ln,backendName:"cpu",kernelFunc:OC},IC={kernelName:Un,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;xw(n,"square");const s=r.data.get(n.dataId).values,i=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];i[t]=e*e}return{dataId:r.write(i,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},_C=Tw(((t,e)=>{const n=t-e;return n*n})),MC=Hw(Wn,_C),DC={kernelName:Wn,backendName:"cpu",kernelFunc:MC},LC=kw(nr,((t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha})),PC={kernelName:nr,backendName:"cpu",kernelFunc:LC};function zC(t,e,n,r){const s=Hs(t,e.dtype);for(let t=0;t<s.size;t++){const i=s.indexToLoc(t),o=new Array(i.length);for(let t=0;t<o.length;t++)o[t]=i[t]*n[t]+r[t];s.set(e.get(...o),...i)}return s}const VC={kernelName:Hn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,end:o,strides:a,beginMask:u,endMask:c,ellipsisMask:l,newAxisMask:h,shrinkAxisMask:d}=r;xw(s,"stridedSlice");const{nonStrided:f,$begin:p,$strides:m,size:b,newShape:y,outShape:g}=Ci(s.shape,i,o,a,u,c,l,h,d),x=Zw({inputs:{x:s},backend:n,attrs:{shape:y}});let w;if(f){const t=Lv({inputs:{x},backend:n,attrs:{begin:p,size:b}});w=Zw({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else if(g.some((t=>0===t)))w=n.makeTensorInfo(g,s.dtype,[]);else{const t=zC(g,n.bufferSync(x),m,p);w=n.makeTensorInfo(t.shape,t.dtype,t.values)}const v=Zw({inputs:{x:w},backend:n,attrs:{shape:g}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),v}},BC=kw(qn,(t=>Math.tan(t))),WC={kernelName:qn,backendName:"cpu",kernelFunc:BC},UC=kw(Xn,(t=>Math.tanh(t)));function GC(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=Hs(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const i=t.locToIndex(s);r.values[e]=t.values[i]}return r}function jC(t,e,n,r,s){const i=e[e.length-1],[o,a]=[t.length/i,i],u=W(n,o*r),c=W("int32",o*r);for(let e=0;e<o;e++){const n=e*a,s=t.subarray(n,n+a),i=[];for(let t=0;t<s.length;t++)i.push({value:s[t],index:t});i.sort(((t,e)=>e.value-t.value));const o=e*r,l=u.subarray(o,o+r),h=c.subarray(o,o+r);for(let t=0;t<r;t++)l[t]=i[t].value,h[t]=i[t].index}const l=e.slice();return l[l.length-1]=r,[Hs(l,n,u),Hs(l,"int32",c)]}function HC(t,e,n,r){const s=V(e,n)[0],i=[1,n[0],1];for(let t=0;t<s;t++)i[0]*=n[t];i[1]=n[s];for(let t=s+1;t<n.length;t++)i[2]*=n[t];const o={},a=new Int32Array(n[s]),u=new Rr(i,r,t),c=[],l=1===i[0]&&1===i[2];for(let e=0;e<n[s];e++){let n;if(l)n=t[e].toString();else{const t=[];for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)t.push(u.get(n,e,r));n=t.join(",")}if(void 0!==o[n])a[e]=o[n];else{const t=Object.keys(o).length;o[n]=t,a[e]=t,c.push(e)}}const h=i.slice();h[1]=Object.keys(o).length;const d=new Rr(h,r);c.forEach(((t,e)=>{for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)d.set(u.get(n,t,r),n,e,r)}));const f=n.slice();return f[s]=h[1],{outputValues:d.values,outputShape:f,indices:a}}const qC=[nv,sv,ov,uv,Yw,cv,fv,pv,mv,bv,gv,wv,kv,Cv,Sv,Ov,Fv,Iv,_v,ev,Mv,zv,Wv,jw,Hv,Xv,Vw,Kv,tk,rk,sk,nk,ok,ak,ik,ck,hk,dk,fk,pk,mk,yk,gk,xk,wk,vk,$k,kk,Jk,Cw,Nk,Sk,Mk,Pk,Vk,Uk,s$,o$,a$,l$,f$,p$,m$,b$,g$,v$,N$,Sw,C$,Zv,S$,R$,O$,Rw,_$,L$,z$,W$,G$,q$,K$,Z$,Q$,tN,oN,aN,uN,cN,lN,hN,rN,pN,mN,gN,xN,kN,CN,qk,SN,RN,ON,IN,DN,LN,VN,WN,UN,HN,Iw,XN,JN,Uw,ZN,Mw,Lw,Qw,QN,tC,eC,nC,rC,sC,oC,cC,hC,dC,bC,gC,wC,kC,NC,Pv,NN,SC,AC,RC,TC,FC,IC,DC,PC,VC,t$,fN,WC,{kernelName:Xn,backendName:"cpu",kernelFunc:UC},{kernelName:Kn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reps:i}=r;xw(s,"tile");const o=GC(n.bufferSync(s),i);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:Jn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{k:i,sorted:o}=r;xw(s,"topk");const a=n.data.get(s.dataId).values,[u,c]=jC(a,s.shape,s.dtype,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(c.shape,c.dtype,c.values)]}},dv,{kernelName:Zn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:i}=e;xw(i,"unique");const o=r.data.get(i.dataId).values,{outputValues:a,outputShape:u,indices:c}=HC(o,s,i.shape,i.dtype);return[r.makeTensorInfo(u,i.dtype,a),r.makeTensorInfo([c.length],"int32",c)]}},{kernelName:Qn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{value:s}=e;let{axis:i}=r;i<0&&(i+=s.shape.length);const o=s.shape.length,a=s.shape[i],u=new Array(o-1);let c=0;for(let t=0;t<o;t++)t!==i&&(u[c++]=s.shape[t]);const l=new Array(o).fill(0),h=s.shape.slice();h[i]=1;const d=new Array(a);for(let t=0;t<d.length;t++){l[i]=t;const e=Lv({inputs:{x:s},backend:n,attrs:{begin:l,size:h}});d[t]=Zw({inputs:{x:e},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(e)}return d}},{kernelName:tr,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,segmentIds:i}=e,{numSegments:o}=r;xw(s,"unsortedSegmentSum");const a=[],u=[],c=s.shape.length-i.shape.length;let l=i;for(let t=0;t<c;++t){const e=zk({inputs:{input:l},backend:n,attrs:{dim:t+1}});l=e,u.push(e)}for(let t=0;t<o;++t){const e=Nr(t,"int32"),r=n.makeTensorInfo([],"int32",e),i=Ek({inputs:{a:r,b:l},backend:n}),o=Gw({inputs:{x:i},backend:n,attrs:{dtype:"float32"}}),c=Hk({inputs:{a:o,b:s},backend:n}),h=dN({inputs:{x:c},backend:n,attrs:{axis:0,keepDims:!1}});a.push(h),u.push(r),u.push(i),u.push(o),u.push(c),u.push(h)}const h=BN({inputs:a,backend:n,attrs:{axis:0}});return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),h}},zN];for(const t of qC)fr(t);const XC={},KC={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function JC(t){if(!(t in XC)){const e=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",(e=>{e.preventDefault(),delete XC[t]}),!1),1===t)return e.getContext("webgl",KC)||e.getContext("experimental-webgl",KC);return e.getContext("webgl2",KC)}(t);if(null===e)return console.log("Could not get context for WebGL version",t),null;XC[t]=e}const e=XC[t];return e.isContextLost()?(delete XC[t],JC(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),XC[t])}var YC,ZC,QC;function tE(t,e){return[e,t]}function eE(t){const e=I(t);return D(Math.ceil(e/4))}function nE(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function rE(t,e){const n=t;let r,s,i,o,a,u,c,l,h,d;return 2===lt().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,i=n.RGBA16F,o=n.RGBA32F,a=n.RED,c=4,l=1,h=n.HALF_FLOAT,d=n.FLOAT):(r=t.RGBA,s=t.RGBA,i=t.RGBA,o=n.RGBA,a=t.RGBA,c=4,l=4,h=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:a,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:l,textureTypeHalfFloat:h,textureTypeFloat:d}}function sE(t,e){const n=e();return lt().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}(t,e))}(t),n}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(YC||(YC={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(ZC||(ZC={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(QC||(QC={}));function iE(t){return!!(lt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function oE(t,e){return mE(t,(()=>t.getExtension(e)),'Extension "'+e+'" not supported on this browser.')}function aE(t,e){const n=mE(t,(()=>t.createShader(t.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(sE(t,(()=>t.shaderSource(n,e))),sE(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=uE.exec(e);if(null==n)return console.log(`Couldn't parse line number in error: ${e}`),void console.log(t);const r=+n[1],s=t.split("\n"),i=s.length.toString().length+2,o=s.map(((t,e)=>L((e+1).toString(),i)+t));let a=0;for(let t=0;t<o.length;t++)a=Math.max(o[t].length,a);const u=o.slice(0,r-1),c=o.slice(r-1,r),l=o.slice(r);console.log(u.join("\n")),console.log(e.split("\n")[0]),console.log(`%c ${L(c[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(l.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const uE=/ERROR: [0-9]+:([0-9]+):/g;function cE(t,e){if(sE(t,(()=>t.validateProgram(e))),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function lE(t,e,n,r,s,i,o){const a=t.getAttribLocation(e,n);return-1!==a&&(sE(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,r))),sE(t,(()=>t.vertexAttribPointer(a,s,t.FLOAT,!1,i,o))),sE(t,(()=>t.enableVertexAttribArray(a))),!0)}function hE(t,e,n,r){sE(t,(()=>function(t,e,n){bE(t,n),sE(t,(()=>t.activeTexture(t.TEXTURE0+n))),sE(t,(()=>t.bindTexture(t.TEXTURE_2D,e)))}(t,e,r))),sE(t,(()=>t.uniform1i(n,r)))}function dE(t,e,n){sE(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,n))),sE(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)))}function fE(t,e){sE(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,e))),sE(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)))}function pE(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}(t,e))}function mE(t,e,n){const r=sE(t,(()=>e()));if(null==r)throw new Error(n);return r}function bE(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function yE(t,e=2){return I(t.slice(0,t.length-e))}function gE(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function xE(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[yE(t),...gE(t)]),e}function wE(t){return t%2==0}function vE(t,e){if(_(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(wE(n)&&wE(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&wE(t[0])&&wE(e[0])}let kE,$E;function NE(t,e){return null!=t.getExtension(e)}function CE(t){try{if(null!=JC(t))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function EE(t){if(0===t)return!1;const e=JC(t);if(1!==t){if(NE(e,"EXT_color_buffer_float"))return SE(e);const t="EXT_color_buffer_half_float";if(NE(e,t)){const n=e.getExtension(t);return function(t,e){const n=rE(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);const s=1,i=1;t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,s,i,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),a}(e,n)}return!1}if(!NE(e,"OES_texture_float"))return!1;if(!NE(e,"WEBGL_color_buffer_float"))return!1;return SE(e)}function SE(t){const e=rE(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}function AE(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&R("complex64"!==t.dtype,(()=>`${e} does not support complex64 tensors in the WebGL backend.`))}))}const RE=lt();function TE(){let t,e,n,r,s,i,o,a,u,c;return 2===lt().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",i="outputColor",o="out vec4 outputColor;",a="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",i="gl_FragColor",o="",a="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:i,defineOutput:o,defineSpecialNaN:a,defineSpecialInf:u,defineRound:c}}function OE(t,e,n="index"){const r=Z(e);return r.map(((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`)).join("")}function FE(t){const e=Z(t).map((t=>t.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}RE.registerFlag("HAS_WEBGL",(()=>RE.getNumber("WEBGL_VERSION")>0)),RE.registerFlag("WEBGL_VERSION",(()=>CE(2)?2:CE(1)?1:0)),RE.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),RE.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===RE.get("WEBGL_VERSION"))),RE.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),RE.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),RE.registerFlag("WEBGL_PACK",(()=>RE.getBool("HAS_WEBGL"))),RE.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_PACK_CLIP",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),RE.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_PACK_REDUCE",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_LAZILY_UNPACK",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_CONV_IM2COL",(()=>RE.getBool("WEBGL_PACK"))),RE.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(t){if(null==kE){const e=JC(t);kE=e.getParameter(e.MAX_TEXTURE_SIZE)}return kE}(RE.getNumber("WEBGL_VERSION")))),RE.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(t){if(null==$E){const e=JC(t);$E=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,$E)}(RE.getNumber("WEBGL_VERSION")))),RE.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const t=RE.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=JC(t);return e=NE(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:NE(n,"EXT_disjoint_timer_query")?1:0,e}(t)})),RE.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>RE.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Zr())),RE.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(t){if(0===t)return!1;const e=JC(t);if(1===t){if(!NE(e,"OES_texture_float"))return!1}else if(!NE(e,"EXT_color_buffer_float"))return!1;return SE(e)}(RE.getNumber("WEBGL_VERSION")))),RE.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!RE.getBool("WEBGL_FORCE_F16_TEXTURES")&&RE.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),RE.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>EE(RE.getNumber("WEBGL_VERSION")))),RE.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(t=RE.getNumber("WEBGL_VERSION"))&&null!=JC(t).fenceSync;var t})),RE.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>RE.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),RE.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)}));const IE="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class _E{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=YC.DENSE;const e=eE(t),n=TE();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${OE(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class ME{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=YC.DENSE;const e=eE(t),n=TE();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${OE(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class DE{constructor(t){this.variableNames=["A"],this.outTexUsage=ZC.DOWNLOAD;const e=TE();this.outputShape=t,this.userCode=`\n      ${IE}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class LE{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=ZC.DOWNLOAD;const e=TE();this.outputShape=t,this.userCode=`\n      ${IE}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class PE{constructor(t,e,n=!1){this.variableNames=["A"];const r=TE(),[s,i]=e;this.outputShape=t;let o="result";n&&(o="floor(result * 255. + 0.5)"),this.userCode=`\n      ${FE(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${i};\n        int c = imod(flatIndex, ${i});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class zE{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=TE(),[s,i]=e;this.outputShape=t;let o="",a="result";n&&(a="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const a=2*e+n;o+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${i};\n              c = imod(flatIndex, ${i});\n              uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${a}] = values[0];\n              } else if(offset == 1) {\n                result[${a}] = values[1];\n              } else if(offset == 2) {\n                result[${a}] = values[2];\n              } else {\n                result[${a}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${FE(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${o}\n\n        ${r.output} = ${a};\n      }\n    `}}function VE(t){const e=TE();return function(t,e){const n=mE(t,(()=>t.createShader(t.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(sE(t,(()=>t.shaderSource(n,e))),sE(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function BE(t){return function(t,e){const n=mE(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return sE(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),sE(t,(()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function WE(t){return function(t,e){const n=mE(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return sE(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n))),sE(t,(()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Uint16Array([0,1,2,2,1,3]))}function UE(t,e,n,r,s,i){!function(t,e){const n=lt().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(e,n);const o=function(t){return mE(t,(()=>t.createTexture()),"Unable to create WebGLTexture.")}(t),a=t.TEXTURE_2D;return sE(t,(()=>t.bindTexture(a,o))),sE(t,(()=>t.texParameteri(a,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE))),sE(t,(()=>t.texParameteri(a,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE))),sE(t,(()=>t.texParameteri(a,t.TEXTURE_MIN_FILTER,t.NEAREST))),sE(t,(()=>t.texParameteri(a,t.TEXTURE_MAG_FILTER,t.NEAREST))),sE(t,(()=>t.texImage2D(a,0,r,e,n,0,s,i,null))),sE(t,(()=>t.bindTexture(t.TEXTURE_2D,null))),o}function GE(t){return t.internalFormatFloat}function jE(t){return t.internalFormatHalfFloat}function HE(t){return t.downloadTextureFormat}function qE(t){return t.internalFormatPackedFloat}function XE(t){return t.internalFormatPackedHalfFloat}function KE(t,e,n,r,s,i,o,a){const u=t,c=new Float32Array(function(t,e){const[n,r]=nE(t,e);return n*r*4}(i,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}class JE{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=lt().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){XC[t]=e}(e,t)):this.gl=JC(e);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===lt().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=oE(this.gl,t),NE(this.gl,e))this.textureHalfFloatExtension=oE(this.gl,e);else if(lt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),NE(this.gl,r))this.colorBufferHalfFloatExtension=oE(this.gl,r);else if(lt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",NE(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!NE(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=BE(this.gl),this.indexBuffer=WE(this.gl),this.framebuffer=function(t){return mE(t,(()=>t.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=rE(this.gl,this.textureHalfFloatExtension)}get debug(){return lt().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;sE(t,(()=>t.finish())),sE(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,null))),sE(t,(()=>t.deleteFramebuffer(this.framebuffer))),sE(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,null))),sE(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null))),sE(t,(()=>t.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=tE(e,n);return UE(t,s,i,GE(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=tE(e,n);return UE(t,s,i,jE(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=tE(e,n);return UE(t,s,i,HE(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){sE(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),n.data instanceof Uint8Array?sE(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data))):sE(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n))),sE(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,i){let o,a,u;sE(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),a=t.UNSIGNED_BYTE,u=t.RGBA):(o=new Float32Array(n*r*4),a=t.FLOAT,u=i.internalFormatPackedFloat),o.set(s),sE(t,(()=>t.texImage2D(t.TEXTURE_2D,0,u,n,r,0,t.RGBA,a,o))),sE(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=nE(e,n);return UE(t,s,i,XE(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=nE(e,n);return UE(t,s,i,qE(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(fE(this.gl,this.framebuffer),this.outputTexture=null),sE(this.gl,(()=>this.gl.deleteTexture(t)))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n,r){const[s,i]=tE(e,n),o=new Uint8Array(e*n*4);return sE(t,(()=>t.readPixels(0,0,s,i,r.downloadTextureFormat,t.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,e,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(t,e,n,r,s,i){return KE(this.gl,t,0,0,0,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();sE(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s)));const i=16*e*n;return sE(t,(()=>t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ))),sE(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0))),sE(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null))),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(lt().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n){const r=new Float32Array(e*n*4);return sE(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r))),r}(this.gl,e,n)))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=aE(e,t),r=VE(e),s=function(t){return mE(t,(()=>t.createProgram()),"Unable to create WebGLProgram.")}(e);return sE(e,(()=>e.attachShader(s,r))),sE(e,(()=>e.attachShader(s,n))),function(t,e){if(sE(t,(()=>t.linkProgram(e))),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&cE(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return sE(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),lE(t,e,"clipSpacePos",n,3,20,0)&&lE(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&sE(this.gl,(()=>this.gl.deleteProgram(t)))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&cE(this.gl,this.program),sE(this.gl,(()=>this.gl.useProgram(t)))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return mE(t,(()=>t.getUniformLocation(e,n)),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),sE(this.gl,(()=>this.gl.getAttribLocation(t,e)))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),hE(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=nE(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&cE(this.gl,this.program),pE(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),sE(t,(()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),sE(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=oE(this.gl,2===lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await P((()=>this.disposed||this.isQueryAvailable(t,lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(t,lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||P((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),dE(this.gl,t,this.framebuffer),this.debug&&pE(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(dE(this.gl,this.outputTexture,this.framebuffer),this.debug&&pE(this.gl)):fE(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;dE(r,t,this.framebuffer),this.debug&&pE(r),this.outputTexture=t,sE(r,(()=>r.viewport(0,0,e,n))),sE(r,(()=>r.scissor(0,0,e,n)))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),sE(this.gl,(()=>this.gl.scissor(t,e,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:YE}=r;function ZE(t,e,n,r){const s=[];t.forEach((t=>{const e=I(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))}));const i=s.join("\n"),o=t.map((t=>function(t,e,n=!1){let r="";r+=n?tS(t):QE(t);const s=t.shapeInfo.logicalShape,i=e.logicalShape;s.length<=i.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",i=t.shapeInfo.logicalShape.length,o=e.logicalShape.length,a=YE(t.shapeInfo.logicalShape,e.logicalShape),u=uS(o),c=o-i;let l;const h=["x","y","z","w","u","v"];l=0===i?"":o<2&&a.length>=1?"coords = 0;":a.map((t=>`coords.${h[t+c]} = 0;`)).join("\n");let d="";d=o<2&&i>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${h[e+c]}`)).join(", ");let f="return outputValue;";const p=1===I(t.shapeInfo.logicalShape),m=1===I(e.logicalShape);if(1!==i||p||m){if(p&&!m)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(a.length){const t=i-2,e=i-1;a.indexOf(t)>-1&&a.indexOf(e)>-1?f="return vec4(outputValue.x);":a.indexOf(t)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(e)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${l}\n      vec4 outputValue = get${r}(${d});\n      ${f}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",i=e.texShape,o=t.shapeInfo.texShape,a=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&a===u&&null==t.shapeInfo.flatOffset&&_(o,i))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const c=uS(u),l=YE(t.shapeInfo.logicalShape,e.logicalShape),h=u-a;let d;const f=["x","y","z","w","u","v"];d=0===a?"":u<2&&l.length>=1?"coords = 0;":l.map((t=>`coords.${f[t+h]} = 0;`)).join("\n");let p="";p=u<2&&a>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${f[e+h]}`)).join(", ");return`\n    float ${s}() {\n      ${c} coords = getOutputCoords();\n      ${d}\n      return get${r}(${p});\n    }\n  `}(t,e));return r}(t,e,r))).join("\n"),a=e.texShape,u=TE(),c=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let l,h,d=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${eS}\n    ${nS}\n    ${rS}\n  `}(u);e.isPacked?(l=function(t,e){switch(t.length){case 0:return iS();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(_(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let i=s,o="",a="b, r, c";for(let e=2;e<t.length-1;e++)i*=t[t.length-e-1],o=`\n      int b${e} = index / ${i};\n      index -= b${e} * ${i};\n    `+o,a=`b${e}, `+a;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${a});\n    }\n  `}(t,e)}}(e.logicalShape,a),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(u)):(l=function(t,e){switch(t.length){case 0:return iS();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(_(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=OE(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=OE(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=OE(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=OE(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(`${t.length}-D output sampling is not yet supported`)}}(e.logicalShape,a),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(d+=sS);return[d,c,h,i,l,o,n].join("\n")}function QE(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[i,o]=t.shapeInfo.texShape,a=oS(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${i}, ${o}, ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${aS(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],i=r[1];if(1===i&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const o=oS(e);if(1===i)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${i}, index + ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&_(e,s)){const t=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=B(e),a=i;if(a.length<e.length){const e=["row","col"];return`\n      ${QE(cS(t,a))}\n      float ${r}(int row, int col) {\n        return ${r}(${lS(e,o)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${aS(t)}\n      }\n    `;const u=s[0],c=s[1],l=oS(n);if(1===c)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${l};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],i=e[2],{newShape:o,keptDims:a}=B(e),u=o;if(u.length<e.length){const e=["row","col","depth"];return`\n        ${QE(cS(t,u))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${lS(e,a)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${i}, 1)));\n        ${aS(t)}\n      }\n    `;const c=t.shapeInfo.texShape,l=c[0],h=c[1],d=t.shapeInfo.flatOffset;if(h===s&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${l}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===i&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const f=oS(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${l}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],i=e[2]*s,o=e[1]*i,{newShape:a,keptDims:u}=B(e);if(a.length<e.length){const e=["row","col","depth","depth2"];return`\n      ${QE(cS(t,a))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${lS(e,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${s}, 1)));\n        ${aS(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,l=t.shapeInfo.texShape,h=l[0],d=l[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=oS(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${f});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],i=e[3]*s,o=e[2]*i,a=e[1]*o,{newShape:u,keptDims:c}=B(e);if(u.length<e.length){const e=["row","col","depth","depth2","depth3"];return`\n      ${QE(cS(t,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${lS(e,c)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${a}, ${o}, ${i}, ${s})) +\n          depth3;\n        ${aS(t)}\n      }\n    `;const l=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],f=h[1];if(f===a&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${i}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const p=oS(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${o} + depth * ${i} +\n          depth2 * ${s} + depth3 + ${p};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:i}=B(e);if(s.length<e.length){const e=["row","col","depth","depth2","depth3","depth4"];return`\n      ${QE(cS(t,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${lS(e,i)});\n      }\n    `}const o=e[5],a=e[4]*o,u=e[3]*a,c=e[2]*u,l=e[1]*c;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${c}, ${u}, ${a})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${aS(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,f=d[0],p=d[1];if(p===l&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${a}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===o&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=oS(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${c} + depth * ${u} +\n          depth2 * ${a} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${f}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function tS(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=TE();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=TE();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${i.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,i=s[0],o=s[1],a=TE();if(null!=s&&_(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${a.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=[1,2],s=["b","row","col"];return`\n        ${tS(cS(t,e.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${lS(s,n)});\n        }\n      `}const o=i[0],a=i[1],u=Math.ceil(e[2]/2),c=u*Math.ceil(e[1]/2),l=TE();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${a}, ${c}, ${u}, b, row, col);\n      return ${l.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,o=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],a=o[0],u=o[1],c=Math.ceil(e[n-1]/2);let l=c*Math.ceil(e[n-2]/2),h="int b, int row, int col",d=`b * ${l} + (row / 2) * ${c} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,l*=e[n-t-1],d=`b${t} * ${l} + `+d;const f=TE();return`\n    vec4 ${s}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${a});\n      return ${f.texture2D}(${r}, uv);\n    }\n  `}(t)}}const eS="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",nS="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",rS="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",sS="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function iS(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function oS(t){return`offset${t}`}function aS(t){const e=t.name,n=I(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function uS(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function cS(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function lS(t,e){return e.map((e=>t[e])).join(", ")}function hS(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach(((t,n)=>{const r=t.logicalShape,s=e[n],i=s.shape;if(!_(r,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);if(t.isUniform&&s.isUniform)return;const o=t.texShape,a=s.isUniform?null:s.texData.texShape;if(!_(o,a))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${a} must match`)}))}const{addImpl:dS,bincountImpl:fS,bincountReduceImpl:pS,ceilImpl:mS,concatImpl:bS,expImpl:yS,expm1Impl:gS,floorImpl:xS,gatherV2Impl:wS,greaterImpl:vS,lessImpl:kS,linSpaceImpl:$S,logImpl:NS,maxImpl:CS,maximumImpl:ES,minimumImpl:SS,multiplyImpl:AS,negImpl:RS,prodImpl:TS,rangeImpl:OS,rsqrtImpl:FS,simpleAbsImpl:IS,sliceImpl:_S,stridedSliceImpl:MS,subImpl:DS,tileImpl:LS,topKImpl:PS,transposeImpl:zS,uniqueImpl:VS}=v;function BS(t,e){return["x","y","z","w","u","v"].slice(0,e).map((e=>`${t}.${e}`))}function WS(t,e){return 1===e?[t]:BS(t,e)}class US{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=WS("rc",e),r=uS(e),s=function(t,e,n){if(1===t)return`rc > ${e[0]}`;let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),i=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),o=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let i=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)i=`${e[e.length-1-n]},`+i;n.push(i)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${i}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `}}}class GS{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${OE(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${FE(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class jS{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=qS(e,n),s=XS(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const i=HS(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let o;return r===QC.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===QC.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===QC.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===QC.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===QC.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),o}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=qS(n,r),i=XS(e,s,r);i in this.freeTextures||(this.freeTextures[i]=[]);const o=HS(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),a=lt().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==a&&this._numBytesAllocated>a?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=o):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));for(const t in this.usedTextures)this.usedTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function HS(t,e,n,r,s){const i=function(t,e){switch(t){case QC.PACKED_2X2_FLOAT32:return qE(e);case QC.PACKED_2X2_FLOAT16:return XE(e);case QC.UNPACKED_FLOAT32:return GE(e);case QC.UNPACKED_FLOAT16:return jE(e);case QC.PACKED_4X1_UNSIGNED_BYTE:return HE(e);default:throw new Error(`Unknown physical texture type ${t}`)}}(e,r);let o;if(s){const[e,n]=nE(t[0],t[1]);o=e*n}else{const[e,n]=tE(t[0],t[1]);o=e*n}return o*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${e}`)}(n,i)}function qS(t,e){if(t===ZC.UPLOAD)return QC.PACKED_2X2_FLOAT32;if(t===ZC.RENDER||null==t)return function(t){return lt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?QC.PACKED_2X2_FLOAT32:QC.UNPACKED_FLOAT32:t?QC.PACKED_2X2_FLOAT16:QC.UNPACKED_FLOAT16}(e);if(t===ZC.DOWNLOAD||t===ZC.PIXELS)return QC.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${t}`)}function XS(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class KS{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const JS="return abs(x);";const YS="return x;";class ZS{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class QS{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=WS("rc",e),r=uS(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),i=n.slice(-2),o=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const tA=Xc,eA={};class nA extends N{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!lt().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=JC(lt().getNumber("WEBGL_VERSION"));this.binaryCache=((e=lt().getNumber("WEBGL_VERSION"))in eA||(eA[e]={}),eA[e]),this.gpgpu=new JE(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new jS(this.gpgpu),this.numMBBeforeWarning=null==lt().global.screen?1024:lt().global.screen.height*lt().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new $(this,Ti())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((lt().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||lt().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:ZC.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(t){this.texData.get(t).refCount++}decRef(t){if(this.texData.has(t)){this.texData.get(t).refCount--}}move(t,e,n,r){if(lt().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:ZC.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensorInfos:s,slice:i,shape:o,isPacked:a}=e;if(null!=i){let e;e=a?new ZS(o,YS):new KS(o,YS);const n=this.runWebGLProgram(e,[{dataId:t,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const u=null!=this.activeTimers;let c,l;if(u&&(c=Er()),"complex64"===r){l=Fc(this.readSync(s.real.dataId),this.readSync(s.imag.dataId))}else l=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=Er()-c),this.convertAndCacheOnCPU(t,l)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise((t=>e.push(t)))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:i,complexTensorInfos:o,isPacked:a}=e;if(null!=s){let e;e=a?new ZS(r,YS):new KS(r,YS);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:i}],i),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!lt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===lt().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,l=null;if("complex64"!==i&&lt().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);l=this.gpgpu.createBufferFromTexture(e.texture,...eE(r))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);c=Fc(t[0],t[1])}else if(null==l)c=this.getValuesFromTexture(t);else{const t=I(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(l,t)}null!=u&&this.disposeIntermediateTensorInfo(u);const h=this.convertAndCacheOnCPU(t,c),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach((t=>t(h))),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),h}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map((t=>Ar(t)))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Hs(t.shape,t.dtype,n)}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!iE(n)){if(lt().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=I(e);if(lt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),i=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...eE(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),i}const i=lt().getBool("WEBGL_PACK")&&!0===r,o=i?xE(e):e,a=i?new LE(o):new DE(o),u=this.runWebGLProgram(a,[{shape:o,dtype:n,dataId:t}],"float32"),c=this.texData.get(u.dataId),l=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),l}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=F(this.activeTimers.map((t=>t.query))).filter((t=>null!=t)),i=F(this.activeTimers.map((t=>t.name))).filter((t=>null!=t));this.activeTimers=e,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);o.kernelMs=function(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}(t),o.getExtraProfileInfo=()=>t.map(((t,e)=>({name:i[e],ms:t}))).map((t=>`${t.name}: ${t.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Er(),endMs:null}}endTimer(t){return lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Er(),t)}async getQueryTime(t){if(lt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;if(this.texData.get(t).complexParentRefCount>0)return void this.texData.get(t).refCount--;this.releaseGPUData(t);const{complexTensorInfos:e}=this.texData.get(t);null!=e&&(this.texData.get(e.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.real),this.texData.get(e.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.imag)),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:i,slice:o}=this.texData.get(t),a=o&&o.origDataId||t,u=this.dataRefCount.get(a);u>1?this.dataRefCount.set(a,u-1):(this.dataRefCount.delete(a),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,i)));const c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return lt().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ti().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return lt().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every((t=>null==this.texData.get(t.dataId).texture&&I(t.shape)<e))}getGPGPUContext(){return this.gpgpu}where(t){Tc("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return tA(t.shape,e)}packedUnaryOp(t,e,n){const r=new ZS(t.shape,e);return this.compileAndRun(r,[t],n)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const e=IS(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(lt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,JS,t.dtype);const e=new KS(t.shape,JS);return this.compileAndRun(e,[t])}makeTensorInfo(t,e,n){let r;if("string"===e&&null!=n&&n.length>0&&q(n[0])){const s=n.map((t=>Sr(t)));r=this.write(s,t,e)}else r=this.write(n,t,e);return this.texData.get(r).usage=null,{dataId:r,shape:t,dtype:e}}makeOutput(t,e,n){const{dataId:r}=this.makeTensorInfo(t,e,n);return Ti().makeTensorFromDataId(r,t,e,this)}unpackTensor(t){const e=new QS(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new US(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[yE(t.shape),...gE(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[yE(e),...gE(e)],i=new GS(s,n),o=this.runWebGLProgram(i,[r],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,i=xE(r);let o;o=n?new ME(i):new _E(i);return{dtype:s,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const i=this.makeTensorInfo(t.outputShape,n),o=this.texData.get(i.dataId);if(t.packedOutput&&(o.isPacked=!0),t.outPackingScheme===YC.DENSE){const e=eE(t.outputShape);o.texShape=e.map((t=>2*t))}if(null!=t.outTexUsage&&(o.usage=t.outTexUsage),0===I(i.shape))return o.values=W(i.dtype,0),i;const a=[],u=e.map((e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&I(e.shape)<=lt().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),a.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!vE(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),a.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},l=function(t,e,n){let r="";e.concat(n).forEach((t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`}));const s=t.userCode;let i=t.constructor.name;return i+="_"+r+"_"+s,i}(t,u,c),h=this.getAndSaveBinary(l,(()=>function(t,e,n,r){const s=e.userCode,i=n.map(((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),o=i.map((t=>t.shapeInfo)),a={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=ZE(i,a,s,e.packedInputs),c=t.createProgram(u);let l=null;const h=t.getUniformLocation(c,"NAN",!1);1===lt().getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;d[r]=t.getUniformLocation(c,r,s),d[`offset${r}`]=t.getUniformLocation(c,`offset${r}`,s)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:o,outShapeInfo:a,infLoc:l,nanLoc:h}}(this.gpgpu,t,u,c))),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(t,e,n,r,s){hS(e.inShapeInfos,n),hS([e.outShapeInfo],[r]);const i=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,o[0],o[1]):t.setOutputMatrixTexture(i,o[0],o[1]),t.setProgram(e.webGLProgram),1===lt().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach(((n,r)=>{const s=e.program.variableNames[r],i=e.uniformLocations[s],o=e.uniformLocations[`offset${s}`];if(null!=i)if(n.isUniform)if(I(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(i,e)}else null!=n.texData.slice&&null!=o&&t.gl.uniform1i(o,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,r)})),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,h,u,c,r),a.forEach((t=>this.disposeIntermediateTensorInfo(t))),d&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!lt().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===s){const t=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),t}return i}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const i=this.runWebGLProgram(t,e,n,r,s);return Ti().makeTensorFromDataId(i.dataId,i.shape,i.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!lt().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Fi((()=>{if(!lt().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=lt().getBool("DEBUG");lt().set("DEBUG",!1);const e=this.abs(zi(1e-8)).dataSync()[0];if(lt().set("DEBUG",t),e>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:i,usage:o,isPacked:a}=e;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=Er());let l=e.texShape;if(null==l&&(l=function(t,e=!1){let n=lt().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map(((e,n)=>n>=t.length-2?A(t[n]):t[n]))).length&&(t=[2,t[0]])),2!==t.length){const e=B(t);t=e.newShape}let r=I(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=yE(t);let n=2,s=2;return t.length&&([n,s]=gE(t)),r=e*(n/2)*(s/2),D(r).map((t=>2*t))}return D(r)}(n,a),e.texShape=l),null!=s){const t=xE(n);let i,o=l[1],h=l[0];const d=s instanceof Uint8Array;a?([o,h]=nE(l[0],l[1]),i=new zE(t,[h,o],d)):i=new PE(t,[h,o],d);const f=this.makeTensorInfo([h,o],r);this.texData.get(f.dataId).usage=d?ZC.PIXELS:ZC.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,h,s);const p=!0,m=this.runWebGLProgram(i,[f],r,null,p),b=this.texData.get(m.dataId);e.texture=b.texture,e.texShape=b.texShape,e.isPacked=b.isPacked,e.usage=b.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=Er()-c)}else{const t=this.acquireTexture(l,o,r,a);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error(`Unknown dtype ${e}`)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*H(e)}}Qr()&&Li("webgl",(()=>new nA),2);class rA{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=To(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class sA{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=To(e,n);const s=this.outputShape.length;let i="";if(r)if(0===s||1===I(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(i=`\n          ${uS(s)} coords = getOutputCoords();\n        `,1===s)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=WS("coords",s);i+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function iA(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const oA={kernelName:Ce,backendName:"webgl",kernelFunc:iA};function aA(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,i=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(i.dataId),a=iA({inputs:{x:r},backend:n});n.texData.get(a.dataId).complexParentRefCount++;const u=iA({inputs:{x:s},backend:n});return n.texData.get(u.dataId).complexParentRefCount++,o.complexTensorInfos={real:a,imag:u},i}const uA={kernelName:zt,backendName:"webgl",kernelFunc:aA},cA="return (a < 0.) ? b * a : a;",lA="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const hA={kernelName:Oe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{alpha:i}=r,o=n.makeTensorInfo([],"float32",Nr(i,"float32")),a=lt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new sA(lA,s.shape,o.shape):new rA(cA,s.shape,o.shape),u=n.runWebGLProgram(a,[s,o],s.dtype);return n.disposeIntermediateTensorInfo(o),u}},dA="return (a < 0.) ? b * a : a;",fA="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const pA={kernelName:fn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e,i=lt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new sA(fA,r.shape,s.shape):new rA(dA,r.shape,s.shape);return n.runWebGLProgram(i,[r,s],r.dtype)}};function mA({opSnippet:t,packedOpSnippet:e,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:i})=>{const{x:o}=s,a=i,u=r||o.dtype;if(a.shouldExecuteOnCPU([o])&&null!=n){const t=a.texData.get(o.dataId),e=n(t.values,u);return a.makeTensorInfo(o.shape,u,e)}let c;return c=lt().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=e?new ZS(o.shape,e):new KS(o.shape,t),a.runWebGLProgram(c,[o],u)}}function bA({opSnippet:t,packedOpSnippet:e,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:i}){return({inputs:o,backend:a})=>{const{a:u,b:c}=o,l=a;if(r&&"complex64"===u.dtype){const e=l.texData.get(u.dataId),n=l.texData.get(c.dataId),[r,s]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((e=>{const[n,r]=e,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},i={dataId:r.dataId,dtype:r.dtype,shape:c.shape},o=new rA(t,u.shape,c.shape);return l.runWebGLProgram(o,[s,i],Br(n.dtype,r.dtype))})),i=aA({inputs:{real:r,imag:s},backend:l});return l.disposeIntermediateTensorInfo(r),l.disposeIntermediateTensorInfo(s),i}const h=i||Br(u.dtype,c.dtype);if(l.shouldExecuteOnCPU([u,c])&&null!=s){const t=l.texData.get(u.dataId),e=l.texData.get(c.dataId),[n,r]=s(u.shape,c.shape,t.values,e.values,h),i=l.makeTensorInfo(r,h);return l.texData.get(i.dataId).values=n,i}let d;return d=lt().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=e?new sA(e,u.shape,c.shape,n):new rA(t,u.shape,c.shape),l.runWebGLProgram(d,[u,c],h)}}function yA(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===t)return e?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===t)return e?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===t)return e?fA:dA;if("leakyrelu"===t)return e?lA:cA;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class gA{constructor(t,e,n,r=!1,s=!1,i=!1,o=null,a=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const c=r?t[1]:t[2],l=Math.ceil(c/2),h=r?"i * 2, rc.y":"rc.y, i * 2",d=s?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",b="";o&&(m=a?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,b="result = activation(result);");const y=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let g="rc.x",x="rc.x";t[0]<e[0]?g=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(x=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          int batchA = ${g};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${p[0]});\n          result += (${f[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${b}\n\n        setOutput(result);\n      }\n    `}}const xA="return areal * breal - aimag * bimag;",wA="return areal * bimag + aimag * breal;";class vA{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=To(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const kA="return a * b;";function $A(t){const{inputs:e,backend:n}=t,{a:r,b:s}=e,i=Br(r.dtype,s.dtype);if("complex64"===r.dtype){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),i=new vA(xA,r.shape,s.shape),o=new vA(wA,r.shape,s.shape),a=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(i,a,"float32"),c=n.runWebGLProgram(o,a,"float32"),l=aA({inputs:{real:u,imag:c},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),l}if(n.shouldExecuteOnCPU([r,s])){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),[o,a]=AS(r.shape,s.shape,t.values,e.values,i),u=n.makeTensorInfo(a,i);return n.texData.get(u.dataId).values=o,u}let o;return o=lt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new sA(kA,r.shape,s.shape):new rA(kA,r.shape,s.shape),n.runWebGLProgram(o,[r,s],i)}const NA={kernelName:en,backendName:"webgl",kernelFunc:$A};function CA(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:i}=r,o=n,a=I(s.shape),u=z(i,a),c=I(u);R(a===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`));const l=o.texData.get(s.dataId);return!l.isPacked||vE(s.shape,u)||null!==l.texture&&vE(l.shape,u)?(o.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):function(t,e,n){const r=[yE(t.shape),...gE(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},i=[yE(e),...gE(e)],o=new GS(i,r),a=n.runWebGLProgram(o,[s],t.dtype,null,!0);return{dataId:a.dataId,shape:e,dtype:a.dtype}}(s,u,o)}const EA={kernelName:xn,backendName:"webgl",kernelFunc:CA};class SA{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:i}=t;this.outputShape=[r,i];const o=4*Math.floor(n/4),a=n%4;let u="sumValue += dot(values, ones);";if(null!=e){const t=1/e;u=`sumValue += dot(values * ${M(t)?t.toPrecision(2):t}, ones);`}let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===a}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===a}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===a}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class AA{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:i}=t;this.outputShape=[r,i];let o="0.0",a="";"prod"===e?o="1.0":"min"===e?(o="1.0 / 1e-20",a="min"):"max"===e&&(o="-1.0 / 1e-20",a="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(n/4),l=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${a}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===e?(o="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(o="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let f="";s%n>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===l}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===l}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===l}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function RA(t,e,n,r){const s=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],r=mc(n);e.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return e}(t.shape);let i=t;for(let o=0;o<s.length;o++){const{inSize:a,windowSize:u,outSize:c}=s[o];let l,h;l="mean"===n?0===o?new SA({windowSize:u,inSize:a,batchSize:t.shape[0],outSize:c},a):new SA({windowSize:u,inSize:a,batchSize:t.shape[0],outSize:c}):new AA({windowSize:u,inSize:a,batchSize:t.shape[0],outSize:c},n),h=i,i=r.runWebGLProgram(l,[i],e),h.dataId!==t.dataId&&r.disposeIntermediateTensorInfo(h)}return i}class TA{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=uS(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class OA{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=uS(this.rank),s=BS("rc",this.rank),i=new Array(this.rank);for(let t=0;t<e.length;t++)i[e[t]]=s[t];const o=`vec2(${i.slice(-2).join()})`,a=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${a}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${a}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function FA(t,e,n){const r=lt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new OA(t.shape,e):new TA(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}function IA(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r;return function(t,e,n,r){const s=e,i=t.shape.length,o=V(s,t.shape);let a=o;const u=oa(a,i),c=null!=u;let l=t;c&&(l=FA(t,u,r),a=ua(a.length,i)),ia("sum",a,i);const[h,d]=ra(l.shape,a);let f=h;n&&(f=sa(h,o));const p=I(d),m=CA({inputs:{x:l},attrs:{shape:[I(t.shape)/p,p]},backend:r}),b=RA(m,Wr(t.dtype),"sum",r),y=CA({inputs:{x:b},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(b),c&&r.disposeIntermediateTensorInfo(l),y}(s,i,o,n)}const _A={kernelName:Pn,backendName:"webgl",kernelFunc:IA};function MA(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{perm:i}=r,o=n,a=s.shape.length,u=new Array(a);for(let t=0;t<u.length;t++)u[t]=s.shape[i[t]];let c;if(o.shouldExecuteOnCPU([s])){const t=o.texData.get(s.dataId).values,e=zS(t,s.shape,s.dtype,i,u);c=o.makeTensorInfo(u,s.dtype);o.texData.get(c.dataId).values=e}else c=FA(s,i,o);return c}const DA={kernelName:Yn,backendName:"webgl",kernelFunc:MA};function LA({a:t,b:e,transposeA:n,transposeB:r,backend:s,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:u=null}){const c=t.shape.length,l=e.shape.length,h=n?t.shape[c-2]:t.shape[c-1],d=r?e.shape[l-1]:e.shape[l-2],f=n?t.shape[c-1]:t.shape[c-2],p=r?e.shape[l-2]:e.shape[l-1],m=t.shape.slice(0,-2),b=e.shape.slice(0,-2),y=I(m),g=I(b);R(c>=2&&l>=2&&(y===g||1===y||1===g),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${b}).`));const x=(y>g?t.shape.slice(0,-2):e.shape.slice(0,-2)).concat([f,p]);R(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${t.shape} and ${e.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,h,f]:[y,f,h],v=r?[g,p,d]:[g,d,p],k=CA({inputs:{x:t},backend:s,attrs:{shape:w}}),$=CA({inputs:{x:e},backend:s,attrs:{shape:v}}),N=[k,$],C=Math.max(y,g),E=n?k.shape[1]:k.shape[2],S=null!=i,A=null!=o,T="leakyrelu"===u,O=null!=u?yA(u,!0):null;let F;if((1===f||1===p)&&E>1e3&&!1===(S||A||T||null!=O)){let t=k,e=$;n&&(t=MA({inputs:{x:k},backend:s,attrs:{perm:[0,2,1]}}),N.push(t)),r&&(e=MA({inputs:{x:$},backend:s,attrs:{perm:[0,2,1]}}),N.push(e));const i=1===p;let o=t;1!==p&&(o=CA({inputs:{x:t},backend:s,attrs:{shape:[C,E,1]}}),N.push(o));const a=1===p?2:1;let u=e;i&&(u=CA({inputs:{x:e},backend:s,attrs:{shape:[C,1,E]}}),N.push(u));const c=$A({inputs:{a:o,b:u},backend:s});F=IA({inputs:{x:c},backend:s,attrs:{axis:a,keepDims:!0}}),N.push(c)}else{const u=Br(t.dtype,e.dtype),c=new gA(w,v,[C,f,p],n,r,S,O,A,T),l=[k,$];if(null!=i&&l.push(i),A&&l.push(o),T){const t=s.makeTensorInfo([],"float32",Nr(a,"float32"));l.push(t),N.push(t)}F=s.runWebGLProgram(c,l,u)}const _=CA({inputs:{x:F},backend:s,attrs:{shape:x}});N.push(F);for(const t of N)s.disposeIntermediateTensorInfo(t);return _}const PA={kernelName:ir,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i,bias:o,preluActivationWeights:a}=e,{transposeA:u,transposeB:c,activation:l,leakyreluAlpha:h}=r;return LA({a:s,b:i,transposeA:u,transposeB:c,backend:n,bias:o,preluActivationWeights:a,leakyreluAlpha:h,activation:l})}},zA="return abs(x);";const VA={kernelName:mt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const t=n.texData.get(r.dataId),e=IS(t.values);return n.makeTensorInfo(r.shape,r.dtype,e)}let s;return s=lt().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new ZS(r.shape,zA):new KS(r.shape,zA),n.runWebGLProgram(s,[r],r.dtype)}},BA=mA({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),WA={kernelName:bt,backendName:"webgl",kernelFunc:BA},UA=mA({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),GA={kernelName:yt,backendName:"webgl",kernelFunc:UA},jA="return a + b;",HA=bA({opSnippet:jA,packedOpSnippet:jA,supportsComplex:!0,cpuKernelImpl:dS}),qA={kernelName:gt,backendName:"webgl",kernelFunc:HA};class XA{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`float v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class KA{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const JA={kernelName:xt,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:r}=e,s=n;if(1===s.length)return iA({inputs:{x:s[0]},backend:r});if(s.length>lt().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(s.length/2),n=t({inputs:s.slice(0,e),backend:r}),i=t({inputs:s.slice(e),backend:r});return t({inputs:[n,i],backend:r})}const i=s.map((t=>t.dtype)).reduce(((t,e)=>Br(t,e))),o=s.map((t=>t.shape)),a=lt().getBool("WEBGL_PACK")?new KA(s[0].shape,o):new XA(s[0].shape,o);return r.runWebGLProgram(a,s,i)}};const YA={kernelName:wt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,u=V(i,s.shape);let c=u;const l=oa(c,a);let h=s;null!=l&&(h=MA({inputs:{x:s},backend:n,attrs:{perm:l}}),c=ua(c.length,a)),ia("all",c,a);const[d,f]=ra(h.shape,c),p=CA({inputs:{x:h},backend:n,attrs:{shape:[-1,I(f)]}}),m=RA(p,p.dtype,"all",n);let b;if(o){b=CA({inputs:{x:m},backend:n,attrs:{shape:sa(d,u)}})}else b=CA({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),null!=l&&n.disposeIntermediateTensorInfo(h),b}};const ZA={kernelName:vt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,u=V(i,s.shape);let c=u;const l=oa(c,a);let h=s;null!=l&&(h=MA({inputs:{x:s},backend:n,attrs:{perm:l}}),c=ua(c.length,a)),ia("any",c,a);const[d,f]=ra(h.shape,c),p=CA({inputs:{x:h},backend:n,attrs:{shape:[-1,I(f)]}}),m=RA(p,p.dtype,"any",n);let b;if(o){b=CA({inputs:{x:m},backend:n,attrs:{shape:sa(d,u)}})}else b=CA({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),null!=l&&n.disposeIntermediateTensorInfo(h),b}};class QA{constructor(t,e,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:i}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];const o="max"===e?">":"<",a=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${a};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class tR{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,R(t.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=t[t.length-1],i=Math.ceil(s/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,a=o.length,u=uS(a),c=WS("coords",a);let l,h;if(1===i){h=a+1;const t=uS(h);l=`\n        ${t} sourceLocR = ${t}(${c.join()}, 0);\n        ++${c[a-1]};\n        ${t} sourceLocG = ${t}(${c.join()}, 0);\n        ++${c[a-2]};\n        ${t} sourceLocA = ${t}(${c.join()}, 0);\n        --${c[a-1]};\n        ${t} sourceLocB = ${t}(${c.join()}, 0);\n        --${c[a-2]};`}else h=a,l=`\n        ${u} sourceLocR = coords;\n        ++${c[a-1]};\n        ${u} sourceLocG = coords;\n        ++${c[a-2]};\n        ${u} sourceLocA = coords;\n        --${c[a-1]};\n        ${u} sourceLocB = coords;\n        --${c[a-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),f="."+d[h-1],p=d.map((t=>"int "+t)),m=WS("sourceLocR",h-1).concat("inIdx.r"),b=WS("sourceLocG",h-1).concat("inIdx.g"),y=WS("sourceLocB",h-1).concat("inIdx.b"),g=WS("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${g.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${b.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${g.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${p.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${p.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[a-1]} < ${o[a-1]-1};\n        bool hasNextRow = ${c[a-2]} < ${o[a-2]-1};\n        ${l}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function eR(t,e,n,r=null){let s=e.shape[0],i=e.shape[1];null!=r&&(s=r.shape[0],i=r.shape[1]);const o=mc(i),a={windowSize:o,inSize:i,batchSize:s,outSize:Math.ceil(i/o)},u=new QA(a,n,null==r),c=[e];null!=r&&c.push(r);const l=t.runWebGLProgram(u,c,"int32");if(1===l.shape[1])return l;const h=eR(t,e,n,l);return t.disposeIntermediateTensorInfo(l),h}function nR(t,e,n,r=null){const s=null!=r?r.shape:e.shape,i=mc(s[s.length-1]),o=new tR(s,i,n,null==r),a=null==r?[e]:[e,r],u=t.runWebGLProgram(o,a,"int32");if(u.shape.length===e.shape.length){const r=nR(t,e,n,u);return t.disposeIntermediateTensorInfo(u),r}return u}function rR(t,e,n,r){const s=[n];if(ia("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,e.shape.length),!lt().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){const n=[],[i,o]=ra(e.shape,s),a=I(o),u=CA({inputs:{x:e},backend:t,attrs:{shape:[-1,a]}});n.push(u);const c=eR(t,u,r);n.push(c);const l=CA({inputs:{x:c},backend:t,attrs:{shape:i}});return n.forEach((e=>t.disposeIntermediateTensorInfo(e))),l}return nR(t,e,r)}const sR={kernelName:kt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;let o=V(i,s.shape);const a=oa(o,s.shape.length);let u=s;const c=[];null!=a&&(u=MA({inputs:{x:s},backend:n,attrs:{perm:a}}),c.push(u),o=ua(o.length,u.shape.length)),ia("argMax",[o[0]],u.shape.length);const l=rR(n,u,o[0],"max");return c.forEach((t=>n.disposeIntermediateTensorInfo(t))),l}};const iR={kernelName:$t,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;let o=V(i,s.shape);const a=oa(o,s.shape.length);let u=s;const c=[];null!=a&&(u=MA({inputs:{x:s},backend:n,attrs:{perm:a}}),c.push(u),o=ua(o.length,u.shape.length)),ia("argMin",[o[0]],u.shape.length);const l=rR(n,u,o[0],"min");return c.forEach((t=>n.disposeIntermediateTensorInfo(t))),l}},oR=mA({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),aR={kernelName:Nt,backendName:"webgl",kernelFunc:oR},uR=mA({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),cR={kernelName:Ct,backendName:"webgl",kernelFunc:uR},lR=mA({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),hR={kernelName:Et,backendName:"webgl",kernelFunc:lR},dR=bA({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),fR={kernelName:At,backendName:"webgl",kernelFunc:dR},pR=mA({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),mR={kernelName:St,backendName:"webgl",kernelFunc:pR};class bR{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,o=t.strideHeight,a=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const p="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,b=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(p||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${a});\n        const ivec2 pads = ivec2(${d}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${l};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:b:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let g=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(g="avgValue / count");const x=4*Math.floor(i/4),w=i%4,v=`\n      if (${p}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${a});\n      const ivec2 pads = ivec2(${d}, ${f});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${l};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${g});\n      }\n    `}}class yR{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,o=t.strideDepth,a=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,f=t.effectiveFilterHeight,p=t.effectiveFilterWidth,m=t.padInfo.front,b=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let x="0.0";if(g||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${a}, ${u});\n        const ivec3 pads = ivec3(${m}, ${b}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${l}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${p};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${p} +\n                      wR * ${p} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(i/4),k=i%4,$=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${a}, ${u});\n      const ivec3 pads = ivec3(${m}, ${b}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${$}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${$}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const gR={kernelName:Rt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;AE(s,"avgPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:u}=r;R(ro(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=qi(s.shape,i,o,1,a,u);if(1===c.filterWidth&&1===c.filterHeight&&_(c.inShape,c.outShape))return iA({inputs:{x:s},backend:n});const l=new bR(c,"avg",!1);return n.runWebGLProgram(l,[s],"float32")}};const xR={kernelName:Ot,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:o,pad:a,dimRoundingMode:u,dataFormat:c}=r,l=Xi(s.shape,i,o,[1,1,1],a,u,c),h=new yR(l,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class wR{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,i=t.dilationHeight,o=t.dilationWidth,a=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=a-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${c}, ${l});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n            wR += ${i}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vR{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,i=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,f=l-1-t.padInfo.front,p=h-1-t.padInfo.top,m=d-1-t.padInfo.left,b=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${f}, ${p}, ${m});\n      const float avgMultiplier = float(${b});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n            wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const kR={kernelName:Ft,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,o=i,{filterSize:a,strides:u,pad:c,dimRoundingMode:l}=r,h=Xi(o.shape,a,u,[1,1,1],c,l),d=new vR(h);return n.runWebGLProgram(d,[s],o.dtype)}};const $R={kernelName:Tt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,o=i;AE([s,i],"avgPoolGrad");const{filterSize:a,strides:u,pad:c}=r,l=qi(o.shape,a,u,1,c),h=new wR(l);return n.runWebGLProgram(h,[s],o.dtype)}};const NR={kernelName:It,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i}=e,{transposeA:o,transposeB:a}=r;return LA({a:s,b:i,transposeA:o,transposeB:a,backend:n})}};class CR{constructor(t,e,n,r,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],To(t,e),To(t,n);let o="0.0";null!=r&&(To(t,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let a="1.0";null!=s&&(To(t,s),this.variableNames.push("scale"),a="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${a};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class ER{constructor(t,e,n,r,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],To(t,e),To(t,n);let o="vec4(0.0)";null!=r&&(To(t,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let a="vec4(1.0)";null!=s&&(To(t,s),this.variableNames.push("scale"),a="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${a};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const SR={kernelName:we,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,mean:s,variance:i,offset:o,scale:a}=t;R(s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),R(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),R(null==a||s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[r,s,i];let l=null;null!=o&&(l=o.shape,c.push(o));let h=null;null!=a&&(h=a.shape,c.push(a));const d=lt().getBool("WEBGL_PACK_NORMALIZATION")?new ER(r.shape,s.shape,i.shape,l,h,u):new CR(r.shape,s.shape,i.shape,l,h,u);return e.runWebGLProgram(d,c,c[0].dtype)}};class AR{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=uS(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return RR.slice(0,t).map((t=>"sourceLoc."+t)).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map(((t,e)=>`sourceLoc.${RR[e]} = start[${e}] + coords.${RR[e]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const RR=["x","y","z","w","u","v"];class TR{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=uS(this.rank),n=WS("coords",this.rank),r=WS("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,i=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${i};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${i};\n        --${r[this.rank-1]};\n      }\n    `,a=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${i};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${i};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map(((t,e)=>`start[${e}]`)).join()});`:t.map(((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${a}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}function OR(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,size:o}=r,[a,u]=Ni(s,i,o);if(li(s,a,u),0===I(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const t=n.texData.get(s.dataId),e=_S(t.values,a,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,e)}const{isPacked:c}=n.texData.get(s.dataId),l=ki(s.shape,a,u);if(c||!l){const t=lt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TR(u):new AR(u),e=t.getCustomSetupFunc(a);return n.runWebGLProgram(t,[s],s.dtype,e)}return n.uploadToGPU(s.dataId),function(t,e,n,r){const s=r.texData.get(t.dataId),i=r.makeTensorInfo(n,t.dtype),o=r.texData.get(i.dataId);Object.assign(o,s),o.shape=n,o.dtype=t.dtype;let a=$i(e,Z(t.shape));s.slice&&(a+=s.slice.flatOffset),o.slice={flatOffset:a,origDataId:s.slice&&s.slice.origDataId||t.dataId};const u=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,u+1),i}(s,a,u,n)}const FR={kernelName:On,backendName:"webgl",kernelFunc:OR},IR={kernelName:_t,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,crops:o}=r;R(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const a=i.reduce(((t,e)=>t*e)),u=yc(s.shape,i,a),c=gc(u.length,i.length),l=xc(s.shape,i,a),h=wc(o,i.length),d=vc(l,o,i.length),f=[],p=CA({inputs:{x:s},backend:n,attrs:{shape:u}}),m=MA({inputs:{x:p},backend:n,attrs:{perm:c}}),b=CA({inputs:{x:m},backend:n,attrs:{shape:l}}),y=OR({inputs:{x:b},backend:n,attrs:{begin:h,size:d}});return f.push(p),f.push(m),f.push(b),f.forEach((t=>n.disposeIntermediateTensorInfo(t))),y}};const _R={kernelName:Mt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:o}=r,a=n.readSync(s.dataId),u=n.readSync(i.dataId),c=fS(a,u,i.dtype,i.shape,o);return n.makeTensorInfo([o],i.dtype,c)}},MR=bA({opSnippet:"return float(a != b);",dtype:"bool"}),DR={kernelName:rn,backendName:"webgl",kernelFunc:MR};function LR(t){const{inputs:e,backend:n}=t,{input:r}=e;return iA({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const PR={kernelName:bn,backendName:"webgl",kernelFunc:LR};const zR={kernelName:Dt,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===i.dtype)return iA({inputs:{x:i},backend:r});const e=pa(i.shape),n=t({inputs:{x:i},backend:r,attrs:{dtype:"float32"}}),s=aA({inputs:{real:n,imag:e},backend:r});return e.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===i.dtype){const e=LR({inputs:{input:i},backend:r}),n=t({inputs:{x:e},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(e),n}if(!G(i.dtype,o)){const t=iA({inputs:{x:i},backend:r});return{dataId:t.dataId,shape:t.shape,dtype:o}}if("int32"===o)return function(t,e){const n=new KS(t.shape,"return float(int(x));"),r=e.runWebGLProgram(n,[t],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(i,r);if("bool"===o){const t=r.makeTensorInfo([],"bool",W("bool",1)),e=MR({inputs:{a:i,b:t},backend:r});return r.disposeIntermediateTensorInfo(t),e}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},VR="return ceil(x);",BR=mA({opSnippet:VR,packedOpSnippet:VR,cpuKernelImpl:mS}),WR={kernelName:Lt,backendName:"webgl",kernelFunc:BR};class UR{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class GR{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}const jR={kernelName:Pt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{clipValueMin:i,clipValueMax:o}=r;let a;a=lt().getBool("WEBGL_PACK_CLIP")?new GR(s.shape):new UR(s.shape);const u=a.getCustomSetupFunc(i,o);return n.runWebGLProgram(a,[s],s.dtype,u)}};class HR{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function qR(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}const XR={kernelName:Vt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e,s=n.texData.get(r.dataId),i=new HR(r.shape),o=[qR(r,s.complexTensorInfos.real),qR(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(i,o,o[0].dtype)}};class KR{constructor(t){this.outputShape=[],this.outputShape=fc(t,1),this.variableNames=t.map(((t,e)=>`T${e}`));const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class JR{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=fc(t,e);const n=this.outputShape,r=n.length,s=uS(r),i=WS("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map(((t,e)=>`T${e}`));const a=new Array(t.length-1);a[0]=t[0][e];for(let n=1;n<a.length;n++)a[n]=a[n-1]+t[n][e];const u=o[e],c=o.slice(-2),l=o.join();let h=`if (${u} < ${a[0]}) {\n        return getChannel(\n            getT0(${l}), vec2(${c.join()}));\n        }`;for(let t=1;t<a.length;t++){const e=a[t-1];h+=`\n        if (${u} < ${a[t]}  && ${u} >= ${a[t-1]}) {\n          return getChannel(\n            getT${t}(${YR(o,u,e)}),\n            vec2(${YR(c,u,e)}));\n        }`}const d=a.length,f=a[a.length-1];h+=`\n        return getChannel(\n          getT${d}(${YR(o,u,f)}),\n          vec2(${YR(c,u,f)}));`,this.userCode=`\n      float getValue(${o.map((t=>"int "+t))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[r-1]} = ${i[r-1]} + 1;\n        if (${i[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[r-2]} = ${i[r-2]} + 1;\n        if (${i[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[r-1]} = ${i[r-1]} - 1;\n        if (${i[r-2]} < ${n[r-2]} &&\n            ${i[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function YR(t,e,n){const r=t.indexOf(e);return t.map(((t,e)=>e===r?`${t} - ${n}`:t)).join()}function ZR(t){const{inputs:e,backend:n}=t,{input:r}=e;return iA({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const QR={kernelName:Se,backendName:"webgl",kernelFunc:ZR};function tT(t,e,n){const r=t[0].dtype;if("complex64"===r){const r=t.map((t=>LR({inputs:{input:t},backend:n}))),s=t.map((t=>ZR({inputs:{input:t},backend:n}))),i=tT(r,e,n),o=tT(s,e,n),a=aA({inputs:{real:i,imag:o},backend:n});return r.forEach((t=>n.disposeIntermediateTensorInfo(t))),s.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),a}if("string"===r){const{tensors2D:s,outShape:i}=eT(t,e,n),o=s.map((t=>({vals:n.readSync(t.dataId),shape:t.shape}))),a=1===s[0].shape[0],u=bS(o,i,r,a),c=fc(t.map((t=>t.shape)),e),l=n.makeTensorInfo(c,r,u);return s.forEach((t=>n.disposeIntermediateTensorInfo(t))),l}if(t.length>lt().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(t.length/2),s=tT(t.slice(0,r),e,n),i=tT(t.slice(r),e,n),o=tT([s,i],e,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),o}if(lt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){const s=new JR(t.map((t=>t.shape)),e);return n.runWebGLProgram(s,t,r)}const{tensors2D:s,outShape:i}=eT(t,e,n),o=new KR(s.map((t=>t.shape))),a=n.runWebGLProgram(o,s,r);s.forEach((t=>n.disposeIntermediateTensorInfo(t)));const u=CA({inputs:{x:a},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(a),u}function eT(t,e,n){const r=fc(t.map((t=>t.shape)),e);return{tensors2D:t.map((t=>CA({inputs:{x:t},attrs:{shape:[-1,I(t.shape.slice(e))]},backend:n}))),outShape:r}}function nT(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,i=V(s,e[0].shape)[0],o=fc(e.map((t=>t.shape)),i);if(0===I(o))return n.makeTensorInfo(o,e[0].dtype,[]);const a=e.filter((t=>I(t.shape)>0));if(1===a.length)return iA({inputs:{x:a[0]},backend:n});return dc(a.map((t=>t.shape)),i),tT(a,i,n)}const rT={kernelName:Bt,backendName:"webgl",kernelFunc:nT};class sT{constructor(t,e=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const i=t.padInfo.top,o=t.padInfo.left,a=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,l=t.dilationWidth,h=t.filterHeight,d=t.filterWidth,f=4*Math.floor(t.inChannels/4),p=t.inChannels%4,m="channelsLast"===t.dataFormat,b=m?1:2,y=m?2:3,g=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${a}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${g}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${b}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class iT{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,i=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,d=t.filterWidth,f=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${i}, ${o});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${l}; wF++) {\n          int xF = xFCorner + wF * ${a};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===p}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===p}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===p}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oT{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:i,strideHeight:o,padInfo:a,outWidth:u,dilationWidth:c,dilationHeight:l,dataFormat:h}=n,{left:d,top:f}=a,p=s*r,m=TE(),b="channelsLast"===h,y=b?0:1,g=b?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${o} - ${f};\n            d0 = offsetY + ${l} * (pos / ${p});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${i}. - ${d}.);\n              d1 = offsetX + ${c} * (int(mod(float(pos), ${p}.) / ${s}.));\n\n              if(d1 < ${e[g]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${b}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function aT({x:t,filter:e,convInfo:n,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:a=null}){const u=t.shape,c=r.texData.get(t.dataId),l=n.inChannels,h=u[0]*u[1]*u[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let p;const m=[],b=(1===h||1===d)&&l>1e3,y=u[2]%2!=0&&!!c.isPacked;if(!b&&lt().getBool("WEBGL_LAZILY_UNPACK")&&lt().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&y){const l=f?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),h={dataId:t.dataId,shape:[1,l,n.inChannels],dtype:t.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,R(vE(c.shape,h.shape),(()=>`packed reshape ${c.shape} to ${h.shape} isn't free`));const b=CA({inputs:{x:e},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(b);const y=LA({a:h,b,backend:r,transposeA:false,transposeB:false,bias:s,activation:a,preluActivationWeights:i,leakyreluAlpha:o}),g=r.texData.get(y.dataId);R(g.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,g.shape=n.outShape,p=iA({inputs:{x:y},backend:r}),p.shape=n.outShape,m.push(y)}else{const c=CA({inputs:{x:t},backend:r,attrs:{shape:[1,f?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),l=CA({inputs:{x:e},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=LA({a:c,b:l,transposeA:false,transposeB:false,backend:r,bias:s,activation:a,preluActivationWeights:i,leakyreluAlpha:o});p=CA({inputs:{x:h},backend:r,attrs:{shape:n.outShape}}),m.push(c),m.push(l),m.push(h)}for(const t of m)r.disposeIntermediateTensorInfo(t);return p}function uT({x:t,filter:e,convInfo:n,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:a=null}){const{filterWidth:u,filterHeight:c,inChannels:l,outWidth:h,outHeight:d,dataFormat:f}=n,p="channelsLast"===f,m=u*c*l,b=d*h,y=[m,b],g=[],x=CA({inputs:{x:t},backend:r,attrs:{shape:t.shape.slice(1)}}),w=CA({inputs:{x:e},backend:r,attrs:{shape:[1,m,I(e.shape)/m]}});g.push(x),g.push(w);const v=new oT(y,x.shape,n),k=r.runWebGLProgram(v,[x],"float32"),$=CA({inputs:{x:k},backend:r,attrs:{shape:[1,y[0],y[1]]}});g.push(k),g.push($);const N=null!=s,C=null!=i,E="leakyrelu"===a,S=a?yA(a,!0):null,A=new gA($.shape,w.shape,[1,b,n.outChannels],!0,!1,N,S,C,E),R=[$,w];if(s&&R.push(s),C&&R.push(i),E){const t=r.makeTensorInfo([],"float32",Nr(o,"float32"));R.push(t),g.push(t)}const T=r.runWebGLProgram(A,R,"float32"),O=CA({inputs:{x:T},backend:r,attrs:{shape:p?[1,d,h,n.outChannels]:[1,n.outChannels,d,h]}});g.push(T);for(const t of g)r.disposeIntermediateTensorInfo(t);return O}const cT={kernelName:Wt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:o,pad:a,dataFormat:u,dilations:c,dimRoundingMode:l}=r,h=so(u),d=Ki(s.shape,i.shape,o,c,a,l,!1,h);let f;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(lt().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])f=uT({x:s,filter:i,convInfo:d,backend:n});else{const t=new sT(d);f=n.runWebGLProgram(t,[s,i],"float32")}else f=aT({x:s,filter:i,convInfo:d,backend:n});const p=CA({inputs:{x:f},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(f),p}};class lT{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${i}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hT{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,i="channelsLast"===t.dataFormat,o=e-1-t.padInfo.top,a=n-1-t.padInfo.left,u=i?1:2,c=i?2:3,l=i?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${l}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dT{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,i=t.padInfo.top,o=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${i};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fT{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,i=t.strideHeight,o=t.strideWidth,a=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${a}, ${u}, ${c});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const pT={kernelName:Ut,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:o,pad:a,dataFormat:u,dimRoundingMode:c,filterShape:l}=r,h=so(u),d=Ki(s.shape,l,o,1,a,c,!1,h),f=new lT(d);return n.runWebGLProgram(f,[s,i],"float32")}};const mT={kernelName:Gt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{inputShape:o,strides:a,pad:u,dataFormat:c,dimRoundingMode:l}=r,h=so(c),d=Ki(o,i.shape,a,1,u,l,!1,h),f=new hT(d);return n.runWebGLProgram(f,[s,i],"float32")}};const bT={kernelName:jt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:o,pad:a,dilations:u}=r,c=Ji(s.shape,i.shape,o,u,a),l=new iT(c);return n.runWebGLProgram(l,[s,i],"float32")}};const yT={kernelName:Ht,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:o,pad:a,filterShape:u}=r,c=Ji(s.shape,u,o,1,a),l=new dT(c);return n.runWebGLProgram(l,[s,i],"float32")}};const gT={kernelName:qt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{pad:o,strides:a,inputShape:u}=r,c=Ji(u,i.shape,a,1,o),l=new fT(c);return n.runWebGLProgram(l,[s,i],"float32")}},xT=mA({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),wT={kernelName:Xt,backendName:"webgl",kernelFunc:xT},vT=mA({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),kT={kernelName:Kt,backendName:"webgl",kernelFunc:vT};class $T{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[i,o,a,u]=t,[c]=e,[l,h]=n;this.outputShape=[c,l,h,u];const d="bilinear"===r?1:0,[f,p]=[o-1+".0",a-1+".0"],[m,b,y]=l>1?[""+(o-1)/(l-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[g,x,w]=h>1?[""+(a-1)/(h-1),"(x2-x1) * width_ratio",`x1*${p} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${p}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${g});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${b};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${p} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const NT={kernelName:Yt,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{image:s,boxes:i,boxInd:o}=e,{cropSize:a,method:u,extrapolationValue:c}=r,l=new $T(s.shape,i.shape,a,u,c);return n.runWebGLProgram(l,[s,i,o],"float32")}};class CT{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${ET(r,"coords")})`,i=t[t.length-1];let o="",a="";e?(o=n?"end != "+(i-1):"end != 0",a=n?"end + 1":"end - 1"):(o=n?`end + pow2 < ${i}`:"end >= pow2",a=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${uS(r)} coords = getOutputCoords();\n        int end = ${ST(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${a};\n          ${ST(r,"coords")} = idx;\n          val += getX(${ET(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function ET(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function ST(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.y`;if(3===t)return`${e}.z`;if(4===t)return`${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}const AT={kernelName:Jt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,exclusive:o,reverse:a}=r,u=s.shape.length,c=oa([i],u);let l=s;null!=c&&(l=MA({inputs:{x:s},backend:n,attrs:{perm:c}}));const h=ua(1,u)[0];if(h!==u-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${s.shape.length-1} but got axis=${i}`);const d=s.shape[h];let f=iA({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(d))-1;t++){const e=new CT(l.shape,!1,a),r=e.getCustomSetupFunc(t),s=f;f=n.runWebGLProgram(e,[f],f.dtype,r),n.disposeIntermediateTensorInfo(s)}if(o){const t=new CT(l.shape,o,a),e=f;f=n.runWebGLProgram(t,[f],f.dtype),n.disposeIntermediateTensorInfo(e)}if(null!=c){const t=MA({inputs:{x:f},backend:n,attrs:{perm:aa(c)}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(l),t}return f}};const RT={kernelName:Zt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:o,binaryOutput:a}=r;if(1===s.shape.length){const t=n.readSync(s.dataId),e=n.readSync(i.dataId),r=fS(t,e,i.dtype,i.shape,o);return n.makeTensorInfo([o],i.dtype,r)}if(2===s.shape.length){const t=n.bufferSync(s),e=n.bufferSync(i),r=pS(t,e,o,a);return n.makeTensorInfo(r.shape,i.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class TT{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const OT={kernelName:Qt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockSize:i,dataFormat:o}=r;R(i>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`));const a=s.shape[0],u="NHWC"===o?s.shape[1]:s.shape[2],c="NHWC"===o?s.shape[2]:s.shape[3],l="NHWC"===o?s.shape[3]:s.shape[1],h=u*i,d=c*i,f=l/(i*i),p=new TT("NHWC"===o?[a,h,d,f]:[a,f,h,d],i,o);return n.runWebGLProgram(p,[s],s.dtype)}};class FT{constructor(t,e=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const i=t.inHeight,o=t.inWidth,a=t.padInfo.top,u=t.padInfo.left,c=t.strideHeight,l=t.strideWidth,h=t.dilationHeight,d=t.dilationWidth,f=t.filterHeight,p=t.filterWidth,m=t.outChannels/t.inChannels;let b="",y="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${l});\n      const ivec2 pads = ivec2(${a}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${f}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${i}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${d};\n\n            if (xC < 0 || xC >= ${o}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${g}\n        ${y}\n        setOutput(result);\n      }\n    `}}class IT{constructor(t,e=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const i=t.inHeight,o=t.inWidth,a=t.padInfo.top,u=t.padInfo.left,c=t.strideHeight,l=t.strideWidth,h=t.dilationHeight,d=t.dilationWidth,f=t.filterHeight,p=t.filterWidth,m=p;let b="int xR; int xC; int xCOffset;";for(let t=0;t<f;t++)for(let e=0;e<p;e++)b+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<f;t++)for(let e=0;e<m;e++){const n=2*e;if(b+=`\n          xR = xRCorner + ${t*h};\n          xC = xCCorner + ${n*d};\n        `,1===l){if(n<p&&(b+=u%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${i} && xC >= 0 && xC < ${o}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<p)){const e=u%2==0?A(d):d;d%2==0&&u%2==1||d%2!=0&&u%2!=1?(b+=`\n                  xCOffset = xC + ${u%2} + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(b+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${i} &&\n                      xCOffset >= 0 && xCOffset < ${o}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),b+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):b+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<p&&(b+=`\n              if(xR >= 0 && xR < ${i}) {\n            `,u%2==1?(b+=`\n                xCOffset = xC + 1 - ${l};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${o}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<p&&(b+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${l};\n                  if(xCOffset >= 0 && xCOffset < ${o}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(b+=`\n                if(xC >= 0 && xC < ${o}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${l};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<p&&(b+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),b+="}");n<p&&(b+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<p&&(b+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<f;t++)for(let e=0;e<p;e++)b+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let y="",g="";n&&(y=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,g="result = activation(result);");const x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${c}, ${l});\n      const ivec2 pads = ivec2(${a}, ${u});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${b}\n\n        vec4 result = dotProd;\n        ${x}\n        ${g}\n        setOutput(result);\n      }\n    `}}const _T={kernelName:te,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:o,pad:a,dilations:u,dimRoundingMode:c}=r;let l=u;null==l&&(l=[1,1]),R(ro(o,l),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${l}'`));const h=Ki(s.shape,i.shape,o,l,a,c,!0);let d;return d=lt().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new IT(h):new FT(h),n.runWebGLProgram(d,[s,i],"float32")}};class MT{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${i} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DT{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${a}; dm++) {\n              int d2 = d1 * ${a} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const LT={kernelName:ee,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:o,dilations:a,pad:u,dimRoundingMode:c,filterShape:l}=r,h=Ki(s.shape,l,o,a,u,c,!0),d=new MT(h);return n.runWebGLProgram(d,[s,i],"float32")}};const PT={kernelName:ne,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{strides:o,dilations:a,pad:u,dimRoundingMode:c,inputShape:l}=r,h=Ki(l,i.shape,o,a,u,c,!0),d=new DT(h);return n.runWebGLProgram(d,[s,i],"float32")}};class zT{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const VT={kernelName:re,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e,s=[...r.shape,...r.shape],i=I(r.shape),o=CA({inputs:{x:r},backend:n,attrs:{shape:[i]}}),a=new zT(i),u=n.runWebGLProgram(a,[o],o.dtype),c=CA({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),c}};class BT{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:n,padInfo:r,strideHeight:s,strideWidth:i,filterHeight:o,filterWidth:a,dilationHeight:u,dilationWidth:c}=t,{top:l,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${i});\n      const ivec2 pads = ivec2(${l}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${a}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const WT={kernelName:se,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:o,pad:a,dilations:u}=r,c=Hi(s.shape,i.shape,o,a,"NHWC",u);let l;const h=new BT(c);l=n.runWebGLProgram(h,[s,i],"float32");const d=CA({inputs:{x:l},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(l),d}},UT=mA({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),GT={kernelName:ue,backendName:"webgl",kernelFunc:UT},jT={kernelName:ce,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n}=t,{dy:r,y:s}=e,i=lt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new sA("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new rA("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(i,[r,s],r.dtype)}},HT=bA({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),qT={kernelName:he,backendName:"webgl",kernelFunc:HT},XT=mA({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Nc};\n  float a1 = ${Cc};\n  float a2 = ${Ec};\n  float a3 = ${Sc};\n  float a4 = ${Ac};\n  float a5 = ${Rc};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),KT={kernelName:le,backendName:"webgl",kernelFunc:XT},JT="return exp(x);",YT=mA({opSnippet:JT,packedOpSnippet:JT,cpuKernelImpl:yS}),ZT={kernelName:de,backendName:"webgl",kernelFunc:YT};function QT(t){const{inputs:e,attrs:n,backend:r}=t,{dim:s}=n,{input:i}=e,o=i.shape.length,a=i.shape.slice();let u=s;return s<0&&(R(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+s+1),a.splice(u,0,1),CA({inputs:{x:i},backend:r,attrs:{shape:a}})}const tO={kernelName:fe,backendName:"webgl",kernelFunc:QT},eO="return exp(x) - 1.0;",nO=mA({opSnippet:eO,packedOpSnippet:eO,cpuKernelImpl:gS}),rO={kernelName:pe,backendName:"webgl",kernelFunc:nO};class sO{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=n?`${r}.0`:"1.0";let o;if("real"===t)o="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${i};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function iO(t,e,n){const r=n.texData.get(t.dataId),s=I(t.shape),i=t.shape[t.shape.length-1],o=CA({inputs:{x:t},backend:n,attrs:{shape:[s/i,i]}}).shape,a=new sO("real",o,e),u=new sO("imag",o,e),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:o},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:o}],l=n.runWebGLProgram(a,c,"float32"),h=n.runWebGLProgram(u,c,"float32"),d=aA({inputs:{real:l,imag:h},backend:n});n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h);const f=CA({inputs:{x:d},backend:n,attrs:{shape:t.shape}});return n.disposeIntermediateTensorInfo(f),f}const oO={kernelName:me,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return iO(r,!1,n)}};class aO{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}function uO(t){const{backend:e,attrs:n}=t,{shape:r,value:s}=n;let{dtype:i}=n;if(i=i||K(s),"string"===i){const t=U(i,I(r));return t.fill(s),e.makeTensorInfo(r,i,t)}{const t=new aO(r,s),n=t.getCustomSetupFunc(s);return e.runWebGLProgram(t,[],i,n)}}const cO={kernelName:be,backendName:"webgl",kernelFunc:uO};class lO{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const hO={kernelName:ye,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,r=e,s=new lO(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},dO="return floor(x);",fO=mA({opSnippet:dO,packedOpSnippet:dO,cpuKernelImpl:xS}),pO={kernelName:ge,backendName:"webgl",kernelFunc:fO},mO=bA({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),bO={kernelName:xe,backendName:"webgl",kernelFunc:mO};class yO{constructor(t){this.variableNames=["A"];const e=TE(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class gO{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=TE(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const xO={kernelName:rr,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:i}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,a="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,u="undefined"!=typeof ImageBitmap&&s instanceof ImageBitmap,[c,l]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],h=[l,c],d=[l,c,i];(a||o||u)&&(null==wO&&(wO=document.createElement("canvas").getContext("2d")),wO.canvas.width=c,wO.canvas.height=l,wO.drawImage(s,0,0,c,l),s=wO.canvas);const f=n.makeTensorInfo(h,"int32");n.texData.get(f.dataId).usage=ZC.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(f.dataId),s);const p=lt().getBool("WEBGL_PACK")?new gO(d):new yO(d),m=n.runWebGLProgram(p,[f],"int32");return n.disposeData(f.dataId),m}};let wO;const vO={kernelName:or,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:u,pad:c,dataFormat:l,dilations:h,dimRoundingMode:d,activation:f,leakyreluAlpha:p}=r,m=so(l),b=Ki(s.shape,i.shape,u,h,c,d,!1,m);let y;const g=[];if(1!==b.filterHeight||1!==b.filterWidth||1!==b.dilationHeight||1!==b.dilationWidth||1!==b.strideHeight||1!==b.strideWidth||"SAME"!==b.padInfo.type&&"VALID"!==b.padInfo.type)if(lt().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])y=uT({x:s,filter:i,convInfo:b,backend:n,bias:o,activation:f,preluActivationWeights:a,leakyreluAlpha:p});else{const t=null!=o,e=null!=a,r="leakyrelu"===f,u=f?yA(f,!1):null,c=new sT(b,t,u,e,r),l=[s,i];if(o&&l.push(o),a&&l.push(a),r){const t=n.makeTensorInfo([],"float32",Nr(p,"float32"));l.push(t),g.push(t)}y=n.runWebGLProgram(c,l,"float32")}else y=aT({x:s,filter:i,convInfo:b,backend:n,bias:o,activation:f,preluActivationWeights:a,leakyreluAlpha:p});const x=CA({inputs:{x:y},backend:n,attrs:{shape:b.outShape}});return g.push(y),g.forEach((t=>n.disposeIntermediateTensorInfo(t))),x}};const kO={kernelName:ar,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:u,pad:c,dilations:l,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,p=[];let m=l;null==m&&(m=[1,1]),R(ro(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const b=Ki(s.shape,i.shape,u,m,c,h,!0),y=lt().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels==1,g=d?yA(d,y):null,x=[s,i],w=null!=o,v=null!=a,k="leakyrelu"===d;if(w&&x.push(o),v&&x.push(a),k){const t=n.makeTensorInfo([],"float32",Nr(f,"float32"));x.push(t),p.push(t)}let $;$=y?new IT(b,w,g,v,k):new FT(b,w,g,v,k);const N=n.runWebGLProgram($,x,"float32");return p.forEach((t=>n.disposeIntermediateTensorInfo(t))),N}};class $O{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=uS(e.length),s=uS(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${i};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const NO={kernelName:ke,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{params:r,indices:s}=e,i=s.shape,o=i[i.length-1],[a,u,c,l]=oi(r,s),h=CA({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),d=CA({inputs:{x:r},backend:n,attrs:{shape:[I(r.shape)/c,c]}}),f=new $O(o,l,[u,c]),p=n.runWebGLProgram(f,[d,h],d.dtype),m=CA({inputs:{x:p},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),m}};class CO{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const n=uS(this.rank),r=function(t,e){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let e=0;e<t.length;e++)2===e?r.push("int(getIndices(resRC.x, resRC.z))"):r.push(`${n[e]}`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}const EO={kernelName:ve,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,indices:i}=e,{axis:o,batchDims:a}=r,u=Uc(s,i,V(o,s.shape)[0],a),c=I(i.shape),l=[],h=CA({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=CA({inputs:{x:i},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});l.push(h),l.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([s,i])||"string"===s.dtype){const t=n.bufferSync(d),e=n.bufferSync(h),r=wS(e,t,f);return l.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(u.outputShape,r.dtype,r.values)}const p=new CO(h.shape,f),m=n.runWebGLProgram(p,[h,d],h.dtype);l.push(m);const b=CA({inputs:{x:m},backend:n,attrs:{shape:u.outputShape}});return l.forEach((t=>n.disposeIntermediateTensorInfo(t))),b}},SO=bA({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:vS,dtype:"bool"}),AO={kernelName:$e,backendName:"webgl",kernelFunc:SO},RO=bA({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),TO={kernelName:Ne,backendName:"webgl",kernelFunc:RO};const OO={kernelName:Ee,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return iO(r,!0,n)}},FO=mA({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),IO={kernelName:Ae,backendName:"webgl",kernelFunc:FO},_O=mA({opSnippet:"return float(isinf(x));",dtype:"bool"}),MO={kernelName:Re,backendName:"webgl",kernelFunc:_O},DO=mA({opSnippet:"return float(isnan(x));",dtype:"bool"}),LO={kernelName:Te,backendName:"webgl",kernelFunc:DO},PO=bA({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:kS,dtype:"bool"}),zO={kernelName:Fe,backendName:"webgl",kernelFunc:PO},VO=bA({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),BO={kernelName:Ie,backendName:"webgl",kernelFunc:VO};const WO={kernelName:_e,backendName:"webgl",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:r,stop:s,num:i}=n,o=$S(r,s,i);return e.makeTensorInfo([o.length],"float32",o)}},UO=mA({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:NS}),GO={kernelName:Me,backendName:"webgl",kernelFunc:UO},jO=mA({opSnippet:"return log(1.0 + x);"}),HO={kernelName:De,backendName:"webgl",kernelFunc:jO},qO=bA({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),XO={kernelName:Le,backendName:"webgl",kernelFunc:qO},KO=mA({opSnippet:"return float(!(x >= 1.0));"}),JO={kernelName:Pe,backendName:"webgl",kernelFunc:KO},YO=bA({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),ZO={kernelName:ze,backendName:"webgl",kernelFunc:YO};class QO{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const i=e,o=t[3]-1;let a;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;a=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${a};\n        setOutput(val);\n      }\n    `}}class tF{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=e,o=t[3]-1;let a;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;a=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${a};\n        setOutput(result);\n      }\n    `}}const eF={kernelName:Ve,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{depthRadius:i,bias:o,alpha:a,beta:u}=r,c=lt().getBool("WEBGL_PACK_NORMALIZATION")?new tF(s.shape,i,o,a,u):new QO(s.shape,i,o,a,u);return n.runWebGLProgram(c,[s],s.dtype)}};class nF{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const rF={kernelName:Be,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s,y:i,dy:o}=e,{depthRadius:a,bias:u,alpha:c,beta:l}=r,h=new nF(s.shape,a,u,c,l);return n.runWebGLProgram(h,[s,i,o],s.dtype)}};function sF(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reductionIndices:i,keepDims:o}=r,a=s.shape.length,u=V(i,s.shape);let c=u;const l=oa(c,a),h=null!=l,d=n.shouldExecuteOnCPU([s]);let f=s;if(h){if(d){const t=n.texData.get(f.dataId).values,e=new Array(a);for(let t=0;t<e.length;t++)e[t]=s.shape[l[t]];const r=zS(t,s.shape,s.dtype,l,e);f=n.makeTensorInfo(e,s.dtype);n.texData.get(f.dataId).values=r}else f=FA(s,l,n);c=ua(c.length,a)}ia("max",c,a);const[p,m]=ra(f.shape,c);let b,y=p;if(o&&(y=sa(p,u)),d){const t=n.texData.get(f.dataId).values,e=CS(t,I(m),y,s.dtype);b=n.makeTensorInfo(y,s.dtype);n.texData.get(b.dataId).values=e}else b=function(t,e,n,r){const s=I(e),i=CA({inputs:{x:t},attrs:{shape:[I(t.shape)/s,s]},backend:r}),o=RA(i,t.dtype,"max",r),a=CA({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),a}(f,m,y,n);return h&&n.disposeIntermediateTensorInfo(f),b}const iF={kernelName:We,backendName:"webgl",kernelFunc:sF},oF=bA({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:ES}),aF={kernelName:Ue,backendName:"webgl",kernelFunc:oF};const uF={kernelName:Ge,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;AE(s,"maxPool");const{filterSize:i,strides:o,pad:a,dimRoundingMode:u}=r;R(ro(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=qi(s.shape,i,o,1,a,u);if(1===c.filterWidth&&1===c.filterHeight&&_(c.inShape,c.outShape))return iA({inputs:{x:s},backend:n});const l=new bR(c,"max",!1);return n.runWebGLProgram(l,[s],s.dtype)}};const cF={kernelName:He,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:o,pad:a,dataFormat:u,dimRoundingMode:c}=r,l=Xi(s.shape,i,o,[1,1,1],a,c,u),h=new yR(l,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class lF{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,i=t.effectiveFilterWidth,o=s-1-t.padInfo.top,a=i-1-t.padInfo.left,u=s*i-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hF{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,i=t.dilationHeight,o=t.dilationWidth,a=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=a-1-t.padInfo.front,h=u-1-t.padInfo.top,d=c-1-t.padInfo.left,f=a*u*c-1;this.userCode=`\n      const ivec3 pads = ivec3(${l}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${a};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${i}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${f} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const dF={kernelName:qe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,o=i,{filterSize:a,strides:u,pad:c,dimRoundingMode:l}=r,h=Xi(o.shape,a,u,[1,1,1],c,l),d=new yR(h,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),p=new hF(h),m=n.runWebGLProgram(p,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),m}};const fF={kernelName:je,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i,output:o}=e,a=i;AE([i,o],"maxPoolGrad");const{filterSize:u,strides:c,pad:l,dimRoundingMode:h}=r,d=qi(a.shape,u,c,1,l,h),f=new bR(d,"max",!0),p=n.runWebGLProgram(f,[a],a.dtype),m=new lF(d),b=n.runWebGLProgram(m,[s,p],a.dtype);return n.disposeIntermediateTensorInfo(p),b}};const pF={kernelName:Xe,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:i,pad:o,includeBatchInIndex:a}=e,u=n;R(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const c=[1,1];R(ro(i,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const l=qi(r.shape,s,i,c,o),[h,d]=function(t,e,n,r){let s=new bR(n,"max",!1);const i=r.runWebGLProgram(s,[t],"float32");return s=new bR(n,"max",!0,!0,e),[i,r.runWebGLProgram(s,[t],"float32")]}(r,a,l,u);return[h,d]}};const mF={kernelName:Ke,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{keepDims:s,axis:i}=e,o=n,a=r.shape.length,u=V(i,r.shape);let c=u;const l=oa(c,a),h=null!=l,d=o.shouldExecuteOnCPU([r]),f=[];let p=r;if(h){if(d){const t=o.texData.get(p.dataId).values,e=new Array(a);for(let t=0;t<e.length;t++)e[t]=r.shape[l[t]];const n=zS(t,r.shape,r.dtype,l,e);p=o.makeTensorInfo(e,r.dtype);o.texData.get(p.dataId).values=n}else p=FA(r,l,o);f.push(p),c=ua(c.length,a)}ia("sum",c,a);const[m,b]=ra(p.shape,c);let y=m;s&&(y=sa(m,u));const g=function(t,e,n,r){const s=I(e),i=CA({inputs:{x:t},attrs:{shape:[I(t.shape)/s,s]},backend:r}),o=RA(i,"float32","mean",r),a=CA({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),a}(p,b,y,o);for(const t of f)o.disposeIntermediateTensorInfo(t);return g}};const bF={kernelName:Je,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,u=V(i,s.shape);let c=u;const l=oa(c,a);let h=s;null!=l&&(h=MA({inputs:{x:s},backend:n,attrs:{perm:l}}),c=ua(c.length,s.shape.length)),ia("min",c,a);const[d,f]=ra(h.shape,c),p=CA({inputs:{x:h},backend:n,attrs:{shape:[-1,I(f)]}}),m=RA(p,p.dtype,"min",n);let b;if(o){b=CA({inputs:{x:m},backend:n,attrs:{shape:sa(d,u)}})}else b=CA({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),null!=l&&n.disposeIntermediateTensorInfo(h),b}},yF=bA({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:SS}),gF={kernelName:Ye,backendName:"webgl",kernelFunc:yF};class xF{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=uS(r),i=e.map((t=>t[0])).join(","),o=e.map(((e,n)=>e[0]+t[n])).join(","),a=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${i});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${a}));\n      }\n    `:`\n        int start = ${i};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class wF{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=uS(r),i=e.map((t=>t[0])).join(","),o=e.map(((e,n)=>e[0]+t[n])).join(","),a=WS("rc",r),u=WS("source",r),c=`${a[r-1]} < ${this.outputShape[r-1]}`,l=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===r){const t=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${s} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${u.join()}), ${l});\n        ${a[r-1]} += 1;\n        if(${c}) {\n          ${t}\n          result[1] = getChannel(getX(${u.join()}), ${l});\n        }\n      `}else{const t=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${s} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${u.join()}), ${l});\n        ${a[r-1]} += 1;\n        if(${c}) {\n          ${t}\n          result[1] = getChannel(getX(${u.join()}), ${l});\n        }\n        rc = outputLoc;\n        ${a[r-2]} += 1;\n        if(${a[r-2]} < ${this.outputShape[r-2]}) {\n          ${t}\n          result[2] = getChannel(getX(${u.join()}), ${l});\n          ${a[r-1]} += 1;\n          if(${c}) {\n            ${t}\n            result[3] = getChannel(getX(${u.join()}), ${l});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${i});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const vF={kernelName:Ze,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r}=t,{paddings:s,mode:i}=n,o=lt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wF(r.shape,s,i):new xF(r.shape,s,i);return e.runWebGLProgram(o,[r],r.dtype)}},kF=bA({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),$F={kernelName:Qe,backendName:"webgl",kernelFunc:kF};class NF{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}const CF=bA({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),EF={kernelName:ae,backendName:"webgl",kernelFunc:CF},SF="return a - b;",AF=bA({opSnippet:SF,packedOpSnippet:SF,supportsComplex:!0,cpuKernelImpl:DS}),RF={kernelName:Gn,backendName:"webgl",kernelFunc:AF};function TF(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{dim:i}=r,o=V([i],s.shape),a=sF({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=sa(a.shape,o),c=CA({inputs:{x:a},backend:n,attrs:{shape:u}}),l=AF({inputs:{a:s,b:c},backend:n}),h=YT({inputs:{x:l},backend:n}),d=IA({inputs:{x:h},backend:n,attrs:{axis:o,keepDims:!1}}),f=CA({inputs:{x:d},backend:n,attrs:{shape:u}}),p=CF({inputs:{a:h,b:f},backend:n});return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),p}const OF={kernelName:Bn,backendName:"webgl",kernelFunc:TF};const FF={kernelName:tn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{numSamples:i,seed:o,normalized:a}=r,u=a?s:TF({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),c=u.shape[0],l=u.shape[1],h=new NF(c,l,i),d=h.getCustomSetupFunc(o),f=n.runWebGLProgram(h,[u],"int32",d);return a||n.disposeIntermediateTensorInfo(u),f}},IF="return -x;";const _F={kernelName:nn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;if(n.shouldExecuteOnCPU([r])){const t=n.texData.get(r.dataId),[e,s]=RS(t.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,e)}let s;return s=lt().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new ZS(r.shape,IF):new KS(r.shape,IF),n.runWebGLProgram(s,[r],r.dtype)}},MF=Cu;const DF={kernelName:sn,backendName:"webgl",kernelFunc:function(t){Tc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:u}=r,c=n.readSync(s.dataId),l=n.readSync(i.dataId),{selectedIndices:h}=MF(c,l,o,a,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},LF=Eu;const PF={kernelName:on,backendName:"webgl",kernelFunc:function(t){Tc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:u,padToMaxOutputSize:c}=r,l=n.readSync(s.dataId),h=n.readSync(i.dataId),{selectedIndices:d,validOutputs:f}=LF(l,h,o,a,u,c);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},zF=Su;const VF={kernelName:an,backendName:"webgl",kernelFunc:function(t){Tc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:o,iouThreshold:a,scoreThreshold:u,softNmsSigma:c}=r,l=n.readSync(s.dataId),h=n.readSync(i.dataId),d=o,f=a,p=u,m=c,{selectedIndices:b,selectedScores:y}=zF(l,h,d,f,p,m);return[n.makeTensorInfo([b.length],"int32",new Int32Array(b)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class BF{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const WF={kernelName:cn,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{indices:s}=e,{depth:i,onValue:o,offValue:a}=r,u=I(s.shape),c=new BF(u,i,o,a),l=CA({inputs:{x:s},backend:n,attrs:{shape:[u]}}),h=n.runWebGLProgram(c,[l],s.dtype);n.disposeIntermediateTensorInfo(l);const d=CA({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,i]}});return n.disposeIntermediateTensorInfo(h),d}};function UF(t){const{inputs:e,backend:n}=t,{x:r}=e;if("complex64"===r.dtype){const t=LR({inputs:{input:r},backend:n}),e=UF({inputs:{x:t},backend:n}),s=ZR({inputs:{input:r},backend:n}),i=UF({inputs:{x:s},backend:n}),o=aA({inputs:{real:e,imag:i},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),o}return uO({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const GF={kernelName:er,backendName:"webgl",kernelFunc:UF};const jF={kernelName:un,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:r}=e,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const e=LR({inputs:{input:s},backend:r}),n=t({inputs:{x:e},backend:r}),i=ZR({inputs:{input:s},backend:r}),o=UF({inputs:{x:i},backend:r}),a=aA({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),a}return uO({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const HF={kernelName:ln,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r;if(1===e.length)return QT({inputs:{input:e[0]},backend:n,attrs:{dim:s}});const i=e[0].shape,o=e[0].dtype;e.forEach((t=>{T(i,t.shape,"All tensors passed to stack must have matching shapes"),R(o===t.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const a=[],u=nT({inputs:e.map((t=>{const e=QT({inputs:{input:t},backend:n,attrs:{dim:s}});return a.push(e),e})),backend:n,attrs:{axis:s}});return a.forEach((t=>n.disposeIntermediateTensorInfo(t))),u}};class qF{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=uS(r),i=e.map((t=>t[0])).join(","),o=e.map(((e,n)=>e[0]+t[n])).join(","),a=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${i});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${a}));\n        }\n      }\n    `:`\n        int start = ${i};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class XF{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=uS(r),i=e.map((t=>t[0])).join(","),o=e.map(((e,n)=>e[0]+t[n])).join(","),a=WS("rc",r),u=WS("source",r),c=`${a[r-1]} < ${this.outputShape[r-1]}`,l=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${a[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${a[r-2]} += 1;\n       if(${a[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${a[r-1]} += 1;\n         if(${c}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let t=0,e=1===r?2:4;t<e;t++)f+=`\n        ${h[t]}\n        if (${d}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${u.join()}), ${l});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${i});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const KF=t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:i,constantValue:o}=r,a=lt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XF(s.shape,i,o):new qF(s.shape,i,o);return n.runWebGLProgram(a,[s],s.dtype)},JF={kernelName:hn,backendName:"webgl",kernelFunc:KF},YF=bA({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),ZF={kernelName:dn,backendName:"webgl",kernelFunc:YF};const QF={kernelName:pn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:o}=r,a=s.shape.length,u=[],c=V(i,s.shape);let l=c;const h=oa(l,a);let d,f=s;if(null!=h&&(f=MA({inputs:{x:s},backend:n,attrs:{perm:h}}),l=ua(l.length,a),u.push(f)),ia("prod",l,a),n.shouldExecuteOnCPU([f])){const t=n.texData.get(f.dataId).values,{outVals:e,outShape:r,outDtype:s}=TS(f.shape,f.dtype,t,l);d=n.makeTensorInfo(r,s,e)}else{const[t,e]=ra(f.shape,l),r=I(e),i=CA({inputs:{x:f},backend:n,attrs:{shape:[-1,r]}}),o=RA(i,Wr(s.dtype),"prod",n);d=CA({inputs:{x:o},backend:n,attrs:{shape:t}}),u.push(i),u.push(o)}if(o){u.push(d);const t=sa(d.shape,c);d=CA({inputs:{x:d},backend:n,attrs:{shape:t}})}return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),d}},tI=t=>{const{backend:e,attrs:n}=t,{start:r,stop:s,step:i,dtype:o}=n,a=OS(r,s,i,o);return e.makeTensorInfo([a.length],o,a)},eI={kernelName:mn,backendName:"webgl",kernelFunc:tI},nI=mA({opSnippet:"return 1.0 / x;"}),rI={kernelName:yn,backendName:"webgl",kernelFunc:nI},sI=mA({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),iI={kernelName:gn,backendName:"webgl",kernelFunc:sI},oI=mA({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),aI={kernelName:Nn,backendName:"webgl",kernelFunc:oI};class uI{constructor(t,e,n,r,s){this.variableNames=["A"],this.outputShape=[];const[i,o,a,u]=t;this.outputShape=[i,e,n,u];const c=[r&&e>1?o-1:o,r&&n>1?a-1:a],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];let h;h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${a}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class cI{constructor(t,e,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,o,a,u]=t;this.outputShape=[i,e,n,u];const c=[r&&e>1?o-1:o,r&&n>1?a-1:a],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];let h;h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]},\n          ${c[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${a}.0,\n                                     ${a}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const lI={kernelName:kn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r,[u,c]=a,l=lt().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new cI(s.shape,u,c,i,o):new uI(s.shape,u,c,i,o);return n.runWebGLProgram(l,[s],"float32")}};class hI{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,s]=e,[,i,o]=t,a=[n&&i>1?r-1:r,n&&o>1?s-1:s],u=[n&&i>1?i-1:i,n&&o>1?o-1:o],c=a[0]/u[0],l=a[1]/u[1],h=1/c,d=1/l,f=2*Math.ceil(h)+2,p=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${p});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const dI={kernelName:$n,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:o}=r,a=new hI(i.shape,s.shape,o);return n.runWebGLProgram(a,[i],i.dtype)}};class fI{constructor(t,e,n,r,s){this.variableNames=["A"],this.outputShape=[];const[i,o,a,u]=t;this.outputShape=[i,e,n,u];const c=[r&&e>1?o-1:o,r&&n>1?a-1:a],l=[r&&e>1?e-1:e,r&&n>1?n-1:n],h=r?"0.5":"0.0";let d;d=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${a}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const pI={kernelName:wn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:o,size:a}=r,[u,c]=a,l=new fI(s.shape,u,c,i,o);return n.runWebGLProgram(l,[s],s.dtype)}};class mI{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,s]=e,[,i,o]=t,a=[n&&i>1?r-1:r,n&&o>1?s-1:s],u=[n&&i>1?i-1:i,n&&o>1?o-1:o],c=a[0]/u[0],l=a[1]/u[1],h=1/c,d=1/l,f=2*Math.ceil(h)+2,p=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${p});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${a[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${a[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const bI={kernelName:vn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:o}=r,a=new mI(i.shape,s.shape,o);return n.runWebGLProgram(a,[i],i.dtype)}};class yI{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map(((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=uS(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class gI{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=WS("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,i=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=uS(n);function a(n){const r=t.map(((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return a(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",a(t)}(r.slice())};\n          }\n          if(${i}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",a(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",a(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const xI={kernelName:Cn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dims:i}=r,o=s.shape.length,a=V(i,s.shape);if(0===o)return iA({inputs:{x:s},backend:n});const u=lt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new gI(s.shape,a):new yI(s.shape,a);return n.runWebGLProgram(u,[s],s.dtype)}};class wI{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],i=t[2],o=Math.sin(e).toFixed(3),a=Math.cos(e).toFixed(3);this.outputShape=t;const[u,c]=bc(r,s,i),l=u.toFixed(3),h=c.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${l}) * ${a} - (float(y) - ${h}) * ${o};\n          float coordYFloat = (float(x) - ${l}) * ${o} + (float(y) - ${h}) * ${a};\n          int coordX = int(round(coordXFloat + ${l}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${d}\n          if(coordX >= 0 && coordX < ${i} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const vI={kernelName:sr,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:i,center:o}=e,a=n,u=new wI(r.shape,s,i,o);return a.runWebGLProgram(u,[r],r.dtype)}},kI=mA({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),$I={kernelName:En,backendName:"webgl",kernelFunc:kI},NI=mA({opSnippet:"return inversesqrt(x);",cpuKernelImpl:FS}),CI={kernelName:Sn,backendName:"webgl",kernelFunc:NI};class EI{constructor(t,e,n,r,s,i,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;const a=uS(s.length),u=uS(i.length);let c="";1===n?c="i":2===n&&(c="i, j");const l=`getIndices(${c})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`,f=e>1?"strides[j]":"strides";this.userCode=`\n        ${a} strides = ${a}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${l});\n              flattenedIndex += index * ${f};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const SI={kernelName:An,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s,updates:i}=e,{shape:o}=r,{sliceRank:a,numUpdates:u,sliceSize:c,strides:l,outputSize:h}=ci(0,s,o),d=[h/c,c];if(0===h)return n.makeTensorInfo(o,s.dtype);const f=CA({inputs:{x:s},backend:n,attrs:{shape:[u,a]}}),p=CA({inputs:{x:i},backend:n,attrs:{shape:[u,c]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),b=new EI(u,a,f.shape.length,p.shape.length,l,d),y=n.runWebGLProgram(b,[p,f,m],p.dtype),g=CA({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),g}};class AI{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],o=[];for(let r=0;r<e.length;r++)o.push(`${n[r]}`),r<t&&i.push(`${n[r]}`);r=i.join(),s=o.join()}const i=uS(n);this.userCode=`\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const RI={kernelName:Rn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:r,t:s,e:i}=e,o=new AI(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[r,s,i],Br(s.dtype,i.dtype))}},TI=mA({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${kc};\n  float scale = ${$c};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),OI={kernelName:Tn,backendName:"webgl",kernelFunc:TI},FI=mA({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),II={kernelName:Mn,backendName:"webgl",kernelFunc:FI},_I=mA({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),MI={kernelName:_n,backendName:"webgl",kernelFunc:_I},DI=mA({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),LI={kernelName:Fn,backendName:"webgl",kernelFunc:DI},PI=mA({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),zI={kernelName:In,backendName:"webgl",kernelFunc:PI},VI=mA({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),BI={kernelName:Dn,backendName:"webgl",kernelFunc:VI},WI={kernelName:zn,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,paddings:o}=r;R(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const a=i.reduce(((t,e)=>t*e)),u=[[0,0]];u.push(...o);for(let t=1+i.length;t<s.shape.length;++t)u.push([0,0]);const c=[],l=KF({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),h=yc(l.shape,i,a,!1),d=gc(h.length,i.length,!1),f=xc(l.shape,i,a,!1),p=CA({inputs:{x:l},backend:n,attrs:{shape:h}}),m=MA({inputs:{x:p},backend:n,attrs:{perm:d}}),b=CA({inputs:{x:m},backend:n,attrs:{shape:f}});return c.push(l),c.push(p),c.push(m),c.forEach((t=>n.disposeIntermediateTensorInfo(t))),b}};const UI={kernelName:jn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{sparseIndices:s,sparseValues:i,defaultValue:o}=e,{outputShape:a}=r,{sliceRank:u,numUpdates:c,strides:l,outputSize:h}=ci(0,s,a),d=new EI(c,u,s.shape.length,i.shape.length,l,[h,1],!1),f=n.runWebGLProgram(d,[i,s,o],i.dtype),p=CA({inputs:{x:f},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(f),p}};const GI={kernelName:Vn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{numOrSizeSplits:i,axis:o}=r,a=V(o,s.shape)[0],u=Vc(s,i,a),c=s.shape.length,l=new Array(c).fill(0),h=s.shape.slice();return u.map((t=>{const e=[...h];e[a]=t;const r=OR({inputs:{x:s},backend:n,attrs:{begin:l,size:e}});return l[a]+=t,r}))}},jI=mA({opSnippet:"return sqrt(x);"}),HI={kernelName:Ln,backendName:"webgl",kernelFunc:jI},qI={kernelName:Un,backendName:"webgl",kernelFunc:mA({opSnippet:"return x * x;"})},XI="return (a - b) * (a - b);",KI=bA({opSnippet:XI,packedOpSnippet:XI}),JI={kernelName:Wn,backendName:"webgl",kernelFunc:KI};const YI={kernelName:nr,backendName:"webgl",kernelFunc:function({inputs:t,attrs:e,backend:n}){const{x:r}=t,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${e.alpha});\n  `,i=new KS(r.shape,s);return n.runWebGLProgram(i,[r],r.dtype)}};class ZI{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=uS(n.length),i=uS(n.length);let o="";if(1===r)o="coords * strides + begin";else{let t=0;o=n.map(((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const QI={kernelName:Hn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,end:o,strides:a,beginMask:u,endMask:c,ellipsisMask:l,newAxisMask:h,shrinkAxisMask:d}=r,{nonStrided:f,$begin:p,$strides:m,size:b,newShape:y,outShape:g}=Ci(s.shape,i,o,a,u,c,l,h,d),x=CA({inputs:{x:s},backend:n,attrs:{shape:y}});let w;if(f){const t=OR({inputs:{x},backend:n,attrs:{begin:p,size:b}});w=CA({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else if(g.some((t=>0===t)))w=n.makeTensorInfo(g,s.dtype,[]);else{if(n.shouldExecuteOnCPU([x])){const t=n.texData.get(x.dataId).values,e=Hs(x.shape,x.dtype,t),r=MS(g,e,m,p);w=n.makeTensorInfo(g,x.dtype,r.values)}else{const t=new ZI(p,m,g);w=n.runWebGLProgram(t,[x],x.dtype)}}const v=CA({inputs:{x:w},backend:n,attrs:{shape:g}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),v}},t_=mA({opSnippet:"return tan(x);"}),e_={kernelName:qn,backendName:"webgl",kernelFunc:t_},n_=mA({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),r_={kernelName:Xn,backendName:"webgl",kernelFunc:n_};class s_{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=uS(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function i_(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reps:i}=r;if("string"===s.dtype){const t=n.readSync(s.dataId).map((t=>Ar(t))),e=Hs(s.shape,s.dtype,t),r=LS(e,i);return n.makeTensorInfo(r.shape,r.dtype,r.values)}const o=new s_(s.shape,i);return n.runWebGLProgram(o,[s],s.dtype)}const o_={kernelName:Kn,backendName:"webgl",kernelFunc:i_};const a_={kernelName:Jn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{k:i,sorted:o}=r,a=n.readSync(s.dataId),[u,c]=PS(a,s.shape,s.dtype,i,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(c.shape,c.dtype,c.values)]}};const u_={kernelName:Zn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:i}=e;AE(i,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(i.dataId),{outputValues:a,outputShape:u,indices:c}=VS(o,s,i.shape,i.dtype);return[r.makeTensorInfo(u,i.dtype,a),r.makeTensorInfo([c.length],"int32",c)]}};const c_={kernelName:Qn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{value:s}=e;let{axis:i}=r;i<0&&(i+=s.shape.length);const o=s,a=o.shape.length,u=s.shape[i],c=new Array(a-1);let l=0;for(let t=0;t<a;t++)t!==i&&(c[l++]=o.shape[t]);const h=[],d=new Array(a).fill(0),f=o.shape.slice();f[i]=1;const p=new Array(u);for(let t=0;t<p.length;t++){d[i]=t;const e=OR({inputs:{x:o},backend:n,attrs:{begin:d,size:f}}),r=CA({inputs:{x:e},backend:n,attrs:{shape:c}});p[t]=r,h.push(e)}return h.forEach((t=>n.disposeIntermediateTensorInfo(t))),p}};class l_{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,i=t.numSegments,o=i*Math.ceil(s/n);this.outputShape=[r,o];const a=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ";let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${a}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${a};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${c}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${c}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `}}const h_=[eF,rF,PA,VA,WA,GA,qA,JA,YA,ZA,sR,iR,aR,cR,fR,hR,mR,xR,gR,kR,$R,NR,SR,IR,_R,zR,WR,jR,XR,uA,rT,pT,mT,cT,yT,gT,bT,wT,kT,NT,AT,RT,OT,LT,PT,_T,VT,WT,GT,jT,qT,KT,ZT,tO,rO,oO,cO,hO,pO,bO,xO,vO,kO,NO,EO,AO,TO,oA,OO,QR,IO,MO,LO,hA,zO,BO,WO,HO,GO,XO,JO,ZO,iF,cF,uF,dF,fF,pF,aF,mF,bF,gF,vF,$F,FF,NA,_F,DF,PF,VF,DR,WF,jF,HF,JF,ZF,pA,QF,eI,PR,EF,rI,aI,iI,EA,lI,dI,pI,bI,xI,vI,$I,CI,SI,RI,OI,II,MI,LI,zI,FR,OF,BI,WI,UI,GI,HI,qI,JI,YI,QI,RF,_A,e_,r_,o_,a_,DA,u_,c_,{kernelName:tr,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,segmentIds:i}=e,{numSegments:o}=r,a=s.shape.length,u=[];let c=0;const l=oa([c],a);let h=s;null!=l&&(h=MA({inputs:{x:s},backend:n,attrs:{perm:l}}),u.push(h),c=ua(1,a)[0]);const d=Wc(h.shape,c,o),f=I([h.shape[c]]),p=CA({inputs:{x:h},backend:n,attrs:{shape:[-1,f]}});u.push(p);const m=Wr(s.dtype),b=(t,e,r,s,i)=>{const o=t.shape[0],a=t.shape[1],c=Bc(a,i),l=new l_({windowSize:c,inSize:a,batchSize:o,numSegments:i},e),h=n.compileAndRun(l,[t,r],s);if(u.push(h),h.shape[1]===i)return h;const d=tI({backend:n,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),f=i_({inputs:{x:d},backend:n,attrs:{reps:[a/c]}});u.push(d),u.push(f);return b(h,e,f,s,i)},y=CA({inputs:{x:b(p,"unsortedSegmentSum",i,m,o)},backend:n,attrs:{shape:d}});let g=y;if(null!=l){u.push(y);const t=aa(l);g=MA({inputs:{x:g},backend:n,attrs:{perm:t}})}return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),g}},GF];for(const t of h_)fr(t);var d_,f_;let p_;!function(t){t[t.float32=0]="float32",t[t.int32=1]="int32",t[t.bool=2]="bool",t[t.string=3]="string",t[t.complex64=4]="complex64"}(d_||(d_={})),function(t){t[t.linear=0]="linear",t[t.relu=1]="relu",t[t.relu6=2]="relu6",t[t.prelu=3]="prelu",t[t.leakyrelu=4]="leakyrelu"}(f_||(f_={}));const m_={kernelName:ir,backendName:"wasm",setupFunc:function(t){p_=t.wasm.cwrap(ir,null,["number","array","number","number","array","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i,bias:o,preluActivationWeights:a}=e;if("float32"!==s.dtype||"float32"!==i.dtype)throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");const{transposeA:u,transposeB:c,activation:l,leakyreluAlpha:h}=r,d=n.dataIdMap.get(s.dataId).id,f=n.dataIdMap.get(i.dataId).id;let p=0;if(null!=o){const t=n.dataIdMap.get(o.dataId);if(1!==t.shape.length)throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${t.shape.length}.`);p=t.id}const m=null==a?0:n.dataIdMap.get(a.dataId).id,b=f_[l];if(null==b)throw new Error(`${l} activation not yet supported for FusedConv2D in the wasm backend.`);const y=u?s.shape[2]:s.shape[1],g=c?i.shape[1]:i.shape[2],x=s.shape[0],w=n.makeOutput([x,y,g],s.dtype),v=n.dataIdMap.get(w.dataId).id,k=new Uint8Array(new Int32Array(s.shape).buffer),$=new Uint8Array(new Int32Array(i.shape).buffer);return p_(d,k,s.shape.length,f,$,i.shape.length,u,c,b,p,m,h||0,v),w}};function b_(t){let e;return{kernelName:t,backendName:"wasm",setupFunc:function(n){e=n.wasm.cwrap(t,null,["number","number"])},kernelFunc:function(t){const{backend:n,inputs:{x:r}}=t,s=n.dataIdMap.get(r.dataId).id,i=n.makeOutput(r.shape,r.dtype),o=n.dataIdMap.get(i.dataId).id;return 0===I(i.shape)||e(s,o),i}}}const y_=b_(mt);function g_(t,e,n){let r;return{kernelName:t,backendName:"wasm",setupFunc:function(e){r=e.wasm.cwrap(t,null,["number","array","number","number","array","number","number","number"])},kernelFunc:function(s){const{backend:i,inputs:o}=s,{a,b:u}=o,c=i.dataIdMap.get(a.dataId).id,l=i.dataIdMap.get(u.dataId).id,h=null!=n?n:a.dtype,d=To(a.shape,u.shape),f=i.makeOutput(d,h);if(0===I(d))return f;const p=new Uint8Array(new Int32Array(a.shape).buffer),m=new Uint8Array(new Int32Array(u.shape).buffer),b=i.dataIdMap.get(f.dataId).id,y=()=>r(c,p,a.shape.length,l,m,u.shape.length,d_[a.dtype],b);if(e&&"float32"===a.dtype)return y(),f;const g=Ao(a.shape,d),x=Ao(u.shape,d),w=g.every(((t,e)=>t===e)),v=x.every(((t,e)=>t===e));if(w&&v)return y(),f;throw new Error(`Broadcasting along outer dims is not yet supported for ${a.dtype} ${t}.`)}}}const x_=g_(gt,!0);let w_;const v_={kernelName:xt,backendName:"wasm",setupFunc:function(t){w_=t.wasm.cwrap(xt,null,["array","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n}=t,r=n.makeOutput(e[0].shape,e[0].dtype);if(0===I(r.shape))return r;const s=e.map((t=>n.dataIdMap.get(t.dataId).id)),i=new Uint8Array(new Int32Array(s).buffer),o=n.dataIdMap.get(r.dataId).id;return w_(i,s.length,d_[r.dtype],o),r}};function k_(t){const{inputs:{x:e},backend:n}=t,r=n.makeOutput(e.shape,e.dtype),s=n.typedArrayFromHeap(e);return n.typedArrayFromHeap(r).set(s),r}const $_={kernelName:Ce,backendName:"wasm",kernelFunc:k_};let N_;function C_(t){const{inputs:e,backend:n,attrs:r}=t,[s,i]=function(t,e){const n=[],r=[];for(let s=0;s<t.length;++s)1!==t[s]&&n.push(t[s]),1!==t[e[s]]&&r.push(e[s]);for(let t=0;t<r.length;++t){let e=-1;for(let n=0;n<r.length;++n)r[n]>=t&&(-1===e||r[e]>r[n])&&(e=n);r[e]=t}return[n,r]}(e.x.shape,r.perm);let o=!0;for(let t=0;t<i.length;t++)i[t]!==t&&(o=!1);const a=function(t,e){const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];return n}(e.x.shape,r.perm),u={dataId:e.x.dataId,shape:s,dtype:e.x.dtype};if(o){const t=k_({inputs:e,backend:n});return t.shape=a,t}const c=n.makeOutput(a,u.dtype),l=n.dataIdMap.get(u.dataId).id,h=n.dataIdMap.get(c.dataId).id,d=new Uint8Array(new Int32Array(i).buffer),f=new Uint8Array(new Int32Array(u.shape).buffer);return N_(l,f,u.shape.length,d_[u.dtype],h,d,i.length),c}const E_={kernelName:Yn,backendName:"wasm",kernelFunc:C_,setupFunc:function(t){N_=t.wasm.cwrap(Yn,null,["number","array","number","number","number","array","number"])}};function S_(t,e,n){const r=t.shape,s=t.shape.length,i=V(e,r);let o=i;const a=oa(o,s);let u=null,c=!1;if(null!=a){const e=new Array(s);for(let t=0;t<e.length;t++)e[t]=r[a[t]];o=ua(o.length,s),u=C_({inputs:{x:t},attrs:{perm:a},backend:n});const i=n.dataIdMap.get(t.dataId).id;n.dataIdMap.get(u.dataId).id!==i&&(c=!0)}return{transposed:u,originalAxes:i,axes:o,inputWasTransposed:c}}let A_;const R_={kernelName:kt,backendName:"wasm",kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s}=r,{x:i}=n,o=e.dataIdMap.get(i.dataId).id;let a=o,u=i;const{transposed:c,axes:l,inputWasTransposed:h}=S_(i,s,e);if(h){const t=e.dataIdMap.get(c.dataId).id;t!==o&&(u=c,a=t)}const d=u.shape.slice(0,-1),f=e.makeOutput(d,"int32"),p=e.dataIdMap.get(f.dataId).id,m=I(f.shape),b=u.shape[l[0]];return A_(a,d_[u.dtype],m,b,p),h&&e.disposeData(c.dataId),f},setupFunc:function(t){A_=t.wasm.cwrap(kt,null,["number","number","number","number","number"])}};let T_;const O_={kernelName:Rt,backendName:"wasm",setupFunc:function(t){T_=t.wasm.cwrap(Rt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,s=e.x,i=r.dataIdMap.get(s.dataId).id,{filterSize:o,strides:a,pad:u,dimRoundingMode:c}=n,l=qi(s.shape,o,a,1,u,c),h=l.filterHeight,d=l.filterWidth,f=l.padInfo.top,p=l.padInfo.right,m=l.padInfo.bottom,b=l.padInfo.left,y=l.strideHeight,g=l.strideWidth,x=l.inChannels;if("channelsLast"!==l.dataFormat)throw new Error(`wasm backend does not support dataFormat:'${l.dataFormat}'. Please use 'channelsLast'.`);if(1!==l.dilationWidth||1!==l.dilationHeight)throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${l.dilationHeight}, ${l.dilationWidth}].`);const w=r.makeOutput(l.outShape,"float32"),v=r.dataIdMap.get(w.dataId).id;return T_(i,s.shape[0],s.shape[1],s.shape[2],h,d,f,p,m,b,y,g,x,v),w}};function F_(t){const{inputs:e,attrs:n}=t,{x:r}=e,{shape:s}=n,i=I(r.shape),o=z(s,i);return R(i===I(o),(()=>`new shape: ${o}, old shape: ${r.shape}. New shape and old shape must have the same number of elements.`)),{dataId:r.dataId,shape:o,dtype:r.dtype}}const I_={kernelName:xn,backendName:"wasm",kernelFunc:F_};let __;const M_={kernelName:It,backendName:"wasm",setupFunc:function(t){__=t.wasm.cwrap(It,null,["number","array","number","number","array","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i}=e,{transposeA:o,transposeB:a}=r;if("float32"!==s.dtype||"float32"!==i.dtype)throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");const u=s.shape.length,c=i.shape.length,l=o?s.shape[u-2]:s.shape[u-1],h=a?i.shape[c-1]:i.shape[c-2],d=o?s.shape[u-1]:s.shape[u-2],f=a?i.shape[c-2]:i.shape[c-1],p=s.shape.slice(0,-2),m=i.shape.slice(0,-2),b=I(p),y=I(m);R(u>=2&&c>=2&&(b===y||1===b||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${p}) and (${m}).`));const g=(b>y?s.shape.slice(0,-2):i.shape.slice(0,-2)).concat([d,f]);R(l===h,(()=>`Error in matMul: inner shapes (${l}) and (${h}) of Tensors with shapes ${s.shape} and ${i.shape} and transposeA=${o} and transposeB=${a} must match.`));const x=a?[y,f,h]:[y,h,f],w=F_({inputs:{x:s},backend:n,attrs:{shape:o?[b,l,d]:[b,d,l]}}),v=F_({inputs:{x:i},backend:n,attrs:{shape:x}}),k=n.dataIdMap.get(w.dataId).id,$=n.dataIdMap.get(v.dataId).id,N=o?w.shape[2]:w.shape[1],C=a?v.shape[1]:v.shape[2],E=Math.max(b,y),S=n.makeOutput([E,N,C],w.dtype),A=n.dataIdMap.get(S.dataId).id,T=new Uint8Array(new Int32Array(w.shape).buffer),O=new Uint8Array(new Int32Array(v.shape).buffer);return __(k,T,w.shape.length,$,O,v.shape.length,o,a,A),S.shape=g,S}};function D_(t){const{inputs:{x:e},attrs:{dtype:n},backend:r}=t,s=r.makeOutput(e.shape,n),i=r.typedArrayFromHeap(e);return r.typedArrayFromHeap(s).set(i),s}const L_={kernelName:Dt,backendName:"wasm",kernelFunc:D_};let P_;const z_={kernelName:Pt,backendName:"wasm",setupFunc:function(t){P_=t.wasm.cwrap(Pt,null,["number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{clipValueMin:i,clipValueMax:o}=r,a=n.dataIdMap.get(s.dataId).id,u=n.makeOutput(s.shape,s.dtype),c=n.dataIdMap.get(u.dataId).id;return P_(a,i,o,c),u}};function V_(t){const{inputs:e,backend:n}=t,r=V(t.attrs.axis,e[0].shape)[0];let s=fc(e.map((t=>t.shape)),r);const i=e.filter((t=>I(t.shape)>0));if(1===i.length)return k_({inputs:{x:i[0]},backend:n});const o=n.makeOutput(s,e[0].dtype);if(0===I(s))return o;if(dc(i.map((t=>t.shape)),r),"string"===i[0].dtype){const t=i.map((t=>{const e=I(t.shape.slice(r));return F_({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})})),a=t.map((t=>({vals:n.readSync(t.dataId),shape:t.shape})));s=fc(t.map((t=>t.shape)),1);const u=1===t[0].shape[0],c=function(t,e,n,r){const s=U(n,I(e));if(r&&"string"!==n){let e=0;t.forEach((t=>{const n=I(t.shape);s.set(t.vals,e),e+=n}))}else{let r=0;t.forEach((t=>{const i="string"===n?Hc(t.vals):t.vals;let o=0;for(let n=0;n<t.shape[0];++n){const a=n*e[1]+r;for(let e=0;e<t.shape[1];++e)s[a+e]=i[o++]}r+=t.shape[1]}))}return s}(a,s,e[0].dtype,u),l=fc(i.map((t=>t.shape)),r);o.shape=l;return n.dataIdMap.get(o.dataId).stringBytes=qc(c),o}const a=I(i[0].shape.slice(0,r));let u=0;const c=i.map((t=>{const e=I(t.shape.slice(r));return u+=e,e})),l=i.map((t=>n.typedArrayFromHeap(t))),h=n.typedArrayFromHeap(o);for(let t=0;t<a;t++){let e=t*u;for(let n=0;n<l.length;n++){const r=c[n],s=t*r,i=l[n].subarray(s,s+r);h.set(i,e),e+=r}}return o}const B_={kernelName:Bt,backendName:"wasm",kernelFunc:V_};let W_;const U_={kernelName:Wt,backendName:"wasm",setupFunc:function(t){W_=t.wasm.cwrap(Wt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:i}=e,o=r.dataIdMap.get(s.dataId).id,a=r.dataIdMap.get(i.dataId).id,{strides:u,dilations:c,pad:l,dimRoundingMode:h,dataFormat:d}=n,f=so(d),p=Ki(s.shape,i.shape,u,c,l,h,!1,f),m=p.filterHeight,b=p.filterWidth,y=p.padInfo.top,g=p.padInfo.right,x=p.padInfo.bottom,w=p.padInfo.left,v=p.dilationHeight,k=p.dilationWidth,$=p.strideHeight,N=p.strideWidth,C=p.inChannels,E=p.outChannels,S="SAME"===p.padInfo.type?1:0;if("channelsLast"!==p.dataFormat)throw new Error(`wasm backend Conv2D does not support dataFormat:'${p.dataFormat}'. Please use 'channelsLast'.`);const A=r.makeOutput(p.outShape,"float32"),R=r.dataIdMap.get(A.dataId).id;return W_(o,s.shape[0],s.shape[1],s.shape[2],a,m,b,y,g,x,w,S,v,k,$,N,C,E,R),A}};let G_;const j_={kernelName:Gt,backendName:"wasm",setupFunc:function(t){G_=t.wasm.cwrap(Gt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{dy:s,filter:i}=n,{strides:o,pad:a,dataFormat:u,dimRoundingMode:c,inputShape:l}=r,h=so(u),d=Ki(l,i.shape,o,1,a,c,!1,h),{batchSize:f,filterHeight:p,filterWidth:m,inChannels:b,inHeight:y,inWidth:g,outChannels:x,outHeight:w,outWidth:v,strideHeight:k,strideWidth:$}=d,N=p-1-d.padInfo.top,C=m-1-d.padInfo.left,E="channelsLast"===d.dataFormat,S=Z(d.inShape),A=Z(s.shape),[R,T,O]=Z(i.shape),F=S[0],I=E?S[1]:S[2],_=E?S[2]:1,M=E?1:S[1],D=A[0],L=E?A[1]:A[2],P=E?A[2]:1,z=E?1:A[1],V=e.makeOutput(d.inShape,"float32"),B=e.dataIdMap.get(V.dataId).id,W=e.dataIdMap.get(s.dataId).id,U=e.dataIdMap.get(i.dataId).id;return G_(W,U,f,p,m,y,g,b,w,v,x,k,$,N,C,R,T,O,F,I,_,M,D,L,P,z,B),V}},H_=b_(Xt);var q_;let X_;!function(t){t[t.bilinear=0]="bilinear",t[t.nearest=1]="nearest"}(q_||(q_={}));const K_={kernelName:Yt,backendName:"wasm",setupFunc:function(t){X_=t.wasm.cwrap(Yt,null,["number","number","number","number","array","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{method:s,extrapolationValue:i,cropSize:o}=r,{image:a,boxes:u,boxInd:c}=n,l=u.shape[0],[h,d]=o,f=[l,h,d,a.shape[3]];let p,m=e.dataIdMap.get(a.dataId);"float32"!==a.dtype&&(p=D_({backend:e,inputs:{x:a},attrs:{dtype:"float32"}}),m=e.dataIdMap.get(p.dataId));const b=m.id,y=e.dataIdMap.get(u.dataId).id,g=e.dataIdMap.get(c.dataId).id,x=e.makeOutput(f,"float32"),w=e.dataIdMap.get(x.dataId).id,v=new Uint8Array(new Int32Array(a.shape).buffer);return X_(b,y,g,l,v,h,d,q_[s],i,w),null!=p&&e.disposeData(p.dataId),x}};let J_;const Y_={kernelName:Jt,backendName:"wasm",setupFunc:function(t){J_=t.wasm.cwrap(Jt,null,["number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,exclusive:o,reverse:a}=r,u=s.shape.length;R("float32"===s.dtype||"int32"===s.dtype,(()=>`cumsum does not support ${s.dtype} tensors in the WASM backend`));const c=oa([i],u);let l=s;null!==c&&(l=C_({inputs:{x:s},attrs:{perm:c},backend:n}));const h=ua(1,u)[0];ia("cumsum",[h],u);const d=n.makeOutput(l.shape,l.dtype),f=l.shape[h],p=n.dataIdMap.get(l.dataId).id,m=n.dataIdMap.get(d.dataId).id;J_(p,o?1:0,a?1:0,f,m,d_[s.dtype]);let b=d;if(null!==c){b=C_({inputs:{x:d},attrs:{perm:aa(c)},backend:n}),n.disposeData(l.dataId),n.disposeData(d.dataId)}return b}};let Z_;const Q_={kernelName:Qt,backendName:"wasm",setupFunc:function(t){Z_=t.wasm.cwrap(Qt,null,["number","number","number","array","number","array","array","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{x:s}=n,{blockSize:i,dataFormat:o}=r;R(i>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`));const a=s.shape[0],u="NHWC"===o?s.shape[1]:s.shape[2],c="NHWC"===o?s.shape[2]:s.shape[3],l="NHWC"===o?s.shape[3]:s.shape[1],h=u*i,d=c*i,f=l/(i*i),p="NHWC"===o?[a,h,d,f]:[a,f,h,d],m=e.makeOutput(p,"float32"),b=e.dataIdMap.get(s.dataId).id,y=new Uint8Array(new Int32Array(Z(s.shape)).buffer),g=new Uint8Array(new Int32Array(p).buffer),x=new Uint8Array(new Int32Array(Z(p)).buffer),w=e.dataIdMap.get(m.dataId).id;return Z_(b,i,"NHWC"===o?1:0,y,s.shape.length-1,g,x,p.length,w),m}};let tM;const eM={kernelName:te,backendName:"wasm",setupFunc:function(t){tM=t.wasm.cwrap(te,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:i}=e,o=r.dataIdMap.get(s.dataId).id,a=r.dataIdMap.get(i.dataId).id,{strides:u,dilations:c,pad:l,dimRoundingMode:h}=n,d=null==c?[1,1]:c,f=Ki(s.shape,i.shape,u,d,l,h,!0),p=f.filterHeight,m=f.filterWidth,b=f.padInfo.top,y=f.padInfo.right,g=f.padInfo.bottom,x=f.padInfo.left,w=f.dilationHeight,v=f.dilationWidth,k=f.strideHeight,$=f.strideWidth,N=f.inChannels,C=f.outChannels,E="SAME"===f.padInfo.type?1:0;if("channelsLast"!==f.dataFormat)throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);const S=r.makeOutput(f.outShape,"float32"),A=r.dataIdMap.get(S.dataId).id;return tM(o,s.shape[0],s.shape[1],s.shape[2],a,p,m,b,y,g,x,E,w,v,k,$,N,C,A),S}},nM=g_(he,!1,"bool"),rM=b_(de);function sM(t){const{inputs:e,attrs:n,backend:r}=t,{input:s}=e,{dim:i}=n,o=s.shape.length,a=s.shape.slice();let u=i;return i<0&&(R(-(o+1)<=i,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+i+1),a.splice(u,0,1),F_({inputs:{x:s},backend:r,attrs:{shape:a}})}const iM={kernelName:fe,backendName:"wasm",kernelFunc:sM};const oM={kernelName:be,backendName:"wasm",kernelFunc:function(t){const{attrs:{shape:e,value:n,dtype:r},backend:s}=t,i=s.makeOutput(e,r);return s.typedArrayFromHeap(i).fill(n),i}};let aM;const uM={kernelName:ye,backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n}=t,{image:r}=e,s=n.makeOutput(r.shape,r.dtype),i=n.dataIdMap.get(r.dataId).id,o=n.dataIdMap.get(s.dataId).id,[a,u,c,l]=r.shape;return aM(i,a,u,c,l,o),s},setupFunc:function(t){aM=t.wasm.cwrap(ye,null,["number","number","number","number","number","number"])}},cM=b_(ge),lM=g_(xe,!1);let hM;const dM={kernelName:we,backendName:"wasm",setupFunc:function(t){hM=t.wasm.cwrap(we,null,["number","number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{varianceEpsilon:s}=r,{x:i,mean:o,variance:a,offset:u,scale:c}=n,l=e.dataIdMap.get(i.dataId).id,h=e.dataIdMap.get(o.dataId).id,d=e.dataIdMap.get(a.dataId).id,f=null!=u?e.dataIdMap.get(u.dataId).id:0,p=null!=c?e.dataIdMap.get(c.dataId).id:0,m=e.makeOutput(i.shape,i.dtype);if(0===I(i.shape))return m;const b=e.dataIdMap.get(m.dataId).id;return hM(l,h,d,f,p,s,b),m}};let fM;const pM={kernelName:or,backendName:"wasm",setupFunc:function(t){fM=t.wasm.cwrap(or,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:u,pad:c,dilations:l,dataFormat:h,dimRoundingMode:d,activation:f,leakyreluAlpha:p}=n,m=Ki(s.shape,i.shape,u,l,c,d),b=f_[f];if(null==b)throw new Error(`${f} activation not yet supported for FusedConv2D in the wasm backend.`);const y=r.dataIdMap.get(s.dataId).id,g=r.dataIdMap.get(i.dataId).id,x=m.outChannels;let w=0;if(null!=o){const t=r.dataIdMap.get(o.dataId);if(1!==t.shape.length)throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${t.shape.length}.`);if(t.shape[0]!==x)throw new Error(`FusedConv2D bias shape (${t.shape}) does not match the number of output channels (${x})`);w=t.id}const v=m.filterHeight,k=m.filterWidth,$=m.padInfo.top,N=m.padInfo.right,C=m.padInfo.bottom,E=m.padInfo.left,S=m.dilationHeight,A=m.dilationWidth,R=m.strideHeight,T=m.strideWidth,O=m.inChannels,F="SAME"===m.padInfo.type?1:0,I=m.batchSize,_=m.inHeight,M=m.inWidth;if("NHWC"!==h)throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${h}'. Please use 'NHWC'.`);const D=r.makeOutput(m.outShape,"float32"),L=r.dataIdMap.get(D.dataId).id,P=null==a?0:r.dataIdMap.get(a.dataId).id;return fM(y,I,_,M,g,v,k,w,$,N,C,E,F,S,A,R,T,O,x,b,P,p||0,L),D}};let mM;const bM={kernelName:ar,backendName:"wasm",setupFunc:function(t){mM=t.wasm.cwrap(ar,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:i,bias:o,preluActivationWeights:a}=e,{strides:u,pad:c,dilations:l,dataFormat:h,dimRoundingMode:d,activation:f,leakyreluAlpha:p}=n,m=Ki(s.shape,i.shape,u,l,c,d,!0),b=f_[f];if(null==b)throw new Error(`${f} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);const y=r.dataIdMap.get(s.dataId).id,g=r.dataIdMap.get(i.dataId).id,x=m.outChannels;let w=0;if(null!=o){const t=r.dataIdMap.get(o.dataId);if(1!==t.shape.length)throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${t.shape.length}.`);if(t.shape[0]!==x)throw new Error(`FusedDepthwiseConv2D bias shape (${t.shape}) does not match the number of output channels (${x})`);w=t.id}const v=m.filterHeight,k=m.filterWidth,$=m.padInfo.top,N=m.padInfo.right,C=m.padInfo.bottom,E=m.padInfo.left,S=m.dilationHeight,A=m.dilationWidth,R=m.strideHeight,T=m.strideWidth,O=m.inChannels,F="SAME"===m.padInfo.type?1:0,I=m.batchSize,_=m.inHeight,M=m.inWidth;if("NHWC"!==h)throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${h}'. Please use 'NHWC'.`);const D=r.makeOutput(m.outShape,"float32"),L=r.dataIdMap.get(D.dataId).id,P=null==a?0:r.dataIdMap.get(a.dataId).id;return mM(y,I,_,M,g,v,k,w,$,N,C,E,F,S,A,R,T,O,x,b,P,p||0,L),D}};let yM;const gM={kernelName:ke,backendName:"wasm",setupFunc:function(t){yM=t.wasm.cwrap(ke,null,["number","number","number","number","number","number","array","number"])},kernelFunc:function(t){const{backend:e,inputs:n}=t,{params:r,indices:s}=n,[i,o,a,u]=oi(r,s),c=e.makeOutput(i,r.dtype);if(0===o)return c;const l=s.shape,h=l[l.length-1],d=e.dataIdMap.get(r.dataId).id,f=e.dataIdMap.get(s.dataId).id,p=new Uint8Array(new Int32Array(u).buffer),m=e.dataIdMap.get(c.dataId).id;return yM(d,d_[r.dtype],f,o,h,a,p,m),c}};let xM;const wM={kernelName:ve,backendName:"wasm",setupFunc:function(t){xM=t.wasm.cwrap("Gather",null,["number","number","array","number","number","number","array","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{x:s,indices:i}=n,{axis:o,batchDims:a}=r,u=Uc(s,i,V(o,s.shape)[0],a),c=F_({inputs:{x:s},attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]},backend:e}),l=I(i.shape),h=F_({inputs:{x:i},attrs:{shape:[u.batchSize,l/u.batchSize]},backend:e}),d=[u.batchSize,u.outerSize,l/u.batchSize,u.sliceSize],f=e.makeOutput(d,s.dtype);if(0===I(s.shape))return f;const p=c.shape.length-1,m=e.dataIdMap.get(c.dataId).id,b=e.dataIdMap.get(h.dataId).id,y=e.dataIdMap.get(f.dataId).id,g=new Uint8Array(new Int32Array(Z(c.shape)).buffer),x=new Uint8Array(new Int32Array(Z(d)).buffer);return xM(m,d_[s.dtype],g,p,b,u.batchSize,x,y),f.shape=u.outputShape,f}},vM=g_($e,!1,"bool"),kM=g_(Ne,!1,"bool");let $M;const NM={kernelName:Oe,backendName:"wasm",setupFunc:function(t){$M=t.wasm.cwrap(Oe,null,["number","number","number"])},kernelFunc:function(t){const{inputs:{x:e},attrs:{alpha:n},backend:r}=t,s=r.dataIdMap.get(e.dataId).id,i=r.makeOutput(e.shape,e.dtype);if(0!==I(e.shape)){const t=r.dataIdMap.get(i.dataId).id;$M(s,n,t)}return i}},CM=g_(Fe,!1,"bool"),EM=g_(Ie,!1,"bool"),SM=b_(Me),AM=g_(Le,!1,"bool");let RM;const TM={kernelName:We,backendName:"wasm",setupFunc:function(t){RM=t.wasm.cwrap(We,null,["number, number, number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{reductionIndices:s,keepDims:i}=r,{x:o}=n;let a=e.dataIdMap.get(o.dataId).id,u=o;const{transposed:c,axes:l,originalAxes:h,inputWasTransposed:d}=S_(o,s,e);if(d){u=c,a=e.dataIdMap.get(c.dataId).id}ia("max",l,u.shape.length);const[f,p]=ra(u.shape,l),m=I(p),b=e.makeOutput(f,o.dtype);if(0!==I(u.shape)){const t=e.dataIdMap.get(b.dataId).id;RM(a,m,t)}if(d&&e.disposeData(c.dataId),i){const t=sa(b.shape,h);b.shape=t}return b}},OM=g_(Ue,!1);let FM;const IM={kernelName:Ge,backendName:"wasm",setupFunc:function(t){FM=t.wasm.cwrap(Ge,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,s=e.x,i=r.dataIdMap.get(s.dataId).id,{filterSize:o,strides:a,pad:u,dimRoundingMode:c}=n,l=qi(s.shape,o,a,1,u,c),h=l.filterHeight,d=l.filterWidth,f=l.padInfo.top,p=l.padInfo.right,m=l.padInfo.bottom,b=l.padInfo.left,y=l.dilationHeight,g=l.dilationWidth,x=l.strideHeight,w=l.strideWidth,v=l.inChannels,k=l.outChannels;if("channelsLast"!==l.dataFormat)throw new Error(`wasm backend does not support dataFormat:'${l.dataFormat}'. Please use 'channelsLast'.`);const $=r.makeOutput(l.outShape,"float32"),N=r.dataIdMap.get($.dataId).id;return FM(i,s.shape[0],s.shape[1],s.shape[2],h,d,f,p,m,b,y,g,x,w,v,k,N),$}};let _M;const MM={kernelName:Ke,backendName:"wasm",setupFunc:function(t){_M=t.wasm.cwrap(Ke,null,["number, number, number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s,keepDims:i}=r,{x:o}=n,a=e.dataIdMap.get(o.dataId).id;let u=a,c=o;const{transposed:l,axes:h,originalAxes:d,inputWasTransposed:f}=S_(o,s,e);let p=h;if(f){const t=e.dataIdMap.get(l.dataId).id;t!==a&&(c=l,u=t,p=ua(p.length,c.shape.length))}ia("mean",p,c.shape.length);const[m,b]=ra(c.shape,p),y=I(b);let g=c;"float32"!==c.dtype&&(g=D_({backend:e,inputs:{x:c},attrs:{dtype:"float32"}}),u=e.dataIdMap.get(g.dataId).id);const x=e.makeOutput(m,"float32");if(0!==I(c.shape)){const t=e.dataIdMap.get(x.dataId).id;_M(u,y,t)}if(f&&e.disposeData(l.dataId),i){const t=sa(x.shape,d);x.shape=t}return"float32"!==c.dtype&&e.disposeData(g.dataId),x}};let DM;const LM={kernelName:Je,backendName:"wasm",setupFunc:function(t){DM=t.wasm.cwrap(Je,null,["number, number, number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s,keepDims:i}=r,{x:o}=n,a=e.dataIdMap.get(o.dataId).id;let u=a,c=o;const{transposed:l,axes:h,originalAxes:d,inputWasTransposed:f}=S_(o,s,e);if(f){const t=e.dataIdMap.get(l.dataId).id;t!==a&&(c=l,u=t)}ia("min",h,c.shape.length);const[p,m]=ra(c.shape,h),b=I(m),y=e.makeOutput(p,c.dtype);if(0!==I(c.shape)){const t=e.dataIdMap.get(y.dataId).id;DM(u,b,t)}if(f&&e.disposeData(l.dataId),i){const t=sa(y.shape,d);y.shape=t}return y}},PM=g_(Ye,!1),zM=g_(en,!0),VM=b_(nn);function BM(t,e){const n=new Int32Array(t.wasm.HEAPU8.buffer,e,4),r=n[0],s=n[1],i=n[2],o=n[3];return t.wasm._free(e),{pSelectedIndices:r,selectedSize:s,pSelectedScores:i,pValidOutputs:o}}let WM;const UM={kernelName:sn,backendName:"wasm",setupFunc:function(t){WM=t.wasm.cwrap(sn,"number",["number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{iouThreshold:s,maxOutputSize:i,scoreThreshold:o}=r,{boxes:a,scores:u}=n,c=e.dataIdMap.get(a.dataId).id,l=e.dataIdMap.get(u.dataId).id,h=WM(c,l,i,s,o),{pSelectedIndices:d,selectedSize:f,pSelectedScores:p,pValidOutputs:m}=BM(e,h);return e.wasm._free(p),e.wasm._free(m),e.makeOutput([f],"int32",d)}};let GM;const jM={kernelName:on,backendName:"wasm",setupFunc:function(t){GM=t.wasm.cwrap(on,"number",["number","number","number","number","number","bool"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{iouThreshold:s,maxOutputSize:i,scoreThreshold:o,padToMaxOutputSize:a}=r,{boxes:u,scores:c}=n,l=e.dataIdMap.get(u.dataId).id,h=e.dataIdMap.get(c.dataId).id,d=GM(l,h,i,s,o,a),{pSelectedIndices:f,selectedSize:p,pSelectedScores:m,pValidOutputs:b}=BM(e,d);return e.wasm._free(m),[e.makeOutput([p],"int32",f),e.makeOutput([],"int32",b)]}};let HM;const qM={kernelName:an,backendName:"wasm",setupFunc:function(t){HM=t.wasm.cwrap(an,"number",["number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{iouThreshold:s,maxOutputSize:i,scoreThreshold:o,softNmsSigma:a}=r,{boxes:u,scores:c}=n,l=e.dataIdMap.get(u.dataId).id,h=e.dataIdMap.get(c.dataId).id,d=HM(l,h,i,s,o,a),{pSelectedIndices:f,selectedSize:p,pSelectedScores:m,pValidOutputs:b}=BM(e,d);return e.wasm._free(b),[e.makeOutput([p],"int32",f),e.makeOutput([p],"float32",m)]}},XM=g_(rn,!1,"bool");let KM;const JM={kernelName:cn,backendName:"wasm",setupFunc:function(t){KM=t.wasm.cwrap(cn,null,["number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s}=e,{depth:i,onValue:o,offValue:a}=r,u=n.makeOutput([...s.shape,i],"int32"),c=n.dataIdMap.get(u.dataId).id,l=n.dataIdMap.get(s.dataId).id;return KM(l,i,o,a,c),u}};const YM={kernelName:un,backendName:"wasm",kernelFunc:function(t){const{inputs:{x:e},backend:n}=t,r=n.makeOutput(e.shape,e.dtype);return n.typedArrayFromHeap(r).fill(1),r}};const ZM={kernelName:ln,backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r;if(1===e.length)return sM({inputs:{input:e[0]},backend:n,attrs:{dim:s}});const i=e[0].shape,o=e[0].dtype;return e.forEach((t=>{T(i,t.shape,"All tensors passed to stack must have matching shapes"),R(o===t.dtype,(()=>"All tensors passed to stack must have matching dtypes"))})),V_({inputs:e.map((t=>sM({inputs:{input:t},backend:n,attrs:{dim:s}}))),backend:n,attrs:{axis:s}})}};let QM;const tD={kernelName:hn,backendName:"wasm",kernelFunc:function(t){const{inputs:{x:e},backend:n,attrs:{paddings:r,constantValue:s}}=t,i=r.map(((t,n)=>t[0]+e.shape[n]+t[1])),o=n.dataIdMap.get(e.dataId).id,a=n.makeOutput(i,e.dtype),u=n.dataIdMap.get(a.dataId).id,c=new Uint8Array(new Int32Array(e.shape).buffer),l=r.map((t=>t[0])),h=r.map((t=>t[1])),d=new Uint8Array(new Int32Array(l).buffer),f=new Uint8Array(new Int32Array(h).buffer);return QM(o,c,e.shape.length,d_[e.dtype],d,f,s,u),a},setupFunc:function(t){QM=t.wasm.cwrap(hn,null,["number","array","number","number","array","array","number","number"])}},eD=g_(dn,!1);let nD;const rD={kernelName:fn,backendName:"wasm",setupFunc:function(t){nD=t.wasm.cwrap(fn,null,["number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e,i=n.dataIdMap.get(r.dataId).id,o=n.dataIdMap.get(s.dataId).id,a=n.makeOutput(r.shape,"float32"),u=n.dataIdMap.get(a.dataId).id;return nD(i,o,u),a}};let sD;const iD={kernelName:pn,backendName:"wasm",setupFunc:function(t){sD=t.wasm.cwrap(pn,null,["number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s,keepDims:i}=r,{x:o}=n,a=e.dataIdMap.get(o.dataId).id;let u=a,c=o;const{transposed:l,axes:h,originalAxes:d,inputWasTransposed:f}=S_(o,s,e);let p=h;if(f){const t=e.dataIdMap.get(l.dataId).id;t!==a&&(c=l,u=t,p=ua(p.length,c.shape.length))}ia("prod",p,c.shape.length);const[m,b]=ra(c.shape,p),y=I(b),g=e.makeOutput(m,c.dtype);if(0!==I(c.shape)){const t=e.dataIdMap.get(g.dataId).id;sD(u,y,d_[g.dtype],t)}if(f&&e.disposeData(l.dataId),i){const t=sa(g.shape,d);g.shape=t}return g}};const oD={kernelName:mn,backendName:"wasm",kernelFunc:t=>{const{backend:e,attrs:n}=t,{start:r,stop:s,step:i,dtype:o}=n,a=function(t,e,n,r){if(t===e||t<e&&n<0||e<t&&n>1)return nt(0,r);const s=nt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return s}(r,s,i,o),u=e.makeOutput([a.length],o);return e.typedArrayFromHeap(u).set(a),u}},aD=g_(ae,!0),uD=b_(gn),cD=b_(Nn);let lD;const hD={kernelName:kn,backendName:"wasm",setupFunc:function(t){lD=t.wasm.cwrap(kn,null,["number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{images:s}=n,{alignCorners:i,halfPixelCenters:o,size:a}=r,[u,c]=a,[l,h,d,f]=s.shape,p=[l,u,c,f];let m,b=e.dataIdMap.get(s.dataId);"float32"!==b.dtype&&(m=D_({backend:e,inputs:{x:s},attrs:{dtype:"float32"}}),b=e.dataIdMap.get(m.dataId));const y=b.id,g=e.makeOutput(p,"float32");if(0===I(s.shape))return g;const x=e.dataIdMap.get(g.dataId).id;return lD(y,l,h,d,f,u,c,i?1:0,o?1:0,x),null!=m&&e.disposeData(m.dataId),g}};let dD;const fD={kernelName:Cn,backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dims:i}=r,o=V(i,s.shape);if(0===s.shape.length)return k_({inputs:{x:s},backend:n});const a=n.makeOutput(s.shape,s.dtype),u=n.dataIdMap.get(s.dataId).id,c=n.dataIdMap.get(a.dataId).id,l=new Uint8Array(new Int32Array(o).buffer),h=new Uint8Array(new Int32Array(s.shape).buffer);return dD(u,l,o.length,h,s.shape.length,c),F_({inputs:{x:a},attrs:{shape:s.shape},backend:n})},setupFunc:function(t){dD=t.wasm.cwrap(Cn,null,["number","array","number","array","number","number"])}};let pD;const mD={kernelName:sr,backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{image:s}=e,{radians:i,fillValue:o,center:a}=r,u=n.makeOutput(s.shape,s.dtype),c=n.dataIdMap.get(s.dataId).id,l=n.dataIdMap.get(u.dataId).id,[h,d,f,p]=s.shape,[m,b]=bc(a,d,f),y="number"==typeof o?[o,o,o,0===o?0:255]:[...o,255],g=new Uint8Array(new Int32Array(y).buffer);return pD(c,h,d,f,p,i,m,b,g,y.length,l),u},setupFunc:function(t){pD=t.wasm.cwrap(sr,null,["number","number","number","number","number","number","number","number","array","number","number"])}},bD=b_(En),yD=b_(Sn);let gD;const xD={kernelName:An,backendName:"wasm",setupFunc:function(t){gD=t.wasm.cwrap(An,null,["number","number","number","number","number","number","array","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{indices:s,updates:i}=n,{shape:o}=r,a=e.makeOutput(o,i.dtype);if(0===I(o))return a;const{sliceRank:u,numUpdates:c,sliceSize:l,strides:h,outputSize:d}=ci(0,s,o),f=e.dataIdMap.get(s.dataId).id,p=e.dataIdMap.get(i.dataId).id,m=new Uint8Array(new Int32Array(h).buffer),b=e.dataIdMap.get(a.dataId).id;return gD(f,p,d_[i.dtype],u,c,l,m,d,b),a}};let wD;const vD={kernelName:Rn,backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:r,t:s,e:i}=e,o=n.dataIdMap.get(r.dataId).id,a=n.dataIdMap.get(s.dataId).id,u=n.dataIdMap.get(i.dataId).id,c=n.makeOutput(s.shape,s.dtype),l=n.dataIdMap.get(c.dataId).id,h=r.shape.length,d=s.shape.length,f=0===h||h>1||1===d?1:I(s.shape.slice(1));return wD(o,a,u,f,l),c},setupFunc:function(t){wD=t.wasm.cwrap("SelectV2",null,["number","number","number","number","number"])}};let kD;const $D={kernelName:"Sigmoid",backendName:"wasm",setupFunc:function(t){kD=t.wasm.cwrap(Mn,null,["number","number"])},kernelFunc:function(t){const{backend:e,inputs:{x:n}}=t,r=e.dataIdMap.get(n.dataId).id,s=e.makeOutput(n.shape,n.dtype),i=e.dataIdMap.get(s.dataId).id;return 0===I(s.shape)||kD(r,i),s}},ND=b_(Fn);function CD(t,e,n,r,s){const i=ki(r,e,n),o=I(n),a=Z(r);if(i){const n=$i(e,a);return"string"===s?t.slice(n,n+o):t.subarray(n,n+o)}const u=Hs(r,s,"string"===s?Hc(t):t),c=Hs(n,s);for(let t=0;t<c.size;++t){const n=c.indexToLoc(t),r=n.map(((t,n)=>t+e[n]));c.set(u.get(...r),...n)}return"string"===s?qc(c.values):c.values}function ED(t){const{inputs:{x:e},attrs:{begin:n,size:r},backend:s}=t,[i,o]=Ni(e,n,r),a=ki(e.shape,i,o),u=s.readSync(e.dataId),c=s.makeOutput(o,e.dtype),l=Z(e.shape),h=s.dataIdMap.get(c.dataId);if(a){const t=$i(i,l);if("string"===e.dtype)h.stringBytes=u.slice(t,t+I(o));else{s.typedArrayFromHeap(c).set(u.subarray(t,t+I(o)))}return c}if("string"===e.dtype){const t=CD(u,i,o,e.shape,e.dtype);return h.stringBytes=t,c}const d=s.typedArrayFromHeap(c),f=e.shape.length;if(2===f)!function(t,e,n,r,s){let i=0;const o=r[0],a=r[1],u=o+s[0];for(let r=o;r<u;r++){const o=r*e+a;n.set(t.subarray(o,o+s[1]),i),i+=s[1]}}(u,l[0],d,i,o);else if(3===f)!function(t,e,n,r,s,i){let o=0;const a=s[0],u=s[1],c=s[2],l=a+i[0],h=u+i[1];for(let s=a;s<l;s++)for(let a=u;a<h;a++){const u=s*e+a*n+c;r.set(t.subarray(u,u+i[2]),o),o+=i[2]}}(u,l[0],l[1],d,i,o);else if(4===f)!function(t,e,n,r,s,i,o){let a=0;const u=i[0],c=i[1],l=i[2],h=u+o[0],d=c+o[1],f=l+o[2],p=i[3];for(let i=u;i<h;i++)for(let u=c;u<d;u++)for(let c=l;c<f;c++){const l=i*e+u*n+c*r+p;s.set(t.subarray(l,l+o[3]),a),a+=o[3]}}(u,l[0],l[1],l[2],d,i,o);else{const t=CD(u,i,o,e.shape,e.dtype);d.set(t)}return c}let SD;let AD;let RD;let TD;let OD;let FD;const ID=[y_,x_,v_,R_,O_,M_,L_,z_,B_,U_,j_,H_,K_,Y_,Q_,eM,nM,rM,iM,oM,uM,cM,lM,m_,dM,pM,bM,gM,wM,vM,kM,$_,NM,CM,EM,SM,AM,TM,OM,IM,MM,LM,PM,zM,VM,UM,jM,qM,XM,JM,YM,ZM,tD,eD,rD,iD,oD,aD,uD,cD,I_,hD,fD,mD,yD,bD,xD,vD,$D,ND,{kernelName:On,backendName:"wasm",kernelFunc:ED},{kernelName:Bn,backendName:"wasm",setupFunc:function(t){SD=t.wasm.cwrap(Bn,null,["number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:{logits:n},attrs:{dim:r}}=t,s=e.dataIdMap.get(n.dataId).id,i=e.makeOutput(n.shape,n.dtype),o=e.dataIdMap.get(i.dataId).id,a=n.shape[r],u=I(n.shape)/a;return 0===I(i.shape)||SD(s,o,a,u),i}},{kernelName:Vn,backendName:"wasm",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{numOrSizeSplits:i,axis:o}=n,a=V(o,s.shape)[0],u=Vc(s,i,a),c=new Array(s.shape.length).fill(0),l=s.shape.slice();return u.map((t=>{const e=[...l];e[a]=t;const n=ED({inputs:{x:s},attrs:{begin:c,size:e},backend:r});return c[a]+=t,n}))}},b_(Ln),b_(Un),g_(Wn,!0),{kernelName:nr,backendName:"wasm",setupFunc:function(t){AD=t.wasm.cwrap(nr,null,["number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{alpha:s}=r,{x:i}=n,o=e.dataIdMap.get(i.dataId).id,a=e.makeOutput(i.shape,i.dtype),u=e.dataIdMap.get(a.dataId).id;return AD(o,s,u),a}},{kernelName:Hn,backendName:"wasm",setupFunc:function(t){RD=t.wasm.cwrap(Hn,null,["number","array","number","array","array","array","array","array","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{x:s}=n;let{begin:i,end:o,strides:a}=r;null==a&&(a=new Array(i.length));const{beginMask:u,endMask:c,ellipsisMask:l,newAxisMask:h,shrinkAxisMask:d}=r,f=hi(l);if(f.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==l&&0!==h)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==l&&0!==d)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const p=s.shape.length-i.length,m=hi(h),b=s.shape.slice();m.forEach((t=>{i[t]=0,o[t]=1,b.splice(t,0,1)}));const y=F_({inputs:{x:s},attrs:{shape:b},backend:e}),{begin:g,end:x,strides:w}=bi(y.shape,f,p,i,o,a,u,c,l);i=g,o=x,a=w;const v=hi(d);v.forEach((t=>{o[t]=i[t]+1,a[t]=1}));const k=di(i,o,a),$=k.filter(((t,e)=>-1===v.indexOf(e)));if(a.every((t=>1===t))){return F_({inputs:{x:ED({inputs:{x:s},attrs:{begin:i,size:k},backend:e})},attrs:{shape:$},backend:e})}const N=e.makeOutput($,"float32");if(!$.some((t=>0===t))){const t=e.dataIdMap.get(y.dataId).id,n=new Uint8Array(new Int32Array(Z(y.shape)).buffer),r=new Uint8Array(new Int32Array(i).buffer),s=new Uint8Array(new Int32Array(o).buffer),u=new Uint8Array(new Int32Array(a).buffer),c=new Uint8Array(new Int32Array($).buffer),l=new Uint8Array(new Int32Array(Z($)).buffer),h=e.dataIdMap.get(N.dataId).id;RD(t,n,y.shape.length,r,s,u,c,l,$.length,h)}return F_({inputs:{x:N},attrs:{shape:$},backend:e})}},g_(Gn,!0),{kernelName:Pn,backendName:"wasm",setupFunc:function(t){TD=t.wasm.cwrap(Pn,null,["number, number, number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s,keepDims:i}=r,{x:o}=n,a=e.dataIdMap.get(o.dataId).id;let u=a,c=o;const{transposed:l,axes:h,originalAxes:d,inputWasTransposed:f}=S_(o,s,e);let p=h;if(f){const t=e.dataIdMap.get(l.dataId).id;t!==a&&(c=l,u=t,p=ua(p.length,c.shape.length))}ia("sum",p,c.shape.length);const[m,b]=ra(c.shape,p),y=I(b),g=e.makeOutput(m,c.dtype);if(0!==I(c.shape)){const t=e.dataIdMap.get(g.dataId).id;TD(u,y,t)}if(f&&e.disposeData(l.dataId),i){const t=sa(g.shape,d);g.shape=t}return g}},b_(Xn),{kernelName:Kn,backendName:"wasm",setupFunc:function(t){OD=t.wasm.cwrap(Kn,null,["number","array","number","array","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,i=n.dataIdMap.get(s.dataId).id,{reps:o}=r,a=new Array(s.shape.length);for(let t=0;t<a.length;t++)a[t]=s.shape[t]*o[t];const u=new Uint8Array(new Int32Array(s.shape).buffer),c=new Uint8Array(new Int32Array(a).buffer),l=n.makeOutput(a,s.dtype),h=n.dataIdMap.get(l.dataId).id;return OD(i,u,s.shape.length,c,a.length,d_[l.dtype],h),l}},{kernelName:Jn,backendName:"wasm",setupFunc:function(t){FD=t.wasm.cwrap(Jn,null,["number","array","number","number","number","bool","number","number"])},kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r}=t,{k:s,sorted:i}=n,o=e.dataIdMap.get(r.dataId).id,a=new Uint8Array(new Int32Array(r.shape).buffer),u=r.shape.slice();u[u.length-1]=s;const c=e.makeOutput(u,r.dtype),l=e.dataIdMap.get(c.dataId).id,h=e.makeOutput(u,"int32"),d=e.dataIdMap.get(h.dataId).id;return FD(o,a,r.shape.length,d_[r.dtype],s,i,l,d),[c,h]}},E_,{kernelName:Qn,backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{value:s}=e;let{axis:i}=r;i<0&&(i+=s.shape.length);const o=s.shape[i],a=s.shape.length,u=new Array(a-1);let c=0;for(let t=0;t<a;t++)t!==i&&(u[c++]=s.shape[t]);const l=new Array(o),h=new Array(a).fill(0),d=s.shape.slice();d[i]=1;for(let t=0;t<l.length;t++)h[i]=t,l[t]=ED({inputs:{x:s},attrs:{begin:h,size:d},backend:n});return l.map((({dataId:t,dtype:e})=>({dataId:t,dtype:e,shape:u})))}},{kernelName:er,backendName:"wasm",kernelFunc:function(t){const{inputs:{x:e},backend:n}=t,r=n.makeOutput(e.shape,e.dtype);return n.typedArrayFromHeap(r).fill(0),r}}];for(const t of ID)fr(t);const _D=lt();_D.registerFlag("WASM_HAS_SIMD_SUPPORT",(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11])))),_D.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT",(async()=>{if(_D.get("IS_NODE"))return!1;try{return(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch(t){return!1}}));var MD=n(349),DD=n.n(MD);var LD=n(234),PD=n.n(LD);class zD extends N{constructor(t){super(),this.wasm=t,this.dataIdNextNumber=1,this.wasm.tfjs.init(),this.dataIdMap=new $(this,Ti())}write(t,e,n){const r={};return this.move(r,t,e,n),r}numDataIds(){return this.dataIdMap.numDataIds()}async time(t){const e=Er();t();return{kernelMs:Er()-e}}move(t,e,n,r){const s=this.dataIdNextNumber++;if("string"===r){const i=e;return void this.dataIdMap.set(t,{id:s,stringBytes:i,shape:n,dtype:r,memoryOffset:null})}const i=I(n),o=i*H(r),a=this.wasm._malloc(o);this.dataIdMap.set(t,{id:s,memoryOffset:a,shape:n,dtype:r}),this.wasm.tfjs.registerTensor(s,i,a),null!=e&&this.wasm.HEAPU8.set(new Uint8Array(e.buffer,e.byteOffset,o),a)}async read(t){return this.readSync(t)}readSync(t){const{memoryOffset:e,dtype:n,shape:r,stringBytes:s}=this.dataIdMap.get(t);if("string"===n)return s;return function(t,e){switch(e){case"float32":return new Float32Array(t);case"int32":return new Int32Array(t);case"bool":return new Uint8Array(t);default:throw new Error(`Unknown dtype ${e}`)}}(this.wasm.HEAPU8.slice(e,e+I(r)*H(n)).buffer,n)}disposeData(t){const e=this.dataIdMap.get(t);this.wasm._free(e.memoryOffset),this.wasm.tfjs.disposeData(e.id),this.dataIdMap.delete(t)}floatPrecision(){return 32}getMemoryOffset(t){return this.dataIdMap.get(t).memoryOffset}dispose(){this.wasm.tfjs.dispose(),this.wasm=null}memory(){return{unreliable:!1}}makeOutput(t,e,n){let r;if(null==n)r=this.write(null,t,e);else{r={};const s=this.dataIdNextNumber++;this.dataIdMap.set(r,{id:s,memoryOffset:n,shape:t,dtype:e});const i=I(t);this.wasm.tfjs.registerTensor(s,i,n)}return{dataId:r,shape:t,dtype:e}}typedArrayFromHeap({shape:t,dtype:e,dataId:n}){const r=this.wasm.HEAPU8.buffer,{memoryOffset:s}=this.dataIdMap.get(n),i=I(t);switch(e){case"float32":return new Float32Array(r,s,i);case"int32":return new Int32Array(r,s,i);case"bool":return new Uint8Array(r,s,i);default:throw new Error(`Unknown dtype ${e}`)}}}function VD(t){return(e,n)=>(function(t,e){return lt().platform.fetch(t,e)}(t,{credentials:"same-origin"}).then((r=>{r.ok||e.env.a(`failed to load wasm binary file at '${t}'`),r.arrayBuffer().then((t=>{WebAssembly.instantiate(t,e).then((t=>{n(t.instance)}))}))})),{})}function BD(t,e,n){if(null!=UD)return UD;let r="tfjs-backend-wasm.wasm";return t&&e?r="tfjs-backend-wasm-threaded-simd.wasm":t&&(r="tfjs-backend-wasm-simd.wasm"),null!=jD&&null!=jD[r]?jD[r]:n+r}const WD=["tfjs-backend-wasm.wasm","tfjs-backend-wasm-simd.wasm","tfjs-backend-wasm-threaded-simd.wasm"];let UD=null,GD=null,jD={},HD=!1,qD=!1;Li("wasm",(async()=>{const{wasm:t}=await async function(){const[t,e]=await Promise.all([lt().getAsync("WASM_HAS_SIMD_SUPPORT"),lt().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);return new Promise(((n,r)=>{const s={};let i;s.locateFile=(n,r)=>{if(n.endsWith(".worker.js")){const t=new Blob(['var threadInfoStruct=0;var selfThreadId=0;var parentThreadId=0;var Module={};function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:selfThreadId})}var err=threadPrintErr;this.alert=threadAlert;Module["instantiateWasm"]=function(info,receiveInstance){var instance=new WebAssembly.Instance(Module["wasmModule"],info);Module["wasmModule"]=null;receiveInstance(instance);return instance.exports};this.onmessage=function(e){try{if(e.data.cmd==="load"){Module["DYNAMIC_BASE"]=e.data.DYNAMIC_BASE;Module["DYNAMICTOP_PTR"]=e.data.DYNAMICTOP_PTR;Module["wasmModule"]=e.data.wasmModule;Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob==="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}Module=WasmBackendModuleThreadedSimd(Module);postMessage({"cmd":"loaded"})}else if(e.data.cmd==="objectTransfer"){Module["PThread"].receiveObjectTransfer(e.data)}else if(e.data.cmd==="run"){Module["__performance_now_clock_drift"]=performance.now()-e.data.time;threadInfoStruct=e.data.threadInfoStruct;Module["__register_pthread_ptr"](threadInfoStruct,0,0);selfThreadId=e.data.selfThreadId;parentThreadId=e.data.parentThreadId;var max=e.data.stackBase;var top=e.data.stackBase+e.data.stackSize;Module["establishStackSpace"](top,max);Module["_emscripten_tls_init"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].setThreadStatus(Module["_pthread_self"](),1);try{var result=Module["dynCall_ii"](e.data.start_routine,e.data.arg);if(!Module["getNoExitRuntime"]())Module["PThread"].threadExit(result)}catch(ex){if(ex==="Canceled!"){Module["PThread"].threadCancel()}else if(ex!="unwind"){Atomics.store(Module["HEAPU32"],threadInfoStruct+4>>2,ex instanceof Module["ExitStatus"]?ex.status:-2);Atomics.store(Module["HEAPU32"],threadInfoStruct+0>>2,1);Module["_emscripten_futex_wake"](threadInfoStruct+0,2147483647);if(!(ex instanceof Module["ExitStatus"]))throw ex}}}else if(e.data.cmd==="cancel"){if(threadInfoStruct){Module["PThread"].threadCancel()}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processThreadQueue"){if(threadInfoStruct){Module["_emscripten_current_thread_process_queued_calls"]()}}else{err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){err("worker.js onmessage() captured an uncaught exception: "+ex);if(ex.stack)err(ex.stack);throw ex}};if(typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string"){self={location:{href:__filename}};var onmessage=this.onmessage;var nodeWorkerThreads=require("worker_threads");Worker=nodeWorkerThreads.Worker;var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",function(data){onmessage({data:data})});var nodeFS=require("fs");var nodeRead=function(filename){return nodeFS.readFileSync(filename,"utf8")};function globalEval(x){global.require=require;global.Module=Module;eval.call(null,x)}importScripts=function(f){globalEval(nodeRead(f))};postMessage=function(msg){parentPort.postMessage(msg)};if(typeof performance==="undefined"){performance={now:function(){return Date.now()}}}}'],{type:"application/javascript"});return URL.createObjectURL(t)}return n.endsWith(".wasm")?BD(t,e,null!=GD?GD:r):r+n},qD&&(s.instantiateWasm=VD(BD(t,e,null!=GD?GD:""))),e&&t&&null==UD?(i=DD()(s),i.mainScriptUrlOrBlob=new Blob(["var WasmBackendModuleThreadedSimd = "+DD().toString()],{type:"text/javascript"})):i=PD()(s),i.tfjs={init:i.cwrap("init",null,[]),registerTensor:i.cwrap("register_tensor",null,["number","number","number"]),disposeData:i.cwrap("dispose_data",null,["number"]),dispose:i.cwrap("dispose",null,[])};let o=!1;i.onRuntimeInitialized=()=>{o=!0,HD=!1,n({wasm:i})},i.onAbort=()=>{o||HD||(HD=!0,r({message:"Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers"}))}}))}();return new zD(t)}),2),function(t,e=!1){if(HD)throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");if("string"==typeof t)GD=t;else{jD=t;const e=WD.filter((t=>null==jD[t]));if(e.length>0)throw new Error(`There were no entries found for the following binaries: ${e.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`)}qD=e}({"tfjs-backend-wasm.wasm":"/wasm/tfjs-backend-wasm.wasm","tfjs-backend-wasm-simd.wasm":"/wasm/tfjs-backend-wasm-simd.wasm","tfjs-backend-wasm-threaded-simd.wasm":"/wasm/tfjs-backend-wasm-simd.wasm"});let XD=new class{constructor(t={}){this.options={modelUrl:"/models/pass_uint8/model.json",modelClasses:{1:{name:"id_front",id:1,displayName:"ID Front"},2:{name:"id_back",id:2,displayName:"ID Back"},3:{name:"pass_main",id:3,displayName:"Passport Main"},4:{name:"pass_full",id:4,displayName:"Passport Full"},5:{name:"driver_front",id:4,displayName:"Driver license"}},maxNumBoxes:20,minScore:.95},this.options=k(this.options,t),this.model=null,this.modelLoaded=!1}async load(t){"function"!=typeof OffscreenCanvas?(console.log("scanner use CPU"),await Mi("cpu")):console.log("scanner use GPU"),this.model=await async function(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t=`${t}model.json?tfjs-format=file`);const n=new Bx(t,e);return await n.load(),n}(this.options.modelUrl);let e=pa([1,320,320,3]).toInt();await this.model.executeAsync(e);e.dispose(),this.modelLoaded=!0;let n=navigator.platform||null;null!=n&&n.includes("Win")&&await Mi("wasm"),"function"==typeof t&&t()}async detect(t,e){let n=null;this._callback=e,this.modelLoaded||"function"==typeof e&&e(n);let r=navigator.platform||null;"webgl"===Di()&&null!=r&&r.includes("Win")&&(dt.set("WEBGL_PACK_DEPTHWISECONV",!1),dt.set("WEBGL_CONV_IM2COL",!1));let s=ii(t).expandDims(),i=s.shape[1],o=s.shape[2],a=await this.model.executeAsync(s);if(s.dispose(),8===a.length){let t=this.findOutputIndex(a,[1,1917,5]),e=this.findOutputIndex(a,[1,1917,4]),r=a[t].dataSync(),s=a[e].dataSync();Ii(a);let u=this.calculateMaxScores(r,a[t].shape[1],a[t].shape[2]),c=u[0],l=u[1],h=Di();"webgl"===Di()&&Mi("cpu");let d=Fi((()=>{let t=Wa(s,[a[e].shape[1],a[e].shape[2]]),n=this.options.minScore,r=Qu.nonMaxSuppression(t,c,this.options.maxNumBoxes,n,n);return t.dispose(),r})),f=d.dataSync();d.dispose(),h!==Di()&&Mi(h),n=this.buildDetectedObjects(o,i,s,c,f,l)}else Ii(a),a=null;"function"==typeof e&&e(n)}findOutputIndex(t,e){for(let n in t)if(JSON.stringify(t[n].shape)===JSON.stringify(e))return n}buildDetectedObjects(t,e,n,r,s,i){let o=s.length,a=[];for(let u=0;u<o;u++){let o=[];for(let t=0;t<4;t++)o[t]=n[4*s[u]+t];let c=o[0]*e,l=o[1]*t,h=o[2]*e,d=o[3]*t;o[0]=l,o[1]=c,o[2]=d-l,o[3]=h-c,a.push({bbox:o,class:this.options.modelClasses[i[s[u]]].name,label:this.options.modelClasses[i[s[u]]].displayName,score:r[s[u]]})}return a}calculateMaxScores(t,e,n){let r=[],s=[];for(let i=0;i<e;i++){let e=Number.MIN_VALUE,o=-1;for(let r=0;r<n;r++)t[i*n+r]>e&&(e=t[i*n+r],o=r);r[i]=e,s[i]=o}return[r,s]}};onmessage=function(t){let e=t.data;"scan"===e.type&&("getCard"===e.action?XD.detect(e.data,(t=>{postMessage({type:"scan",action:null,data:t})})):"loadCard"===e.action&&XD.load((()=>{postMessage({type:"scanLoaded",action:null,data:!0})})))}})()})();